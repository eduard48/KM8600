
KM_8600_v330.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00002ae0  00002b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ae0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000531  00800100  00800100  00002b94  2**0
                  ALLOC
  3 .eeprom       0000005c  00810000  00810000  00002b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e7  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000343  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e8  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000890  00000000  00000000  00006964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000867  00000000  00000000  000071f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a1d  00000000  00000000  00007a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  00009478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_4>
      14:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_5>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_9>
      28:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_10>
      2c:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_11>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_15>
      40:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_16>
      44:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_17>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_20>
      54:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_21>
      58:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__vector_22>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	23 0c       	add	r2, r3
      7e:	e9 0c       	add	r14, r9
      80:	f2 0c       	add	r15, r2
      82:	f0 0b       	sbc	r31, r16
      84:	f9 0b       	sbc	r31, r25
      86:	01 0c       	add	r0, r1
      88:	09 0c       	add	r0, r9
      8a:	11 0c       	add	r1, r1

0000008c <__trampolines_end>:
      8c:	31 30       	cpi	r19, 0x01	; 1
      8e:	30 30       	cpi	r19, 0x00	; 0
      90:	30 31       	cpi	r19, 0x10	; 16
      92:	20 00       	.word	0x0020	; ????

00000094 <fl_version>:
      94:	30 32 30 33 33 30 00                                020330.

0000009b <fl_name>:
      9b:	4b 4d 30 31 2d 38 36 30 30 2e 4d 30 00              KM01-8600.M0.

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
      b4:	26 e0       	ldi	r18, 0x06	; 6
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a1 33       	cpi	r26, 0x31	; 49
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <main>
      c8:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <InitLine>:

//=========================== Фукция инициализации портов входа/выхода ====================
void InitLine(void)
{
	// --- настраиваю входы/выходы для контроллера КМ01-8600.М ---
	PORTA = 0x00;		// не подтягиваем к + входы DI0...DI7
      d0:	12 b8       	out	0x02, r1	; 2
	DDRA  = 0x00;		// Выводы  DI0...DI7 - входы
      d2:	11 b8       	out	0x01, r1	; 1
	PORTB = 0x10;		// на выходе SS д.б. 1
      d4:	80 e1       	ldi	r24, 0x10	; 16
      d6:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0xB8;		// Выводы MOSI,SCK,SS,LD -выходы
      d8:	88 eb       	ldi	r24, 0xB8	; 184
      da:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00;		// на выходах - 0
      dc:	18 b8       	out	0x08, r1	; 8
	DDRC  = 0x3F;		// Выводы  DO0...DO5 -выходы
      de:	8f e3       	ldi	r24, 0x3F	; 63
      e0:	87 b9       	out	0x07, r24	; 7
	PORTD = 0x81;		// подтягиваем к + JP1,RX
      e2:	81 e8       	ldi	r24, 0x81	; 129
      e4:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x06;		// Выводы  JP1 - вход, TXE и TX - выходы
      e6:	86 e0       	ldi	r24, 0x06	; 6
      e8:	8a b9       	out	0x0a, r24	; 10
      ea:	08 95       	ret

000000ec <InitDev>:
********************************************************************************/
void InitDev(void)
{
unsigned char i;
	// --- настраиваю прерывания по изменению состояния входов ---
	PCICR |= (1<<PCIE1) | (1<<PCIE0);								// Разрешение прерывания для группы PCINT0...PCINT7 и PCINT8...PCINT15 (PORTA и PORTB)
      ec:	e8 e6       	ldi	r30, 0x68	; 104
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	83 60       	ori	r24, 0x03	; 3
      f4:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT7) | (1<<PCINT6) | (1<<PCINT5) | (1<<PCINT4) | (1<<PCINT3) | (1<<PCINT2) | (1<<PCINT1) | (1<<PCINT0); //Разрешить прерывания PCINT0...PCINT7 (DI1...DI8)
      f6:	eb e6       	ldi	r30, 0x6B	; 107
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	8f ef       	ldi	r24, 0xFF	; 255
      fe:	80 83       	st	Z, r24
	PCMSK1 |= (0<<PCINT7) | (0<<PCINT6) | (0<<PCINT5) | (0<<PCINT4) | (0<<PCINT3) | (0<<PCINT2) | (0<<PCINT1) | (1<<PCINT0); // Разрешить прерывания PCINT8 (UDI)
     100:	ec e6       	ldi	r30, 0x6C	; 108
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	81 60       	ori	r24, 0x01	; 1
     108:	80 83       	st	Z, r24
	// --- настраиваю работу ШИМ для выходов с ОК (DO5, DO6) ---
	if((MB_Hreg[34] & 0x03) != 0)	// Если разрешена работа хотя-бы одного из выходов
     10a:	80 91 7d 05 	lds	r24, 0x057D
     10e:	90 91 7e 05 	lds	r25, 0x057E
     112:	83 70       	andi	r24, 0x03	; 3
     114:	99 27       	eor	r25, r25
     116:	89 2b       	or	r24, r25
     118:	11 f1       	breq	.+68     	; 0x15e <InitDev+0x72>
		{
			TCCR2A = (1<<WGM21)|(1<<WGM20);						// тип ШИМ - FastPWM
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	80 93 b0 00 	sts	0x00B0, r24
			i = ((MB_Hreg[34] >> 8) & 0x03);					// определяю категорию частоты ШИМ
     120:	80 91 7e 05 	lds	r24, 0x057E
     124:	83 70       	andi	r24, 0x03	; 3
				switch (i)
     126:	82 30       	cpi	r24, 0x02	; 2
     128:	41 f0       	breq	.+16     	; 0x13a <InitDev+0x4e>
     12a:	83 30       	cpi	r24, 0x03	; 3
     12c:	51 f0       	breq	.+20     	; 0x142 <InitDev+0x56>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	61 f4       	brne	.+24     	; 0x14a <InitDev+0x5e>
					{
						case 1:  TCCR2B = (1<<WGM20)|(1<<CS22)|(1<<CS20); break;			// делитель 1:128 (ШИМ порядка 120Гц)
     132:	85 e0       	ldi	r24, 0x05	; 5
     134:	80 93 b1 00 	sts	0x00B1, r24
     138:	0b c0       	rjmp	.+22     	; 0x150 <InitDev+0x64>
						case 2:  TCCR2B = (1<<WGM20)|(1<<CS22)|(0<<CS21); break;			// делитель 1:64  (ШИМ порядка 240Гц)
     13a:	85 e0       	ldi	r24, 0x05	; 5
     13c:	80 93 b1 00 	sts	0x00B1, r24
     140:	07 c0       	rjmp	.+14     	; 0x150 <InitDev+0x64>
						case 3:  TCCR2B = (1<<WGM20)|(1<<CS21)|(1<<CS20); break;			// делитель 1:32  (ШИМ порядка 480Гц)
     142:	83 e0       	ldi	r24, 0x03	; 3
     144:	80 93 b1 00 	sts	0x00B1, r24
     148:	03 c0       	rjmp	.+6      	; 0x150 <InitDev+0x64>
						default: TCCR2B = (1<<WGM20)|(1<<CS22)|(1<<CS21); break;			// делитель 1:256 (ШИМ порядка 60Гц)
     14a:	87 e0       	ldi	r24, 0x07	; 7
     14c:	80 93 b1 00 	sts	0x00B1, r24
					}
			TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);	// Разрешаю прерывания по совпадению А,В и переполнению таймера 2
     150:	87 e0       	ldi	r24, 0x07	; 7
     152:	80 93 70 00 	sts	0x0070, r24
		OCR2A = 0x00;	// Изначально пусть будет 0
     156:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = 0x00;	// Изначально пусть будет 0
     15a:	10 92 b4 00 	sts	0x00B4, r1
		}
	// --- настраиваю работу SPI для индикации ---
	SPCR0 = ( 1 << SPE0 ) | ( 1 << MSTR0 ); // разрешаем SPI, Master, режим 0, частота 1/4 от F_CPU, LSB first
     15e:	80 e5       	ldi	r24, 0x50	; 80
     160:	8c bd       	out	0x2c, r24	; 44
	SPSR0 = ( 1 << SPI2X0 ); //удвоение частоты SPI
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	8d bd       	out	0x2d, r24	; 45
     166:	08 95       	ret

00000168 <LED_Update>:
 Передача данных на SPI для индикации - обновление индикации
 ******************************************************************************/
 void LED_Update(void)
 {
 char b; // Рабочая переменная
 PORTB &= (~(0x01 << 0x04));	// Начинаем загрузку (вывод SS установить в 0)
     168:	2c 98       	cbi	0x05, 4	; 5
 b = (char)(MB_Ireg[27] >> 8);
     16a:	80 91 3e 02 	lds	r24, 0x023E
 SPDR0 = b;
     16e:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR0&(1<<SPIF0)));	// Ждем пока завершиться передача
     170:	0d b4       	in	r0, 0x2d	; 45
     172:	07 fe       	sbrs	r0, 7
     174:	fd cf       	rjmp	.-6      	; 0x170 <LED_Update+0x8>
 b = (char)(MB_Ireg[27]);
     176:	80 91 3d 02 	lds	r24, 0x023D
 SPDR0 = b;
     17a:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR0&(1<<SPIF0)));	// Ждем пока завершиться передача
     17c:	0d b4       	in	r0, 0x2d	; 45
     17e:	07 fe       	sbrs	r0, 7
     180:	fd cf       	rjmp	.-6      	; 0x17c <LED_Update+0x14>
 PORTB |= (0x01 << 0x04);		// Выводим данные (вывод SS установить в 1)
     182:	2c 9a       	sbi	0x05, 4	; 5
     184:	08 95       	ret

00000186 <IND_Update>:
 }
 /*****************************************************************************
 *	Обновление состояния регистра индикации
 ******************************************************************************/
 void IND_Update(void)
{
     186:	8f e0       	ldi	r24, 0x0F	; 15
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	af e0       	ldi	r26, 0x0F	; 15
     18c:	b0 e0       	ldi	r27, 0x00	; 0
char i;
 for(i=0; i<8; i++) // Записываю состояния входов в рег. индикации
 {
	 if((PINA & (1<<i)) == 0) MB_Ireg[27] &= ~(1<<(15-i));	// установить бит в 0
	 else MB_Ireg[27] |= (1<<(15-i));						// установить бит в 1
     18e:	ed e3       	ldi	r30, 0x3D	; 61
     190:	f2 e0       	ldi	r31, 0x02	; 2
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	70 e0       	ldi	r23, 0x00	; 0
 void IND_Update(void)
{
char i;
 for(i=0; i<8; i++) // Записываю состояния входов в рег. индикации
 {
	 if((PINA & (1<<i)) == 0) MB_Ireg[27] &= ~(1<<(15-i));	// установить бит в 0
     196:	20 b1       	in	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	ad 01       	movw	r20, r26
     19c:	48 1b       	sub	r20, r24
     19e:	59 0b       	sbc	r21, r25
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <IND_Update+0x20>
     1a2:	35 95       	asr	r19
     1a4:	27 95       	ror	r18
     1a6:	4a 95       	dec	r20
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <IND_Update+0x1c>
     1aa:	20 fd       	sbrc	r18, 0
     1ac:	10 c0       	rjmp	.+32     	; 0x1ce <IND_Update+0x48>
     1ae:	9b 01       	movw	r18, r22
     1b0:	08 2e       	mov	r0, r24
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <IND_Update+0x32>
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	0a 94       	dec	r0
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <IND_Update+0x2e>
     1bc:	20 95       	com	r18
     1be:	30 95       	com	r19
     1c0:	40 81       	ld	r20, Z
     1c2:	51 81       	ldd	r21, Z+1	; 0x01
     1c4:	24 23       	and	r18, r20
     1c6:	35 23       	and	r19, r21
     1c8:	31 83       	std	Z+1, r19	; 0x01
     1ca:	20 83       	st	Z, r18
     1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <IND_Update+0x62>
	 else MB_Ireg[27] |= (1<<(15-i));						// установить бит в 1
     1ce:	20 81       	ld	r18, Z
     1d0:	31 81       	ldd	r19, Z+1	; 0x01
     1d2:	ab 01       	movw	r20, r22
     1d4:	08 2e       	mov	r0, r24
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <IND_Update+0x56>
     1d8:	44 0f       	add	r20, r20
     1da:	55 1f       	adc	r21, r21
     1dc:	0a 94       	dec	r0
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <IND_Update+0x52>
     1e0:	24 2b       	or	r18, r20
     1e2:	35 2b       	or	r19, r21
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
     1e8:	01 97       	sbiw	r24, 0x01	; 1
 *	Обновление состояния регистра индикации
 ******************************************************************************/
 void IND_Update(void)
{
char i;
 for(i=0; i<8; i++) // Записываю состояния входов в рег. индикации
     1ea:	87 30       	cpi	r24, 0x07	; 7
     1ec:	91 05       	cpc	r25, r1
     1ee:	99 f6       	brne	.-90     	; 0x196 <IND_Update+0x10>
 {
	 if((PINA & (1<<i)) == 0) MB_Ireg[27] &= ~(1<<(15-i));	// установить бит в 0
	 else MB_Ireg[27] |= (1<<(15-i));						// установить бит в 1
 }
 if ((PINB & 0x01) == 0) MB_Ireg[27] |= (0x40);				// установить в 1, Состояние питания входов (инверсно)
     1f0:	18 99       	sbic	0x03, 0	; 3
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <IND_Update+0x7e>
     1f4:	ed e3       	ldi	r30, 0x3D	; 61
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	80 64       	ori	r24, 0x40	; 64
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	dc c0       	rjmp	.+440    	; 0x3bc <IND_Update+0x236>
 else MB_Ireg[27] &= ~(0x40);								// Установить в 0
     204:	ed e3       	ldi	r30, 0x3D	; 61
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	80 81       	ld	r24, Z
     20a:	91 81       	ldd	r25, Z+1	; 0x01
     20c:	8f 7b       	andi	r24, 0xBF	; 191
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
     212:	d4 c0       	rjmp	.+424    	; 0x3bc <IND_Update+0x236>
 for(i=0; i<4; i++)											// Записываю состояния выходов в рег. индикации
   {														// для релейных выходов DO1,DO2,DO3,DO4
	if((PINC & (1<<(2+i))) == 0) MB_Ireg[27] &= ~(1<<(2+i));	// установить бит в 0
     214:	26 b1       	in	r18, 0x06	; 6
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	08 2e       	mov	r0, r24
     21a:	02 c0       	rjmp	.+4      	; 0x220 <IND_Update+0x9a>
     21c:	35 95       	asr	r19
     21e:	27 95       	ror	r18
     220:	0a 94       	dec	r0
     222:	e2 f7       	brpl	.-8      	; 0x21c <IND_Update+0x96>
     224:	20 fd       	sbrc	r18, 0
     226:	10 c0       	rjmp	.+32     	; 0x248 <IND_Update+0xc2>
     228:	9a 01       	movw	r18, r20
     22a:	08 2e       	mov	r0, r24
     22c:	02 c0       	rjmp	.+4      	; 0x232 <IND_Update+0xac>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	0a 94       	dec	r0
     234:	e2 f7       	brpl	.-8      	; 0x22e <IND_Update+0xa8>
     236:	20 95       	com	r18
     238:	30 95       	com	r19
     23a:	60 81       	ld	r22, Z
     23c:	71 81       	ldd	r23, Z+1	; 0x01
     23e:	26 23       	and	r18, r22
     240:	37 23       	and	r19, r23
     242:	31 83       	std	Z+1, r19	; 0x01
     244:	20 83       	st	Z, r18
     246:	0d c0       	rjmp	.+26     	; 0x262 <IND_Update+0xdc>
	else MB_Ireg[27] |= (1<<(2+i));								// установить бит в 1
     248:	20 81       	ld	r18, Z
     24a:	31 81       	ldd	r19, Z+1	; 0x01
     24c:	ba 01       	movw	r22, r20
     24e:	08 2e       	mov	r0, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <IND_Update+0xd0>
     252:	66 0f       	add	r22, r22
     254:	77 1f       	adc	r23, r23
     256:	0a 94       	dec	r0
     258:	e2 f7       	brpl	.-8      	; 0x252 <IND_Update+0xcc>
     25a:	26 2b       	or	r18, r22
     25c:	37 2b       	or	r19, r23
     25e:	31 83       	std	Z+1, r19	; 0x01
     260:	20 83       	st	Z, r18
     262:	01 96       	adiw	r24, 0x01	; 1
	 if((PINA & (1<<i)) == 0) MB_Ireg[27] &= ~(1<<(15-i));	// установить бит в 0
	 else MB_Ireg[27] |= (1<<(15-i));						// установить бит в 1
 }
 if ((PINB & 0x01) == 0) MB_Ireg[27] |= (0x40);				// установить в 1, Состояние питания входов (инверсно)
 else MB_Ireg[27] &= ~(0x40);								// Установить в 0
 for(i=0; i<4; i++)											// Записываю состояния выходов в рег. индикации
     264:	86 30       	cpi	r24, 0x06	; 6
     266:	91 05       	cpc	r25, r1
     268:	a9 f6       	brne	.-86     	; 0x214 <IND_Update+0x8e>
   {														// для релейных выходов DO1,DO2,DO3,DO4
	if((PINC & (1<<(2+i))) == 0) MB_Ireg[27] &= ~(1<<(2+i));	// установить бит в 0
	else MB_Ireg[27] |= (1<<(2+i));								// установить бит в 1
   }
  // ========= для выходов индикации работающих по ШИМ ===========
  i = MB_Hreg[34] & 0x03; // Получаю состояние работы ШИМ выводов
     26a:	80 91 7d 05 	lds	r24, 0x057D
     26e:	83 70       	andi	r24, 0x03	; 3
  switch (i)
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	69 f1       	breq	.+90     	; 0x2ce <IND_Update+0x148>
     274:	83 30       	cpi	r24, 0x03	; 3
     276:	09 f4       	brne	.+2      	; 0x27a <IND_Update+0xf4>
     278:	51 c0       	rjmp	.+162    	; 0x31c <IND_Update+0x196>
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	09 f0       	breq	.+2      	; 0x280 <IND_Update+0xfa>
     27e:	79 c0       	rjmp	.+242    	; 0x372 <IND_Update+0x1ec>
  {
	  case 1:		// DO5 - в режиме ШИМ
			if(MB_Hreg[8] > 0) MB_Ireg[27] |= 0x02;			// установить бит в 1 для DO5
     280:	80 91 49 05 	lds	r24, 0x0549
     284:	90 91 4a 05 	lds	r25, 0x054A
     288:	89 2b       	or	r24, r25
     28a:	41 f0       	breq	.+16     	; 0x29c <IND_Update+0x116>
     28c:	ed e3       	ldi	r30, 0x3D	; 61
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	80 81       	ld	r24, Z
     292:	91 81       	ldd	r25, Z+1	; 0x01
     294:	82 60       	ori	r24, 0x02	; 2
     296:	91 83       	std	Z+1, r25	; 0x01
     298:	80 83       	st	Z, r24
     29a:	07 c0       	rjmp	.+14     	; 0x2aa <IND_Update+0x124>
			else MB_Ireg[27] &= ~(0x02);					// установить бит в 0 для DO5
     29c:	ed e3       	ldi	r30, 0x3D	; 61
     29e:	f2 e0       	ldi	r31, 0x02	; 2
     2a0:	80 81       	ld	r24, Z
     2a2:	91 81       	ldd	r25, Z+1	; 0x01
     2a4:	8d 7f       	andi	r24, 0xFD	; 253
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
			if((PINC & 0x01) == 0) MB_Ireg[27] &= ~(0x01);	// установить бит в 0 для DO6
     2aa:	30 99       	sbic	0x06, 0	; 6
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <IND_Update+0x138>
     2ae:	ed e3       	ldi	r30, 0x3D	; 61
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	80 81       	ld	r24, Z
     2b4:	91 81       	ldd	r25, Z+1	; 0x01
     2b6:	8e 7f       	andi	r24, 0xFE	; 254
     2b8:	91 83       	std	Z+1, r25	; 0x01
     2ba:	80 83       	st	Z, r24
     2bc:	7c c0       	rjmp	.+248    	; 0x3b6 <IND_Update+0x230>
			else MB_Ireg[27] |= (0x01);						// установить бит в 1 для DO6
     2be:	ed e3       	ldi	r30, 0x3D	; 61
     2c0:	f2 e0       	ldi	r31, 0x02	; 2
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	81 60       	ori	r24, 0x01	; 1
     2c8:	91 83       	std	Z+1, r25	; 0x01
     2ca:	80 83       	st	Z, r24
     2cc:	74 c0       	rjmp	.+232    	; 0x3b6 <IND_Update+0x230>
	  break;
	  case 2:		// DO6 - в режиме ШИМ
			if(MB_Hreg[9] > 0) MB_Ireg[27] |= 0x01;			// установить бит в 1 для DO6
     2ce:	80 91 4b 05 	lds	r24, 0x054B
     2d2:	90 91 4c 05 	lds	r25, 0x054C
     2d6:	89 2b       	or	r24, r25
     2d8:	41 f0       	breq	.+16     	; 0x2ea <IND_Update+0x164>
     2da:	ed e3       	ldi	r30, 0x3D	; 61
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
     2de:	80 81       	ld	r24, Z
     2e0:	91 81       	ldd	r25, Z+1	; 0x01
     2e2:	81 60       	ori	r24, 0x01	; 1
     2e4:	91 83       	std	Z+1, r25	; 0x01
     2e6:	80 83       	st	Z, r24
     2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <IND_Update+0x172>
			else MB_Ireg[27] &= ~(0x01);					// установить бит в 0 для DO6
     2ea:	ed e3       	ldi	r30, 0x3D	; 61
     2ec:	f2 e0       	ldi	r31, 0x02	; 2
     2ee:	80 81       	ld	r24, Z
     2f0:	91 81       	ldd	r25, Z+1	; 0x01
     2f2:	8e 7f       	andi	r24, 0xFE	; 254
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	80 83       	st	Z, r24
			if((PINC & 0x02) == 0) MB_Ireg[27] &= ~(0x02);	// установить бит в 0 для DO5
     2f8:	31 99       	sbic	0x06, 1	; 6
     2fa:	08 c0       	rjmp	.+16     	; 0x30c <IND_Update+0x186>
     2fc:	ed e3       	ldi	r30, 0x3D	; 61
     2fe:	f2 e0       	ldi	r31, 0x02	; 2
     300:	80 81       	ld	r24, Z
     302:	91 81       	ldd	r25, Z+1	; 0x01
     304:	8d 7f       	andi	r24, 0xFD	; 253
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	55 c0       	rjmp	.+170    	; 0x3b6 <IND_Update+0x230>
			else MB_Ireg[27] |= (0x02);						// установить бит в 1 для DO5
     30c:	ed e3       	ldi	r30, 0x3D	; 61
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	80 81       	ld	r24, Z
     312:	91 81       	ldd	r25, Z+1	; 0x01
     314:	82 60       	ori	r24, 0x02	; 2
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	80 83       	st	Z, r24
     31a:	4d c0       	rjmp	.+154    	; 0x3b6 <IND_Update+0x230>
	  break;
	  case 3:		// DO5 и DO6 - в режиме ШИМ
			if(MB_Hreg[8] > 0) MB_Ireg[27] |= 0x02;			// установить бит в 1 для DO5
     31c:	80 91 49 05 	lds	r24, 0x0549
     320:	90 91 4a 05 	lds	r25, 0x054A
     324:	89 2b       	or	r24, r25
     326:	41 f0       	breq	.+16     	; 0x338 <IND_Update+0x1b2>
     328:	ed e3       	ldi	r30, 0x3D	; 61
     32a:	f2 e0       	ldi	r31, 0x02	; 2
     32c:	80 81       	ld	r24, Z
     32e:	91 81       	ldd	r25, Z+1	; 0x01
     330:	82 60       	ori	r24, 0x02	; 2
     332:	91 83       	std	Z+1, r25	; 0x01
     334:	80 83       	st	Z, r24
     336:	07 c0       	rjmp	.+14     	; 0x346 <IND_Update+0x1c0>
			else MB_Ireg[27] &= ~(0x02);					// установить бит в 0 для DO5
     338:	ed e3       	ldi	r30, 0x3D	; 61
     33a:	f2 e0       	ldi	r31, 0x02	; 2
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	8d 7f       	andi	r24, 0xFD	; 253
     342:	91 83       	std	Z+1, r25	; 0x01
     344:	80 83       	st	Z, r24
			if(MB_Hreg[9] > 0) MB_Ireg[27] |= 0x01;			// установить бит в 1 для DO6
     346:	80 91 4b 05 	lds	r24, 0x054B
     34a:	90 91 4c 05 	lds	r25, 0x054C
     34e:	89 2b       	or	r24, r25
     350:	41 f0       	breq	.+16     	; 0x362 <IND_Update+0x1dc>
     352:	ed e3       	ldi	r30, 0x3D	; 61
     354:	f2 e0       	ldi	r31, 0x02	; 2
     356:	80 81       	ld	r24, Z
     358:	91 81       	ldd	r25, Z+1	; 0x01
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	91 83       	std	Z+1, r25	; 0x01
     35e:	80 83       	st	Z, r24
     360:	2a c0       	rjmp	.+84     	; 0x3b6 <IND_Update+0x230>
			else MB_Ireg[27] &= ~(0x01);					// установить бит в 0 для DO6
     362:	ed e3       	ldi	r30, 0x3D	; 61
     364:	f2 e0       	ldi	r31, 0x02	; 2
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	8e 7f       	andi	r24, 0xFE	; 254
     36c:	91 83       	std	Z+1, r25	; 0x01
     36e:	80 83       	st	Z, r24
     370:	22 c0       	rjmp	.+68     	; 0x3b6 <IND_Update+0x230>
	  break;
	  default:		// нет режима ШИМ
			if((PINC & 0x02) == 0) MB_Ireg[27] &= ~(0x02);	// установить бит в 0 для DO5
     372:	31 99       	sbic	0x06, 1	; 6
     374:	08 c0       	rjmp	.+16     	; 0x386 <IND_Update+0x200>
     376:	ed e3       	ldi	r30, 0x3D	; 61
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	8d 7f       	andi	r24, 0xFD	; 253
     380:	91 83       	std	Z+1, r25	; 0x01
     382:	80 83       	st	Z, r24
     384:	07 c0       	rjmp	.+14     	; 0x394 <IND_Update+0x20e>
			else MB_Ireg[27] |= (0x02);						// установить бит в 1 для DO5
     386:	ed e3       	ldi	r30, 0x3D	; 61
     388:	f2 e0       	ldi	r31, 0x02	; 2
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	82 60       	ori	r24, 0x02	; 2
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
			if((PINC & 0x01) == 0) MB_Ireg[27] &= ~(0x01);	// установить бит в 0 для DO6
     394:	30 99       	sbic	0x06, 0	; 6
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <IND_Update+0x222>
     398:	ed e3       	ldi	r30, 0x3D	; 61
     39a:	f2 e0       	ldi	r31, 0x02	; 2
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	8e 7f       	andi	r24, 0xFE	; 254
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	80 83       	st	Z, r24
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <IND_Update+0x230>
			else MB_Ireg[27] |= (0x01);						// установить бит в 1 для DO6
     3a8:	ed e3       	ldi	r30, 0x3D	; 61
     3aa:	f2 e0       	ldi	r31, 0x02	; 2
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	91 83       	std	Z+1, r25	; 0x01
     3b4:	80 83       	st	Z, r24
	  break;
  } 
 LED_Update(); // Обновляем индикацию
     3b6:	0e 94 b4 00 	call	0x168	; 0x168 <LED_Update>
     3ba:	08 95       	ret
 }
 /*****************************************************************************
 *	Обновление состояния регистра индикации
 ******************************************************************************/
 void IND_Update(void)
{
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	90 e0       	ldi	r25, 0x00	; 0
 if ((PINB & 0x01) == 0) MB_Ireg[27] |= (0x40);				// установить в 1, Состояние питания входов (инверсно)
 else MB_Ireg[27] &= ~(0x40);								// Установить в 0
 for(i=0; i<4; i++)											// Записываю состояния выходов в рег. индикации
   {														// для релейных выходов DO1,DO2,DO3,DO4
	if((PINC & (1<<(2+i))) == 0) MB_Ireg[27] &= ~(1<<(2+i));	// установить бит в 0
	else MB_Ireg[27] |= (1<<(2+i));								// установить бит в 1
     3c0:	ed e3       	ldi	r30, 0x3D	; 61
     3c2:	f2 e0       	ldi	r31, 0x02	; 2
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	25 cf       	rjmp	.-438    	; 0x214 <IND_Update+0x8e>

000003ca <InState>:
// считывает состояние только одной линии входа
//=================================================================================================================================
char InState(unsigned char port_line)
{
//------------------------ Для контроллера КМ8600 ---------------------------------
	if(port_line < maxAddr_DI) {return ((MB_Ireg[1] >> port_line) & 0x01);}	// Чтение состояния входов и возврат с полученным значением
     3ca:	80 31       	cpi	r24, 0x10	; 16
     3cc:	68 f4       	brcc	.+26     	; 0x3e8 <InState+0x1e>
     3ce:	20 91 09 02 	lds	r18, 0x0209
     3d2:	30 91 0a 02 	lds	r19, 0x020A
     3d6:	a9 01       	movw	r20, r18
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <InState+0x14>
     3da:	56 95       	lsr	r21
     3dc:	47 95       	ror	r20
     3de:	8a 95       	dec	r24
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <InState+0x10>
     3e2:	ca 01       	movw	r24, r20
     3e4:	81 70       	andi	r24, 0x01	; 1
     3e6:	08 95       	ret
	else return 0xFF;															// вернуться с ошибкой
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
}
     3ea:	08 95       	ret

000003ec <OutState>:
// считывает состояние только одной линии входа
//=========================================================================================
char OutState(unsigned char port_line)
{
//------------------------ Для контроллера КМ8600 ---------------------------------
	if(port_line < maxAddr_DO) {return ((MB_Ireg[2] >> port_line) & 0x01);}	// Чтение состояния выходов и возврат с полученным значением
     3ec:	80 31       	cpi	r24, 0x10	; 16
     3ee:	68 f4       	brcc	.+26     	; 0x40a <OutState+0x1e>
     3f0:	20 91 0b 02 	lds	r18, 0x020B
     3f4:	30 91 0c 02 	lds	r19, 0x020C
     3f8:	a9 01       	movw	r20, r18
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <OutState+0x14>
     3fc:	56 95       	lsr	r21
     3fe:	47 95       	ror	r20
     400:	8a 95       	dec	r24
     402:	e2 f7       	brpl	.-8      	; 0x3fc <OutState+0x10>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	08 95       	ret
	else return 0xFF;														// вернуться с ошибкой	
     40a:	8f ef       	ldi	r24, 0xFF	; 255
}
     40c:	08 95       	ret

0000040e <OutControl>:
//=========================================================================================

char OutControl(char port_line, char level)
{
//------------------- Для контроллера КМ8600 --------------------
	if ((port_line >= maxAddr_DO) || (level > 1) ) return 0xFF;	//Если указана не существующая линия порта или не верный уровень сигнала, выход с ошибкой
     40e:	80 31       	cpi	r24, 0x10	; 16
     410:	60 f5       	brcc	.+88     	; 0x46a <OutControl+0x5c>
     412:	62 30       	cpi	r22, 0x02	; 2
     414:	60 f5       	brcc	.+88     	; 0x46e <OutControl+0x60>
	if (level!=0x00) {MB_Hreg[5] |= (0x01 << port_line);	return 0x01;} //Установка состояния линии в 1
     416:	66 23       	and	r22, r22
     418:	99 f0       	breq	.+38     	; 0x440 <OutControl+0x32>
     41a:	e3 e4       	ldi	r30, 0x43	; 67
     41c:	f5 e0       	ldi	r31, 0x05	; 5
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	a9 01       	movw	r20, r18
     424:	02 c0       	rjmp	.+4      	; 0x42a <OutControl+0x1c>
     426:	44 0f       	add	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	8a 95       	dec	r24
     42c:	e2 f7       	brpl	.-8      	; 0x426 <OutControl+0x18>
     42e:	ca 01       	movw	r24, r20
     430:	20 81       	ld	r18, Z
     432:	31 81       	ldd	r19, Z+1	; 0x01
     434:	82 2b       	or	r24, r18
     436:	93 2b       	or	r25, r19
     438:	91 83       	std	Z+1, r25	; 0x01
     43a:	80 83       	st	Z, r24
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	08 95       	ret
	else { MB_Hreg[5] &= ~(0x01 << port_line);}			//Установка состояния линии в 0
     440:	e3 e4       	ldi	r30, 0x43	; 67
     442:	f5 e0       	ldi	r31, 0x05	; 5
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	a9 01       	movw	r20, r18
     44a:	02 c0       	rjmp	.+4      	; 0x450 <OutControl+0x42>
     44c:	44 0f       	add	r20, r20
     44e:	55 1f       	adc	r21, r21
     450:	8a 95       	dec	r24
     452:	e2 f7       	brpl	.-8      	; 0x44c <OutControl+0x3e>
     454:	ca 01       	movw	r24, r20
     456:	80 95       	com	r24
     458:	90 95       	com	r25
     45a:	20 81       	ld	r18, Z
     45c:	31 81       	ldd	r19, Z+1	; 0x01
     45e:	82 23       	and	r24, r18
     460:	93 23       	and	r25, r19
     462:	91 83       	std	Z+1, r25	; 0x01
     464:	80 83       	st	Z, r24
	return 0;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	08 95       	ret
//=========================================================================================

char OutControl(char port_line, char level)
{
//------------------- Для контроллера КМ8600 --------------------
	if ((port_line >= maxAddr_DO) || (level > 1) ) return 0xFF;	//Если указана не существующая линия порта или не верный уровень сигнала, выход с ошибкой
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	08 95       	ret
     46e:	8f ef       	ldi	r24, 0xFF	; 255
	if (level!=0x00) {MB_Hreg[5] |= (0x01 << port_line);	return 0x01;} //Установка состояния линии в 1
	else { MB_Hreg[5] &= ~(0x01 << port_line);}			//Установка состояния линии в 0
	return 0;
}
     470:	08 95       	ret

00000472 <INP_Read>:

//=========================================================== КОНТРОЛЬ СОСТОЯНИЯ ДИСКРЕТНЫХ ЛИНИЙ ВВОДА ==================================================
//========================================================================================================================================================
// --- Чтение состояния входов (надо при старте, т.к. дальнейшие изменения состояния работают по прерыванию) ---
void INP_Read(void)
{
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
	for(char i=0;i<8;i++) // считывает состояние 3 бит
	{
		if((PINA & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<i);// установить бит в 0
		else MB_Ireg[1] |= (1<<i);						// установить бит в 1
     476:	e9 e0       	ldi	r30, 0x09	; 9
     478:	f2 e0       	ldi	r31, 0x02	; 2
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	50 e0       	ldi	r21, 0x00	; 0
// --- Чтение состояния входов (надо при старте, т.к. дальнейшие изменения состояния работают по прерыванию) ---
void INP_Read(void)
{
	for(char i=0;i<8;i++) // считывает состояние 3 бит
	{
		if((PINA & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<i);// установить бит в 0
     47e:	20 b1       	in	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	08 2e       	mov	r0, r24
     484:	02 c0       	rjmp	.+4      	; 0x48a <INP_Read+0x18>
     486:	35 95       	asr	r19
     488:	27 95       	ror	r18
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <INP_Read+0x14>
     48e:	20 fd       	sbrc	r18, 0
     490:	10 c0       	rjmp	.+32     	; 0x4b2 <INP_Read+0x40>
     492:	9a 01       	movw	r18, r20
     494:	08 2e       	mov	r0, r24
     496:	02 c0       	rjmp	.+4      	; 0x49c <INP_Read+0x2a>
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	0a 94       	dec	r0
     49e:	e2 f7       	brpl	.-8      	; 0x498 <INP_Read+0x26>
     4a0:	20 95       	com	r18
     4a2:	30 95       	com	r19
     4a4:	60 81       	ld	r22, Z
     4a6:	71 81       	ldd	r23, Z+1	; 0x01
     4a8:	26 23       	and	r18, r22
     4aa:	37 23       	and	r19, r23
     4ac:	31 83       	std	Z+1, r19	; 0x01
     4ae:	20 83       	st	Z, r18
     4b0:	0d c0       	rjmp	.+26     	; 0x4cc <INP_Read+0x5a>
		else MB_Ireg[1] |= (1<<i);						// установить бит в 1
     4b2:	20 81       	ld	r18, Z
     4b4:	31 81       	ldd	r19, Z+1	; 0x01
     4b6:	ba 01       	movw	r22, r20
     4b8:	08 2e       	mov	r0, r24
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <INP_Read+0x4e>
     4bc:	66 0f       	add	r22, r22
     4be:	77 1f       	adc	r23, r23
     4c0:	0a 94       	dec	r0
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <INP_Read+0x4a>
     4c4:	26 2b       	or	r18, r22
     4c6:	37 2b       	or	r19, r23
     4c8:	31 83       	std	Z+1, r19	; 0x01
     4ca:	20 83       	st	Z, r18
     4cc:	01 96       	adiw	r24, 0x01	; 1
//=========================================================== КОНТРОЛЬ СОСТОЯНИЯ ДИСКРЕТНЫХ ЛИНИЙ ВВОДА ==================================================
//========================================================================================================================================================
// --- Чтение состояния входов (надо при старте, т.к. дальнейшие изменения состояния работают по прерыванию) ---
void INP_Read(void)
{
	for(char i=0;i<8;i++) // считывает состояние 3 бит
     4ce:	88 30       	cpi	r24, 0x08	; 8
     4d0:	91 05       	cpc	r25, r1
     4d2:	a9 f6       	brne	.-86     	; 0x47e <INP_Read+0xc>
	{
		if((PINA & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<i);// установить бит в 0
		else MB_Ireg[1] |= (1<<i);						// установить бит в 1
	}
}
     4d4:	08 95       	ret

000004d6 <__vector_4>:
 /******************************************************************************
 * Обработка прерывания по изменению состояния входов DI1,DI2,DI3,DI4,DI5,DI6,DI7
 ******************************************************************************/
 ISR(PCINT0_vect)
{ // пишем состояние всего регистра PINA в регистр Input
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
char i;
	for(i=0;i<8;i++) // считывает состояние 8 бит
		{
		if((PINA & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<i);// установить бит в 0
		else MB_Ireg[1] |= (1<<i);						// установить бит в 1
     4fc:	e9 e0       	ldi	r30, 0x09	; 9
     4fe:	f2 e0       	ldi	r31, 0x02	; 2
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	50 e0       	ldi	r21, 0x00	; 0
 ISR(PCINT0_vect)
{ // пишем состояние всего регистра PINA в регистр Input
char i;
	for(i=0;i<8;i++) // считывает состояние 8 бит
		{
		if((PINA & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<i);// установить бит в 0
     504:	20 b1       	in	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	08 2e       	mov	r0, r24
     50a:	02 c0       	rjmp	.+4      	; 0x510 <__vector_4+0x3a>
     50c:	35 95       	asr	r19
     50e:	27 95       	ror	r18
     510:	0a 94       	dec	r0
     512:	e2 f7       	brpl	.-8      	; 0x50c <__vector_4+0x36>
     514:	20 fd       	sbrc	r18, 0
     516:	10 c0       	rjmp	.+32     	; 0x538 <__vector_4+0x62>
     518:	9a 01       	movw	r18, r20
     51a:	08 2e       	mov	r0, r24
     51c:	02 c0       	rjmp	.+4      	; 0x522 <__vector_4+0x4c>
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
     522:	0a 94       	dec	r0
     524:	e2 f7       	brpl	.-8      	; 0x51e <__vector_4+0x48>
     526:	20 95       	com	r18
     528:	30 95       	com	r19
     52a:	60 81       	ld	r22, Z
     52c:	71 81       	ldd	r23, Z+1	; 0x01
     52e:	26 23       	and	r18, r22
     530:	37 23       	and	r19, r23
     532:	31 83       	std	Z+1, r19	; 0x01
     534:	20 83       	st	Z, r18
     536:	0d c0       	rjmp	.+26     	; 0x552 <__vector_4+0x7c>
		else MB_Ireg[1] |= (1<<i);						// установить бит в 1
     538:	20 81       	ld	r18, Z
     53a:	31 81       	ldd	r19, Z+1	; 0x01
     53c:	ba 01       	movw	r22, r20
     53e:	08 2e       	mov	r0, r24
     540:	02 c0       	rjmp	.+4      	; 0x546 <__vector_4+0x70>
     542:	66 0f       	add	r22, r22
     544:	77 1f       	adc	r23, r23
     546:	0a 94       	dec	r0
     548:	e2 f7       	brpl	.-8      	; 0x542 <__vector_4+0x6c>
     54a:	26 2b       	or	r18, r22
     54c:	37 2b       	or	r19, r23
     54e:	31 83       	std	Z+1, r19	; 0x01
     550:	20 83       	st	Z, r18
     552:	01 96       	adiw	r24, 0x01	; 1
 * Обработка прерывания по изменению состояния входов DI1,DI2,DI3,DI4,DI5,DI6,DI7
 ******************************************************************************/
 ISR(PCINT0_vect)
{ // пишем состояние всего регистра PINA в регистр Input
char i;
	for(i=0;i<8;i++) // считывает состояние 8 бит
     554:	88 30       	cpi	r24, 0x08	; 8
     556:	91 05       	cpc	r25, r1
     558:	a9 f6       	brne	.-86     	; 0x504 <__vector_4+0x2e>
		if((PINA & (1<<i)) == 0) MB_Ireg[1] &= ~(1<<i);// установить бит в 0
		else MB_Ireg[1] |= (1<<i);						// установить бит в 1
		}
// Проверяем работу счетных входов!
// =========== если задана работа счетного входа №1 ============================
if((MB_Hreg[35] & 0x01) != 0)
     55a:	20 91 7f 05 	lds	r18, 0x057F
     55e:	20 ff       	sbrs	r18, 0
     560:	30 c0       	rjmp	.+96     	; 0x5c2 <__vector_4+0xec>
{
	if(((PINA & 0x01) != 0) & ((count.stat & 0x01) == 0)) // если на входе 1, а был 0
     562:	80 b1       	in	r24, 0x00	; 0
     564:	30 91 08 04 	lds	r19, 0x0408
     568:	30 fd       	sbrc	r19, 0
     56a:	24 c0       	rjmp	.+72     	; 0x5b4 <__vector_4+0xde>
     56c:	80 ff       	sbrs	r24, 0
     56e:	22 c0       	rjmp	.+68     	; 0x5b4 <__vector_4+0xde>
	{
		count.pre_cnt1++;			// увеличить предделитель на 1
     570:	e9 e0       	ldi	r30, 0x09	; 9
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	80 81       	ld	r24, Z
     576:	91 81       	ldd	r25, Z+1	; 0x01
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	91 83       	std	Z+1, r25	; 0x01
     57c:	80 83       	st	Z, r24
		count.stat |= 0x01;		// защита от повторного входа
     57e:	31 60       	ori	r19, 0x01	; 1
     580:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt1 >= MB_Hreg[36]) {count.pre_cnt1 = 0; count.cnt1++;} // собственно счет
     584:	40 91 81 05 	lds	r20, 0x0581
     588:	50 91 82 05 	lds	r21, 0x0582
     58c:	84 17       	cp	r24, r20
     58e:	95 07       	cpc	r25, r21
     590:	88 f0       	brcs	.+34     	; 0x5b4 <__vector_4+0xde>
     592:	10 92 0a 04 	sts	0x040A, r1
     596:	10 92 09 04 	sts	0x0409, r1
     59a:	eb e0       	ldi	r30, 0x0B	; 11
     59c:	f4 e0       	ldi	r31, 0x04	; 4
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	a2 81       	ldd	r26, Z+2	; 0x02
     5a4:	b3 81       	ldd	r27, Z+3	; 0x03
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	a1 1d       	adc	r26, r1
     5aa:	b1 1d       	adc	r27, r1
     5ac:	80 83       	st	Z, r24
     5ae:	91 83       	std	Z+1, r25	; 0x01
     5b0:	a2 83       	std	Z+2, r26	; 0x02
     5b2:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x01) == 0) count.stat &= ~(0x01); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     5b4:	00 99       	sbic	0x00, 0	; 0
     5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__vector_4+0xec>
     5b8:	e8 e0       	ldi	r30, 0x08	; 8
     5ba:	f4 e0       	ldi	r31, 0x04	; 4
     5bc:	80 81       	ld	r24, Z
     5be:	8e 7f       	andi	r24, 0xFE	; 254
     5c0:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №2 =============================================
if((MB_Hreg[35] & 0x02) != 0)
     5c2:	21 ff       	sbrs	r18, 1
     5c4:	30 c0       	rjmp	.+96     	; 0x626 <__vector_4+0x150>
{
	if(((PINA & 0x02) != 0) & ((count.stat & 0x02) == 0)) // если на входе 1, а был 0
     5c6:	80 b1       	in	r24, 0x00	; 0
     5c8:	30 91 08 04 	lds	r19, 0x0408
     5cc:	31 fd       	sbrc	r19, 1
     5ce:	24 c0       	rjmp	.+72     	; 0x618 <__vector_4+0x142>
     5d0:	81 ff       	sbrs	r24, 1
     5d2:	22 c0       	rjmp	.+68     	; 0x618 <__vector_4+0x142>
	{
		count.pre_cnt2++;			// увеличить предделитель на 1
     5d4:	ef e0       	ldi	r30, 0x0F	; 15
     5d6:	f4 e0       	ldi	r31, 0x04	; 4
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	91 83       	std	Z+1, r25	; 0x01
     5e0:	80 83       	st	Z, r24
		count.stat |= 0x02;		// защита от повторного входа
     5e2:	32 60       	ori	r19, 0x02	; 2
     5e4:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt2 >= MB_Hreg[39]) {count.pre_cnt2 = 0; count.cnt2++;} // собственно счет
     5e8:	40 91 87 05 	lds	r20, 0x0587
     5ec:	50 91 88 05 	lds	r21, 0x0588
     5f0:	84 17       	cp	r24, r20
     5f2:	95 07       	cpc	r25, r21
     5f4:	88 f0       	brcs	.+34     	; 0x618 <__vector_4+0x142>
     5f6:	10 92 10 04 	sts	0x0410, r1
     5fa:	10 92 0f 04 	sts	0x040F, r1
     5fe:	e1 e1       	ldi	r30, 0x11	; 17
     600:	f4 e0       	ldi	r31, 0x04	; 4
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	a2 81       	ldd	r26, Z+2	; 0x02
     608:	b3 81       	ldd	r27, Z+3	; 0x03
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	a1 1d       	adc	r26, r1
     60e:	b1 1d       	adc	r27, r1
     610:	80 83       	st	Z, r24
     612:	91 83       	std	Z+1, r25	; 0x01
     614:	a2 83       	std	Z+2, r26	; 0x02
     616:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x02) == 0) count.stat &= ~(0x02); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     618:	01 99       	sbic	0x00, 1	; 0
     61a:	05 c0       	rjmp	.+10     	; 0x626 <__vector_4+0x150>
     61c:	e8 e0       	ldi	r30, 0x08	; 8
     61e:	f4 e0       	ldi	r31, 0x04	; 4
     620:	80 81       	ld	r24, Z
     622:	8d 7f       	andi	r24, 0xFD	; 253
     624:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №3 =============================================
if((MB_Hreg[35] & 0x04) != 0)
     626:	22 ff       	sbrs	r18, 2
     628:	30 c0       	rjmp	.+96     	; 0x68a <__vector_4+0x1b4>
{
	if(((PINA & 0x04) != 0) & ((count.stat & 0x04) == 0)) // если на входе 1, а был 0
     62a:	80 b1       	in	r24, 0x00	; 0
     62c:	30 91 08 04 	lds	r19, 0x0408
     630:	32 fd       	sbrc	r19, 2
     632:	24 c0       	rjmp	.+72     	; 0x67c <__vector_4+0x1a6>
     634:	82 ff       	sbrs	r24, 2
     636:	22 c0       	rjmp	.+68     	; 0x67c <__vector_4+0x1a6>
	{
		count.pre_cnt3++;			// увеличить предделитель на 1
     638:	e5 e1       	ldi	r30, 0x15	; 21
     63a:	f4 e0       	ldi	r31, 0x04	; 4
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	91 83       	std	Z+1, r25	; 0x01
     644:	80 83       	st	Z, r24
		count.stat |= 0x04;		// защита от повторного входа
     646:	34 60       	ori	r19, 0x04	; 4
     648:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt3 >= MB_Hreg[42]) {count.pre_cnt3 = 0; count.cnt3++;} // собственно счет
     64c:	40 91 8d 05 	lds	r20, 0x058D
     650:	50 91 8e 05 	lds	r21, 0x058E
     654:	84 17       	cp	r24, r20
     656:	95 07       	cpc	r25, r21
     658:	88 f0       	brcs	.+34     	; 0x67c <__vector_4+0x1a6>
     65a:	10 92 16 04 	sts	0x0416, r1
     65e:	10 92 15 04 	sts	0x0415, r1
     662:	e7 e1       	ldi	r30, 0x17	; 23
     664:	f4 e0       	ldi	r31, 0x04	; 4
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	a2 81       	ldd	r26, Z+2	; 0x02
     66c:	b3 81       	ldd	r27, Z+3	; 0x03
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	a1 1d       	adc	r26, r1
     672:	b1 1d       	adc	r27, r1
     674:	80 83       	st	Z, r24
     676:	91 83       	std	Z+1, r25	; 0x01
     678:	a2 83       	std	Z+2, r26	; 0x02
     67a:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x04) == 0) count.stat &= ~(0x04); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     67c:	02 99       	sbic	0x00, 2	; 0
     67e:	05 c0       	rjmp	.+10     	; 0x68a <__vector_4+0x1b4>
     680:	e8 e0       	ldi	r30, 0x08	; 8
     682:	f4 e0       	ldi	r31, 0x04	; 4
     684:	80 81       	ld	r24, Z
     686:	8b 7f       	andi	r24, 0xFB	; 251
     688:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №4 =============================================
if((MB_Hreg[35] & 0x08) != 0)
     68a:	23 ff       	sbrs	r18, 3
     68c:	30 c0       	rjmp	.+96     	; 0x6ee <__vector_4+0x218>
{
	if(((PINA & 0x08) != 0) & ((count.stat & 0x08) == 0)) // если на входе 1, а был 0
     68e:	80 b1       	in	r24, 0x00	; 0
     690:	30 91 08 04 	lds	r19, 0x0408
     694:	33 fd       	sbrc	r19, 3
     696:	24 c0       	rjmp	.+72     	; 0x6e0 <__vector_4+0x20a>
     698:	83 ff       	sbrs	r24, 3
     69a:	22 c0       	rjmp	.+68     	; 0x6e0 <__vector_4+0x20a>
	{
		count.pre_cnt4++;			// увеличить предделитель на 1
     69c:	eb e1       	ldi	r30, 0x1B	; 27
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	91 83       	std	Z+1, r25	; 0x01
     6a8:	80 83       	st	Z, r24
		count.stat |= 0x08;			// защита от повторного входа
     6aa:	38 60       	ori	r19, 0x08	; 8
     6ac:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt4 >= MB_Hreg[45]) {count.pre_cnt4 = 0; count.cnt4++;} // собственно счет
     6b0:	40 91 93 05 	lds	r20, 0x0593
     6b4:	50 91 94 05 	lds	r21, 0x0594
     6b8:	84 17       	cp	r24, r20
     6ba:	95 07       	cpc	r25, r21
     6bc:	88 f0       	brcs	.+34     	; 0x6e0 <__vector_4+0x20a>
     6be:	10 92 1c 04 	sts	0x041C, r1
     6c2:	10 92 1b 04 	sts	0x041B, r1
     6c6:	ed e1       	ldi	r30, 0x1D	; 29
     6c8:	f4 e0       	ldi	r31, 0x04	; 4
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	a2 81       	ldd	r26, Z+2	; 0x02
     6d0:	b3 81       	ldd	r27, Z+3	; 0x03
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	a1 1d       	adc	r26, r1
     6d6:	b1 1d       	adc	r27, r1
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	a2 83       	std	Z+2, r26	; 0x02
     6de:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x08) == 0) count.stat &= ~(0x08); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     6e0:	03 99       	sbic	0x00, 3	; 0
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <__vector_4+0x218>
     6e4:	e8 e0       	ldi	r30, 0x08	; 8
     6e6:	f4 e0       	ldi	r31, 0x04	; 4
     6e8:	80 81       	ld	r24, Z
     6ea:	87 7f       	andi	r24, 0xF7	; 247
     6ec:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №5 =============================================
if((MB_Hreg[35] & 0x10) != 0)
     6ee:	24 ff       	sbrs	r18, 4
     6f0:	30 c0       	rjmp	.+96     	; 0x752 <__vector_4+0x27c>
{
	if(((PINA & 0x10) != 0) & ((count.stat & 0x10) == 0)) // если на входе 1, а был 0
     6f2:	80 b1       	in	r24, 0x00	; 0
     6f4:	30 91 08 04 	lds	r19, 0x0408
     6f8:	34 fd       	sbrc	r19, 4
     6fa:	24 c0       	rjmp	.+72     	; 0x744 <__vector_4+0x26e>
     6fc:	84 ff       	sbrs	r24, 4
     6fe:	22 c0       	rjmp	.+68     	; 0x744 <__vector_4+0x26e>
	{
		count.pre_cnt5++;			// увеличить предделитель на 1
     700:	e1 e2       	ldi	r30, 0x21	; 33
     702:	f4 e0       	ldi	r31, 0x04	; 4
     704:	80 81       	ld	r24, Z
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	80 83       	st	Z, r24
		count.stat |= 0x10;			// защита от повторного входа
     70e:	30 61       	ori	r19, 0x10	; 16
     710:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt5 >= MB_Hreg[48]) {count.pre_cnt5 = 0; count.cnt5++;} // собственно счет
     714:	40 91 99 05 	lds	r20, 0x0599
     718:	50 91 9a 05 	lds	r21, 0x059A
     71c:	84 17       	cp	r24, r20
     71e:	95 07       	cpc	r25, r21
     720:	88 f0       	brcs	.+34     	; 0x744 <__vector_4+0x26e>
     722:	10 92 22 04 	sts	0x0422, r1
     726:	10 92 21 04 	sts	0x0421, r1
     72a:	e3 e2       	ldi	r30, 0x23	; 35
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	a2 81       	ldd	r26, Z+2	; 0x02
     734:	b3 81       	ldd	r27, Z+3	; 0x03
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	a1 1d       	adc	r26, r1
     73a:	b1 1d       	adc	r27, r1
     73c:	80 83       	st	Z, r24
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	a2 83       	std	Z+2, r26	; 0x02
     742:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x10) == 0) count.stat &= ~(0x10); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     744:	04 99       	sbic	0x00, 4	; 0
     746:	05 c0       	rjmp	.+10     	; 0x752 <__vector_4+0x27c>
     748:	e8 e0       	ldi	r30, 0x08	; 8
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	80 81       	ld	r24, Z
     74e:	8f 7e       	andi	r24, 0xEF	; 239
     750:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №6 =============================================
if((MB_Hreg[35] & 0x20) != 0)
     752:	25 ff       	sbrs	r18, 5
     754:	30 c0       	rjmp	.+96     	; 0x7b6 <__vector_4+0x2e0>
{
	if(((PINA & 0x20) != 0) & ((count.stat & 0x20) == 0)) // если на входе 1, а был 0
     756:	80 b1       	in	r24, 0x00	; 0
     758:	30 91 08 04 	lds	r19, 0x0408
     75c:	35 fd       	sbrc	r19, 5
     75e:	24 c0       	rjmp	.+72     	; 0x7a8 <__vector_4+0x2d2>
     760:	85 ff       	sbrs	r24, 5
     762:	22 c0       	rjmp	.+68     	; 0x7a8 <__vector_4+0x2d2>
	{
		count.pre_cnt6++;			// увеличить предделитель на 1
     764:	e7 e2       	ldi	r30, 0x27	; 39
     766:	f4 e0       	ldi	r31, 0x04	; 4
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	80 83       	st	Z, r24
		count.stat |= 0x20;			// защита от повторного входа
     772:	30 62       	ori	r19, 0x20	; 32
     774:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt6 >= MB_Hreg[51]) {count.pre_cnt6 = 0; count.cnt6++;} // собственно счет
     778:	40 91 9f 05 	lds	r20, 0x059F
     77c:	50 91 a0 05 	lds	r21, 0x05A0
     780:	84 17       	cp	r24, r20
     782:	95 07       	cpc	r25, r21
     784:	88 f0       	brcs	.+34     	; 0x7a8 <__vector_4+0x2d2>
     786:	10 92 28 04 	sts	0x0428, r1
     78a:	10 92 27 04 	sts	0x0427, r1
     78e:	e9 e2       	ldi	r30, 0x29	; 41
     790:	f4 e0       	ldi	r31, 0x04	; 4
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	a2 81       	ldd	r26, Z+2	; 0x02
     798:	b3 81       	ldd	r27, Z+3	; 0x03
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	a1 1d       	adc	r26, r1
     79e:	b1 1d       	adc	r27, r1
     7a0:	80 83       	st	Z, r24
     7a2:	91 83       	std	Z+1, r25	; 0x01
     7a4:	a2 83       	std	Z+2, r26	; 0x02
     7a6:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x20) == 0) count.stat &= ~(0x20); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     7a8:	05 99       	sbic	0x00, 5	; 0
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <__vector_4+0x2e0>
     7ac:	e8 e0       	ldi	r30, 0x08	; 8
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	80 81       	ld	r24, Z
     7b2:	8f 7d       	andi	r24, 0xDF	; 223
     7b4:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №7 =============================================
if((MB_Hreg[35] & 0x40) != 0)
     7b6:	26 ff       	sbrs	r18, 6
     7b8:	30 c0       	rjmp	.+96     	; 0x81a <__vector_4+0x344>
{
	if(((PINA & 0x40) != 0) & ((count.stat & 0x40) == 0)) // если на входе 1, а был 0
     7ba:	80 b1       	in	r24, 0x00	; 0
     7bc:	30 91 08 04 	lds	r19, 0x0408
     7c0:	36 fd       	sbrc	r19, 6
     7c2:	24 c0       	rjmp	.+72     	; 0x80c <__vector_4+0x336>
     7c4:	86 ff       	sbrs	r24, 6
     7c6:	22 c0       	rjmp	.+68     	; 0x80c <__vector_4+0x336>
	{
		count.pre_cnt7++;			// увеличить предделитель на 1
     7c8:	ed e2       	ldi	r30, 0x2D	; 45
     7ca:	f4 e0       	ldi	r31, 0x04	; 4
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	91 83       	std	Z+1, r25	; 0x01
     7d4:	80 83       	st	Z, r24
		count.stat |= 0x40;			// защита от повторного входа
     7d6:	30 64       	ori	r19, 0x40	; 64
     7d8:	30 93 08 04 	sts	0x0408, r19
		if(count.pre_cnt7 >= MB_Hreg[54]) {count.pre_cnt7 = 0; count.cnt7++;} // собственно счет
     7dc:	40 91 a5 05 	lds	r20, 0x05A5
     7e0:	50 91 a6 05 	lds	r21, 0x05A6
     7e4:	84 17       	cp	r24, r20
     7e6:	95 07       	cpc	r25, r21
     7e8:	88 f0       	brcs	.+34     	; 0x80c <__vector_4+0x336>
     7ea:	10 92 2e 04 	sts	0x042E, r1
     7ee:	10 92 2d 04 	sts	0x042D, r1
     7f2:	ef e2       	ldi	r30, 0x2F	; 47
     7f4:	f4 e0       	ldi	r31, 0x04	; 4
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	a2 81       	ldd	r26, Z+2	; 0x02
     7fc:	b3 81       	ldd	r27, Z+3	; 0x03
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	a1 1d       	adc	r26, r1
     802:	b1 1d       	adc	r27, r1
     804:	80 83       	st	Z, r24
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	a2 83       	std	Z+2, r26	; 0x02
     80a:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x40) == 0) count.stat &= ~(0x40); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     80c:	06 99       	sbic	0x00, 6	; 0
     80e:	05 c0       	rjmp	.+10     	; 0x81a <__vector_4+0x344>
     810:	e8 e0       	ldi	r30, 0x08	; 8
     812:	f4 e0       	ldi	r31, 0x04	; 4
     814:	80 81       	ld	r24, Z
     816:	8f 7b       	andi	r24, 0xBF	; 191
     818:	80 83       	st	Z, r24
}
// ================ если задана работа счетного входа №8 =============================================
if((MB_Hreg[35] & 0x80) != 0)
     81a:	27 ff       	sbrs	r18, 7
     81c:	30 c0       	rjmp	.+96     	; 0x87e <__vector_4+0x3a8>
{
	if(((PINA & 0x80) != 0) & ((count.stat & 0x80) == 0)) // если на входе 1, а был 0
     81e:	80 b1       	in	r24, 0x00	; 0
     820:	20 91 08 04 	lds	r18, 0x0408
     824:	22 23       	and	r18, r18
     826:	24 f1       	brlt	.+72     	; 0x870 <__vector_4+0x39a>
     828:	88 23       	and	r24, r24
     82a:	14 f5       	brge	.+68     	; 0x870 <__vector_4+0x39a>
	{
		count.pre_cnt8++;			// увеличить предделитель на 1
     82c:	e3 e3       	ldi	r30, 0x33	; 51
     82e:	f4 e0       	ldi	r31, 0x04	; 4
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
		count.stat |= 0x80;			// защита от повторного входа
     83a:	20 68       	ori	r18, 0x80	; 128
     83c:	20 93 08 04 	sts	0x0408, r18
		if(count.pre_cnt8 >= MB_Hreg[57]) {count.pre_cnt8 = 0; count.cnt8++;} // собственно счет
     840:	20 91 ab 05 	lds	r18, 0x05AB
     844:	30 91 ac 05 	lds	r19, 0x05AC
     848:	82 17       	cp	r24, r18
     84a:	93 07       	cpc	r25, r19
     84c:	88 f0       	brcs	.+34     	; 0x870 <__vector_4+0x39a>
     84e:	10 92 34 04 	sts	0x0434, r1
     852:	10 92 33 04 	sts	0x0433, r1
     856:	e5 e3       	ldi	r30, 0x35	; 53
     858:	f4 e0       	ldi	r31, 0x04	; 4
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	a2 81       	ldd	r26, Z+2	; 0x02
     860:	b3 81       	ldd	r27, Z+3	; 0x03
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	a1 1d       	adc	r26, r1
     866:	b1 1d       	adc	r27, r1
     868:	80 83       	st	Z, r24
     86a:	91 83       	std	Z+1, r25	; 0x01
     86c:	a2 83       	std	Z+2, r26	; 0x02
     86e:	b3 83       	std	Z+3, r27	; 0x03
	}
	if((PINA & 0x80) == 0) count.stat &= ~(0x80); // Если на входе 0 - взвести счетчик и ждать очередной 1!
     870:	07 99       	sbic	0x00, 7	; 0
     872:	05 c0       	rjmp	.+10     	; 0x87e <__vector_4+0x3a8>
     874:	e8 e0       	ldi	r30, 0x08	; 8
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	80 81       	ld	r24, Z
     87a:	8f 77       	andi	r24, 0x7F	; 127
     87c:	80 83       	st	Z, r24
}
} 
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_5>:
 /******************************************************************************
 * Обработка прерывания по изменению состояния входа UDI
 ******************************************************************************/
 ISR(PCINT1_vect)
 { // пишем состояние входа наличия напряжения на входах
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
	if((PINB & 0x01) == 0)	 MB_Ireg[1] |= (0x0100); // если напр нет - устанавливаем бит в 1
     8b2:	18 99       	sbic	0x03, 0	; 3
     8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <__vector_5+0x26>
     8b6:	e9 e0       	ldi	r30, 0x09	; 9
     8b8:	f2 e0       	ldi	r31, 0x02	; 2
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	91 60       	ori	r25, 0x01	; 1
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <__vector_5+0x34>
	else MB_Ireg[1] &= ~(0x0100);					// если напр есть - бит = 0
     8c6:	e9 e0       	ldi	r30, 0x09	; 9
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	9e 7f       	andi	r25, 0xFE	; 254
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24
} 
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	0f 90       	pop	r0
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_9>:
//======================================================================================================================================
/******************************************************************************
 * Обработка прерывания по совпадение А таймера/счетчика Т2
 ******************************************************************************/
ISR(TIMER2_COMPA_vect)
{	// если работа разрешена то
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	8f 93       	push	r24
  if((MB_Hreg[34] & 0x01) != 0) PORTC |= 0x02;	// Если разрешена работа ШИМ -> DO5 установить выход в 1
     8f2:	80 91 7d 05 	lds	r24, 0x057D
     8f6:	80 fd       	sbrc	r24, 0
     8f8:	41 9a       	sbi	0x08, 1	; 8
}
     8fa:	8f 91       	pop	r24
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <__vector_10>:
  
/******************************************************************************
 * Обработка прерывания по совпадение В таймера/счетчика Т2
 ******************************************************************************/
ISR(TIMER2_COMPB_vect)
{	// если работа разрешена то
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	8f 93       	push	r24
  if((MB_Hreg[34] & 0x02) != 0) PORTC |= 0x01;	// Если разрешена работа ШИМ -> DO6 установить выход в 1
     912:	80 91 7d 05 	lds	r24, 0x057D
     916:	81 fd       	sbrc	r24, 1
     918:	40 9a       	sbi	0x08, 0	; 8
}
     91a:	8f 91       	pop	r24
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <__vector_11>:

/******************************************************************************
 * Обработка прерывания по переполнение таймера/счетчика Т2
 ******************************************************************************/
ISR(TIMER2_OVF_vect)
{	// если работа разрешена то
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	8f 93       	push	r24
  if((MB_Hreg[34] & 0x01) != 0) PORTC &= ~(0x02);	// Если разрешена работа ШИМ -> DO5 установить выход в 0
     932:	80 91 7d 05 	lds	r24, 0x057D
     936:	80 fd       	sbrc	r24, 0
     938:	41 98       	cbi	0x08, 1	; 8
  if((MB_Hreg[34] & 0x02) != 0) PORTC &= ~(0x01);	// Если разрешена работа ШИМ -> DO6 установить выход в 0
     93a:	80 91 7d 05 	lds	r24, 0x057D
     93e:	81 fd       	sbrc	r24, 1
     940:	40 98       	cbi	0x08, 0	; 8
}
     942:	8f 91       	pop	r24
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <OUT_Read>:
//========================================================================================================================================
/*******************************************************************************
*	Функция чтения состояния выходов
********************************************************************************/
void OUT_Read(void)
{
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a5 e0       	ldi	r26, 0x05	; 5
     954:	b0 e0       	ldi	r27, 0x00	; 0
	char i;
	// --- Чтение состояния выходов ---
	for(i=0;i<4;i++) // только 6 выходов
	{
		if((PINC & (1<<(5-i))) == 0) MB_Ireg[2] &=~(0x01 << i);	// установить 0
		else MB_Ireg[2] |=0x01 << i;							// установить 1
     956:	eb e0       	ldi	r30, 0x0B	; 11
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	70 e0       	ldi	r23, 0x00	; 0
{
	char i;
	// --- Чтение состояния выходов ---
	for(i=0;i<4;i++) // только 6 выходов
	{
		if((PINC & (1<<(5-i))) == 0) MB_Ireg[2] &=~(0x01 << i);	// установить 0
     95e:	26 b1       	in	r18, 0x06	; 6
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	ad 01       	movw	r20, r26
     964:	48 1b       	sub	r20, r24
     966:	59 0b       	sbc	r21, r25
     968:	02 c0       	rjmp	.+4      	; 0x96e <OUT_Read+0x20>
     96a:	35 95       	asr	r19
     96c:	27 95       	ror	r18
     96e:	4a 95       	dec	r20
     970:	e2 f7       	brpl	.-8      	; 0x96a <OUT_Read+0x1c>
     972:	20 fd       	sbrc	r18, 0
     974:	10 c0       	rjmp	.+32     	; 0x996 <OUT_Read+0x48>
     976:	9b 01       	movw	r18, r22
     978:	08 2e       	mov	r0, r24
     97a:	02 c0       	rjmp	.+4      	; 0x980 <OUT_Read+0x32>
     97c:	22 0f       	add	r18, r18
     97e:	33 1f       	adc	r19, r19
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <OUT_Read+0x2e>
     984:	20 95       	com	r18
     986:	30 95       	com	r19
     988:	40 81       	ld	r20, Z
     98a:	51 81       	ldd	r21, Z+1	; 0x01
     98c:	24 23       	and	r18, r20
     98e:	35 23       	and	r19, r21
     990:	31 83       	std	Z+1, r19	; 0x01
     992:	20 83       	st	Z, r18
     994:	0d c0       	rjmp	.+26     	; 0x9b0 <OUT_Read+0x62>
		else MB_Ireg[2] |=0x01 << i;							// установить 1
     996:	20 81       	ld	r18, Z
     998:	31 81       	ldd	r19, Z+1	; 0x01
     99a:	ab 01       	movw	r20, r22
     99c:	08 2e       	mov	r0, r24
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <OUT_Read+0x56>
     9a0:	44 0f       	add	r20, r20
     9a2:	55 1f       	adc	r21, r21
     9a4:	0a 94       	dec	r0
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <OUT_Read+0x52>
     9a8:	24 2b       	or	r18, r20
     9aa:	35 2b       	or	r19, r21
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	20 83       	st	Z, r18
     9b0:	01 96       	adiw	r24, 0x01	; 1
********************************************************************************/
void OUT_Read(void)
{
	char i;
	// --- Чтение состояния выходов ---
	for(i=0;i<4;i++) // только 6 выходов
     9b2:	84 30       	cpi	r24, 0x04	; 4
     9b4:	91 05       	cpc	r25, r1
     9b6:	99 f6       	brne	.-90     	; 0x95e <OUT_Read+0x10>
	{
		if((PINC & (1<<(5-i))) == 0) MB_Ireg[2] &=~(0x01 << i);	// установить 0
		else MB_Ireg[2] |=0x01 << i;							// установить 1
	}
	if((MB_Hreg[34] & 0x01) != 0) // для выхода №5
     9b8:	20 91 7d 05 	lds	r18, 0x057D
     9bc:	20 ff       	sbrs	r18, 0
     9be:	16 c0       	rjmp	.+44     	; 0x9ec <OUT_Read+0x9e>
		{
			if(MB_Hreg[8] > 0) MB_Ireg[2] |= 0x10;
     9c0:	80 91 49 05 	lds	r24, 0x0549
     9c4:	90 91 4a 05 	lds	r25, 0x054A
     9c8:	89 2b       	or	r24, r25
     9ca:	41 f0       	breq	.+16     	; 0x9dc <OUT_Read+0x8e>
     9cc:	eb e0       	ldi	r30, 0x0B	; 11
     9ce:	f2 e0       	ldi	r31, 0x02	; 2
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	80 61       	ori	r24, 0x10	; 16
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	80 83       	st	Z, r24
     9da:	19 c0       	rjmp	.+50     	; 0xa0e <OUT_Read+0xc0>
			else MB_Ireg[2] &= ~(0x10);
     9dc:	eb e0       	ldi	r30, 0x0B	; 11
     9de:	f2 e0       	ldi	r31, 0x02	; 2
     9e0:	80 81       	ld	r24, Z
     9e2:	91 81       	ldd	r25, Z+1	; 0x01
     9e4:	8f 7e       	andi	r24, 0xEF	; 239
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	80 83       	st	Z, r24
     9ea:	11 c0       	rjmp	.+34     	; 0xa0e <OUT_Read+0xc0>
		}
	else
		{
			if((PINC & 0x02) == 0) MB_Ireg[2] &= ~(0x10);	// установить 0
     9ec:	31 99       	sbic	0x06, 1	; 6
     9ee:	08 c0       	rjmp	.+16     	; 0xa00 <OUT_Read+0xb2>
     9f0:	eb e0       	ldi	r30, 0x0B	; 11
     9f2:	f2 e0       	ldi	r31, 0x02	; 2
     9f4:	80 81       	ld	r24, Z
     9f6:	91 81       	ldd	r25, Z+1	; 0x01
     9f8:	8f 7e       	andi	r24, 0xEF	; 239
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <OUT_Read+0xc0>
			else MB_Ireg[2] |= 0x10;
     a00:	eb e0       	ldi	r30, 0x0B	; 11
     a02:	f2 e0       	ldi	r31, 0x02	; 2
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	80 61       	ori	r24, 0x10	; 16
     a0a:	91 83       	std	Z+1, r25	; 0x01
     a0c:	80 83       	st	Z, r24
		}
	if((MB_Hreg[34] & 0x02) != 0) // Для выхода №6
     a0e:	21 ff       	sbrs	r18, 1
     a10:	16 c0       	rjmp	.+44     	; 0xa3e <OUT_Read+0xf0>
	{
		if(MB_Hreg[9] > 0) MB_Ireg[2] |= 0x20;
     a12:	80 91 4b 05 	lds	r24, 0x054B
     a16:	90 91 4c 05 	lds	r25, 0x054C
     a1a:	89 2b       	or	r24, r25
     a1c:	41 f0       	breq	.+16     	; 0xa2e <OUT_Read+0xe0>
     a1e:	eb e0       	ldi	r30, 0x0B	; 11
     a20:	f2 e0       	ldi	r31, 0x02	; 2
     a22:	80 81       	ld	r24, Z
     a24:	91 81       	ldd	r25, Z+1	; 0x01
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
     a2c:	08 95       	ret
		else MB_Ireg[2] &= ~(0x20);
     a2e:	eb e0       	ldi	r30, 0x0B	; 11
     a30:	f2 e0       	ldi	r31, 0x02	; 2
     a32:	80 81       	ld	r24, Z
     a34:	91 81       	ldd	r25, Z+1	; 0x01
     a36:	8f 7d       	andi	r24, 0xDF	; 223
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
     a3c:	08 95       	ret
	}
	else
	{
		if((PINC & 0x01) == 0) MB_Ireg[2] &= ~(0x20);	// установить 0
     a3e:	30 99       	sbic	0x06, 0	; 6
     a40:	08 c0       	rjmp	.+16     	; 0xa52 <OUT_Read+0x104>
     a42:	eb e0       	ldi	r30, 0x0B	; 11
     a44:	f2 e0       	ldi	r31, 0x02	; 2
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	8f 7d       	andi	r24, 0xDF	; 223
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	80 83       	st	Z, r24
     a50:	08 95       	ret
		else MB_Ireg[2] |= 0x20;
     a52:	eb e0       	ldi	r30, 0x0B	; 11
     a54:	f2 e0       	ldi	r31, 0x02	; 2
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	80 62       	ori	r24, 0x20	; 32
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	80 83       	st	Z, r24
     a60:	08 95       	ret

00000a62 <OUT_Update>:

/*******************************************************************************
*	Функция обновления состояния выходов (работа из основной программы)
********************************************************************************/
void OUT_Update(void)
{
     a62:	85 e0       	ldi	r24, 0x05	; 5
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a5 e0       	ldi	r26, 0x05	; 5
     a68:	b0 e0       	ldi	r27, 0x00	; 0
char i;
	// --- Изменение состояния выходов ---
	for(i=0;i<4;i++) // первые 4 выхода (реле)
	{
		if((MB_Hreg[5] & (1<<i)) == 0) PORTC&=~(0x01 << (5-i));	// установить 0
     a6a:	21 e0       	ldi	r18, 0x01	; 1
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	e3 e4       	ldi	r30, 0x43	; 67
     a70:	f5 e0       	ldi	r31, 0x05	; 5
     a72:	ad 01       	movw	r20, r26
     a74:	48 1b       	sub	r20, r24
     a76:	59 0b       	sbc	r21, r25
     a78:	b9 01       	movw	r22, r18
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <OUT_Update+0x1e>
     a7c:	66 0f       	add	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	4a 95       	dec	r20
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <OUT_Update+0x1a>
     a84:	ab 01       	movw	r20, r22
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	46 23       	and	r20, r22
     a8c:	57 23       	and	r21, r23
     a8e:	45 2b       	or	r20, r21
     a90:	61 f4       	brne	.+24     	; 0xaaa <OUT_Update+0x48>
     a92:	68 b1       	in	r22, 0x08	; 8
     a94:	a9 01       	movw	r20, r18
     a96:	08 2e       	mov	r0, r24
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <OUT_Update+0x3c>
     a9a:	44 0f       	add	r20, r20
     a9c:	55 1f       	adc	r21, r21
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <OUT_Update+0x38>
     aa2:	40 95       	com	r20
     aa4:	46 23       	and	r20, r22
     aa6:	48 b9       	out	0x08, r20	; 8
     aa8:	0a c0       	rjmp	.+20     	; 0xabe <OUT_Update+0x5c>
		else PORTC|=0x01 << (5-i);								// установить 1
     aaa:	68 b1       	in	r22, 0x08	; 8
     aac:	a9 01       	movw	r20, r18
     aae:	08 2e       	mov	r0, r24
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <OUT_Update+0x54>
     ab2:	44 0f       	add	r20, r20
     ab4:	55 1f       	adc	r21, r21
     ab6:	0a 94       	dec	r0
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <OUT_Update+0x50>
     aba:	46 2b       	or	r20, r22
     abc:	48 b9       	out	0x08, r20	; 8
     abe:	01 97       	sbiw	r24, 0x01	; 1
********************************************************************************/
void OUT_Update(void)
{
char i;
	// --- Изменение состояния выходов ---
	for(i=0;i<4;i++) // первые 4 выхода (реле)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	91 05       	cpc	r25, r1
     ac4:	b1 f6       	brne	.-84     	; 0xa72 <OUT_Update+0x10>
	{
		if((MB_Hreg[5] & (1<<i)) == 0) PORTC&=~(0x01 << (5-i));	// установить 0
		else PORTC|=0x01 << (5-i);								// установить 1
	}
	// --- для выходов с ОК ---
	i = MB_Hreg[34] & 0x03;
     ac6:	80 91 7d 05 	lds	r24, 0x057D
     aca:	83 70       	andi	r24, 0x03	; 3
	switch (i)
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	a1 f0       	breq	.+40     	; 0xaf8 <OUT_Update+0x96>
     ad0:	83 30       	cpi	r24, 0x03	; 3
     ad2:	11 f1       	breq	.+68     	; 0xb18 <OUT_Update+0xb6>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	49 f5       	brne	.+82     	; 0xb2a <OUT_Update+0xc8>
	{
		case 1:							// если в качестве ШИМ работает только DO5
			OCR2A = (char) MB_Hreg[8];	// Значение в регистр управления для DO5
     ad8:	80 91 49 05 	lds	r24, 0x0549
     adc:	80 93 b3 00 	sts	0x00B3, r24
			OCR2B = (char) MB_Hreg[9];	// Значение в регистр управления для DO6
     ae0:	80 91 4b 05 	lds	r24, 0x054B
     ae4:	80 93 b4 00 	sts	0x00B4, r24
			if((MB_Hreg[5] & 0x20) == 0) PORTC&=~(0x01);	// установить 0 DO6
     ae8:	80 91 43 05 	lds	r24, 0x0543
     aec:	85 fd       	sbrc	r24, 5
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <OUT_Update+0x92>
     af0:	40 98       	cbi	0x08, 0	; 8
     af2:	29 c0       	rjmp	.+82     	; 0xb46 <OUT_Update+0xe4>
			else PORTC|=0x01;								// установить 1	DO6
     af4:	40 9a       	sbi	0x08, 0	; 8
     af6:	27 c0       	rjmp	.+78     	; 0xb46 <OUT_Update+0xe4>
		break;
		case 2:							// если в качестве ШИМ работает только DO6
			OCR2A = (char) MB_Hreg[8];	// Значение в регистр управления для DO5
     af8:	80 91 49 05 	lds	r24, 0x0549
     afc:	80 93 b3 00 	sts	0x00B3, r24
			OCR2B = (char) MB_Hreg[9];	// Значение в регистр управления для DO6
     b00:	80 91 4b 05 	lds	r24, 0x054B
     b04:	80 93 b4 00 	sts	0x00B4, r24
			if((MB_Hreg[5] & 0x10) == 0) PORTC&=~(0x02);	// установить 0 DO5
     b08:	80 91 43 05 	lds	r24, 0x0543
     b0c:	84 fd       	sbrc	r24, 4
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <OUT_Update+0xb2>
     b10:	41 98       	cbi	0x08, 1	; 8
     b12:	19 c0       	rjmp	.+50     	; 0xb46 <OUT_Update+0xe4>
			else PORTC|=0x02;								// установить 1	DO5
     b14:	41 9a       	sbi	0x08, 1	; 8
     b16:	17 c0       	rjmp	.+46     	; 0xb46 <OUT_Update+0xe4>
		break;
		case 3:							// если в качестве ШИМ работает DO5 и DO6
			OCR2A = (char) MB_Hreg[8];	// Значение в регистр управления для DO5
     b18:	80 91 49 05 	lds	r24, 0x0549
     b1c:	80 93 b3 00 	sts	0x00B3, r24
			OCR2B = (char) MB_Hreg[9];	// Значение в регистр управления для DO6
     b20:	80 91 4b 05 	lds	r24, 0x054B
     b24:	80 93 b4 00 	sts	0x00B4, r24
		break;
     b28:	0e c0       	rjmp	.+28     	; 0xb46 <OUT_Update+0xe4>
		default:						// Если выходы DO5,DO6 не в режиме ШИМ 
			if((MB_Hreg[5] & 0x10) == 0) PORTC&=~(0x02);	// установить 0
     b2a:	80 91 43 05 	lds	r24, 0x0543
     b2e:	84 fd       	sbrc	r24, 4
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <OUT_Update+0xd4>
     b32:	41 98       	cbi	0x08, 1	; 8
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <OUT_Update+0xd6>
			else PORTC|=0x02;								// установить 1
     b36:	41 9a       	sbi	0x08, 1	; 8
			if((MB_Hreg[5] & 0x20) == 0) PORTC&=~(0x01);	// установить 0
     b38:	80 91 43 05 	lds	r24, 0x0543
     b3c:	85 fd       	sbrc	r24, 5
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <OUT_Update+0xe2>
     b40:	40 98       	cbi	0x08, 0	; 8
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <OUT_Update+0xe4>
			else PORTC|=0x01;								// установить 1
     b44:	40 9a       	sbi	0x08, 0	; 8
		break;
	}
	// --- Перенесу значения регистров ШИМ ---
	if((MB_Hreg[34] & 0x01) != 0) MB_Ireg[9] = MB_Hreg[8];
     b46:	20 91 7d 05 	lds	r18, 0x057D
     b4a:	20 ff       	sbrs	r18, 0
     b4c:	09 c0       	rjmp	.+18     	; 0xb60 <OUT_Update+0xfe>
     b4e:	80 91 49 05 	lds	r24, 0x0549
     b52:	90 91 4a 05 	lds	r25, 0x054A
     b56:	90 93 1a 02 	sts	0x021A, r25
     b5a:	80 93 19 02 	sts	0x0219, r24
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <OUT_Update+0x106>
	else MB_Ireg[9] = 0;
     b60:	10 92 1a 02 	sts	0x021A, r1
     b64:	10 92 19 02 	sts	0x0219, r1
	if((MB_Hreg[34] & 0x02) != 0) MB_Ireg[10] = MB_Hreg[9];
     b68:	21 ff       	sbrs	r18, 1
     b6a:	09 c0       	rjmp	.+18     	; 0xb7e <OUT_Update+0x11c>
     b6c:	80 91 4b 05 	lds	r24, 0x054B
     b70:	90 91 4c 05 	lds	r25, 0x054C
     b74:	90 93 1c 02 	sts	0x021C, r25
     b78:	80 93 1b 02 	sts	0x021B, r24
     b7c:	08 95       	ret
	else MB_Ireg[10] = 0;
     b7e:	10 92 1c 02 	sts	0x021C, r1
     b82:	10 92 1b 02 	sts	0x021B, r1
     b86:	08 95       	ret

00000b88 <CNT_clear>:
//================================================ РАБОТА СЧЕТНЫХ ВХОДОВ ==================================================================
//=========================================================================================================================================
// === Очистить счетные регистры ===
void CNT_clear(void)
{
count.stat = 0;
     b88:	10 92 08 04 	sts	0x0408, r1
count.pre_cnt1 = 0;
     b8c:	10 92 0a 04 	sts	0x040A, r1
     b90:	10 92 09 04 	sts	0x0409, r1
count.cnt1 = 0;
     b94:	10 92 0b 04 	sts	0x040B, r1
     b98:	10 92 0c 04 	sts	0x040C, r1
     b9c:	10 92 0d 04 	sts	0x040D, r1
     ba0:	10 92 0e 04 	sts	0x040E, r1
count.pre_cnt2 = 0;
     ba4:	10 92 10 04 	sts	0x0410, r1
     ba8:	10 92 0f 04 	sts	0x040F, r1
count.cnt2 = 0;
     bac:	10 92 11 04 	sts	0x0411, r1
     bb0:	10 92 12 04 	sts	0x0412, r1
     bb4:	10 92 13 04 	sts	0x0413, r1
     bb8:	10 92 14 04 	sts	0x0414, r1
count.pre_cnt3 = 0;
     bbc:	10 92 16 04 	sts	0x0416, r1
     bc0:	10 92 15 04 	sts	0x0415, r1
count.cnt3 = 0;
     bc4:	10 92 17 04 	sts	0x0417, r1
     bc8:	10 92 18 04 	sts	0x0418, r1
     bcc:	10 92 19 04 	sts	0x0419, r1
     bd0:	10 92 1a 04 	sts	0x041A, r1
count.pre_cnt4 = 0;
     bd4:	10 92 1c 04 	sts	0x041C, r1
     bd8:	10 92 1b 04 	sts	0x041B, r1
count.cnt4 = 0;
     bdc:	10 92 1d 04 	sts	0x041D, r1
     be0:	10 92 1e 04 	sts	0x041E, r1
     be4:	10 92 1f 04 	sts	0x041F, r1
     be8:	10 92 20 04 	sts	0x0420, r1
count.pre_cnt5 = 0;
     bec:	10 92 22 04 	sts	0x0422, r1
     bf0:	10 92 21 04 	sts	0x0421, r1
count.cnt5 = 0;
     bf4:	10 92 23 04 	sts	0x0423, r1
     bf8:	10 92 24 04 	sts	0x0424, r1
     bfc:	10 92 25 04 	sts	0x0425, r1
     c00:	10 92 26 04 	sts	0x0426, r1
count.pre_cnt6 = 0;
     c04:	10 92 28 04 	sts	0x0428, r1
     c08:	10 92 27 04 	sts	0x0427, r1
count.cnt6 = 0;
     c0c:	10 92 29 04 	sts	0x0429, r1
     c10:	10 92 2a 04 	sts	0x042A, r1
     c14:	10 92 2b 04 	sts	0x042B, r1
     c18:	10 92 2c 04 	sts	0x042C, r1
count.pre_cnt7 = 0;
     c1c:	10 92 2e 04 	sts	0x042E, r1
     c20:	10 92 2d 04 	sts	0x042D, r1
count.cnt7 = 0;
     c24:	10 92 2f 04 	sts	0x042F, r1
     c28:	10 92 30 04 	sts	0x0430, r1
     c2c:	10 92 31 04 	sts	0x0431, r1
     c30:	10 92 32 04 	sts	0x0432, r1
count.pre_cnt8 = 0;
     c34:	10 92 34 04 	sts	0x0434, r1
     c38:	10 92 33 04 	sts	0x0433, r1
count.cnt8 = 0;
     c3c:	10 92 35 04 	sts	0x0435, r1
     c40:	10 92 36 04 	sts	0x0436, r1
     c44:	10 92 37 04 	sts	0x0437, r1
     c48:	10 92 38 04 	sts	0x0438, r1
     c4c:	08 95       	ret

00000c4e <rd_cnt>:

// === Перенос значений счетных регистров в регистры INPUT ===
void rd_cnt(void)
{
unsigned long int c = 0;									// Рабочая переменная
  c = count.cnt1 + (((unsigned long int)MB_Hreg[44] << 16) + MB_Hreg[45]);	// коррекция значения счетчика №1
     c4e:	20 91 93 05 	lds	r18, 0x0593
     c52:	30 91 94 05 	lds	r19, 0x0594
     c56:	80 91 0b 04 	lds	r24, 0x040B
     c5a:	90 91 0c 04 	lds	r25, 0x040C
     c5e:	a0 91 0d 04 	lds	r26, 0x040D
     c62:	b0 91 0e 04 	lds	r27, 0x040E
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	a1 1d       	adc	r26, r1
     c6c:	b1 1d       	adc	r27, r1
     c6e:	40 91 91 05 	lds	r20, 0x0591
     c72:	50 91 92 05 	lds	r21, 0x0592
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	ba 01       	movw	r22, r20
     c7c:	55 27       	eor	r21, r21
     c7e:	44 27       	eor	r20, r20
     c80:	84 0f       	add	r24, r20
     c82:	95 1f       	adc	r25, r21
     c84:	a6 1f       	adc	r26, r22
     c86:	b7 1f       	adc	r27, r23
  MB_Ireg[11] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №1
     c88:	b0 93 1e 02 	sts	0x021E, r27
     c8c:	a0 93 1d 02 	sts	0x021D, r26
  MB_Ireg[12] = c & 0xFFFF;									// запись младшего числа счетчика №1
     c90:	90 93 20 02 	sts	0x0220, r25
     c94:	80 93 1f 02 	sts	0x021F, r24
  c = 0;
  c = count.cnt2 + (((unsigned long int)MB_Hreg[46] << 16) + MB_Hreg[47]);	// коррекция значения счетчика №2
     c98:	20 91 97 05 	lds	r18, 0x0597
     c9c:	30 91 98 05 	lds	r19, 0x0598
     ca0:	80 91 11 04 	lds	r24, 0x0411
     ca4:	90 91 12 04 	lds	r25, 0x0412
     ca8:	a0 91 13 04 	lds	r26, 0x0413
     cac:	b0 91 14 04 	lds	r27, 0x0414
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	a1 1d       	adc	r26, r1
     cb6:	b1 1d       	adc	r27, r1
     cb8:	40 91 95 05 	lds	r20, 0x0595
     cbc:	50 91 96 05 	lds	r21, 0x0596
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	ba 01       	movw	r22, r20
     cc6:	55 27       	eor	r21, r21
     cc8:	44 27       	eor	r20, r20
     cca:	84 0f       	add	r24, r20
     ccc:	95 1f       	adc	r25, r21
     cce:	a6 1f       	adc	r26, r22
     cd0:	b7 1f       	adc	r27, r23
  MB_Ireg[13] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №2
     cd2:	b0 93 22 02 	sts	0x0222, r27
     cd6:	a0 93 21 02 	sts	0x0221, r26
  MB_Ireg[14] = c & 0xFFFF;									// запись младшего числа счетчика №2
     cda:	90 93 24 02 	sts	0x0224, r25
     cde:	80 93 23 02 	sts	0x0223, r24
  c = 0;
  c = count.cnt3 + (((unsigned long int)MB_Hreg[48] << 16) + MB_Hreg[49]);	// коррекция значения счетчика №3
     ce2:	20 91 9b 05 	lds	r18, 0x059B
     ce6:	30 91 9c 05 	lds	r19, 0x059C
     cea:	80 91 17 04 	lds	r24, 0x0417
     cee:	90 91 18 04 	lds	r25, 0x0418
     cf2:	a0 91 19 04 	lds	r26, 0x0419
     cf6:	b0 91 1a 04 	lds	r27, 0x041A
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	a1 1d       	adc	r26, r1
     d00:	b1 1d       	adc	r27, r1
     d02:	40 91 99 05 	lds	r20, 0x0599
     d06:	50 91 9a 05 	lds	r21, 0x059A
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	ba 01       	movw	r22, r20
     d10:	55 27       	eor	r21, r21
     d12:	44 27       	eor	r20, r20
     d14:	84 0f       	add	r24, r20
     d16:	95 1f       	adc	r25, r21
     d18:	a6 1f       	adc	r26, r22
     d1a:	b7 1f       	adc	r27, r23
  MB_Ireg[15] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №3
     d1c:	b0 93 26 02 	sts	0x0226, r27
     d20:	a0 93 25 02 	sts	0x0225, r26
  MB_Ireg[16] = c & 0xFFFF;									// запись младшего числа счетчика №3
     d24:	90 93 28 02 	sts	0x0228, r25
     d28:	80 93 27 02 	sts	0x0227, r24
  c = 0;
  c = count.cnt4 + (((unsigned long int)MB_Hreg[50] << 16) + MB_Hreg[51]);	// коррекция значения счетчика №4
     d2c:	20 91 9f 05 	lds	r18, 0x059F
     d30:	30 91 a0 05 	lds	r19, 0x05A0
     d34:	80 91 1d 04 	lds	r24, 0x041D
     d38:	90 91 1e 04 	lds	r25, 0x041E
     d3c:	a0 91 1f 04 	lds	r26, 0x041F
     d40:	b0 91 20 04 	lds	r27, 0x0420
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	a1 1d       	adc	r26, r1
     d4a:	b1 1d       	adc	r27, r1
     d4c:	40 91 9d 05 	lds	r20, 0x059D
     d50:	50 91 9e 05 	lds	r21, 0x059E
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	ba 01       	movw	r22, r20
     d5a:	55 27       	eor	r21, r21
     d5c:	44 27       	eor	r20, r20
     d5e:	84 0f       	add	r24, r20
     d60:	95 1f       	adc	r25, r21
     d62:	a6 1f       	adc	r26, r22
     d64:	b7 1f       	adc	r27, r23
  MB_Ireg[17] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №4
     d66:	b0 93 2a 02 	sts	0x022A, r27
     d6a:	a0 93 29 02 	sts	0x0229, r26
  MB_Ireg[18] = c & 0xFFFF;									// запись младшего числа счетчика №4
     d6e:	90 93 2c 02 	sts	0x022C, r25
     d72:	80 93 2b 02 	sts	0x022B, r24
  c = 0;
  c = count.cnt5 + (((unsigned long int)MB_Hreg[52] << 16) + MB_Hreg[53]);	// коррекция значения счетчика №5
     d76:	20 91 a3 05 	lds	r18, 0x05A3
     d7a:	30 91 a4 05 	lds	r19, 0x05A4
     d7e:	80 91 23 04 	lds	r24, 0x0423
     d82:	90 91 24 04 	lds	r25, 0x0424
     d86:	a0 91 25 04 	lds	r26, 0x0425
     d8a:	b0 91 26 04 	lds	r27, 0x0426
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	a1 1d       	adc	r26, r1
     d94:	b1 1d       	adc	r27, r1
     d96:	40 91 a1 05 	lds	r20, 0x05A1
     d9a:	50 91 a2 05 	lds	r21, 0x05A2
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	ba 01       	movw	r22, r20
     da4:	55 27       	eor	r21, r21
     da6:	44 27       	eor	r20, r20
     da8:	84 0f       	add	r24, r20
     daa:	95 1f       	adc	r25, r21
     dac:	a6 1f       	adc	r26, r22
     dae:	b7 1f       	adc	r27, r23
  MB_Ireg[19] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №5
     db0:	b0 93 2e 02 	sts	0x022E, r27
     db4:	a0 93 2d 02 	sts	0x022D, r26
  MB_Ireg[20] = c & 0xFFFF;									// запись младшего числа счетчика №5
     db8:	90 93 30 02 	sts	0x0230, r25
     dbc:	80 93 2f 02 	sts	0x022F, r24
  c = 0;
  c = count.cnt6 + (((unsigned long int)MB_Hreg[54] << 16) + MB_Hreg[55]);	// коррекция значения счетчика №6
     dc0:	20 91 a7 05 	lds	r18, 0x05A7
     dc4:	30 91 a8 05 	lds	r19, 0x05A8
     dc8:	80 91 29 04 	lds	r24, 0x0429
     dcc:	90 91 2a 04 	lds	r25, 0x042A
     dd0:	a0 91 2b 04 	lds	r26, 0x042B
     dd4:	b0 91 2c 04 	lds	r27, 0x042C
     dd8:	82 0f       	add	r24, r18
     dda:	93 1f       	adc	r25, r19
     ddc:	a1 1d       	adc	r26, r1
     dde:	b1 1d       	adc	r27, r1
     de0:	40 91 a5 05 	lds	r20, 0x05A5
     de4:	50 91 a6 05 	lds	r21, 0x05A6
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	ba 01       	movw	r22, r20
     dee:	55 27       	eor	r21, r21
     df0:	44 27       	eor	r20, r20
     df2:	84 0f       	add	r24, r20
     df4:	95 1f       	adc	r25, r21
     df6:	a6 1f       	adc	r26, r22
     df8:	b7 1f       	adc	r27, r23
  MB_Ireg[21] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №6
     dfa:	b0 93 32 02 	sts	0x0232, r27
     dfe:	a0 93 31 02 	sts	0x0231, r26
  MB_Ireg[22] = c & 0xFFFF;									// запись младшего числа счетчика №6
     e02:	90 93 34 02 	sts	0x0234, r25
     e06:	80 93 33 02 	sts	0x0233, r24
  c = 0;
  c = count.cnt7 + (((unsigned long int)MB_Hreg[56] << 16) + MB_Hreg[57]);	// коррекция значения счетчика №7
     e0a:	20 91 ab 05 	lds	r18, 0x05AB
     e0e:	30 91 ac 05 	lds	r19, 0x05AC
     e12:	80 91 2f 04 	lds	r24, 0x042F
     e16:	90 91 30 04 	lds	r25, 0x0430
     e1a:	a0 91 31 04 	lds	r26, 0x0431
     e1e:	b0 91 32 04 	lds	r27, 0x0432
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	a1 1d       	adc	r26, r1
     e28:	b1 1d       	adc	r27, r1
     e2a:	40 91 a9 05 	lds	r20, 0x05A9
     e2e:	50 91 aa 05 	lds	r21, 0x05AA
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	ba 01       	movw	r22, r20
     e38:	55 27       	eor	r21, r21
     e3a:	44 27       	eor	r20, r20
     e3c:	84 0f       	add	r24, r20
     e3e:	95 1f       	adc	r25, r21
     e40:	a6 1f       	adc	r26, r22
     e42:	b7 1f       	adc	r27, r23
  MB_Ireg[23] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №7
     e44:	b0 93 36 02 	sts	0x0236, r27
     e48:	a0 93 35 02 	sts	0x0235, r26
  MB_Ireg[24] = c & 0xFFFF;									// запись младшего числа счетчика №7
     e4c:	90 93 38 02 	sts	0x0238, r25
     e50:	80 93 37 02 	sts	0x0237, r24
  c = 0;
  c = count.cnt8 + (((unsigned long int)MB_Hreg[58] << 16) + MB_Hreg[59]);	// коррекция значения счетчика №8
     e54:	20 91 af 05 	lds	r18, 0x05AF
     e58:	30 91 b0 05 	lds	r19, 0x05B0
     e5c:	80 91 35 04 	lds	r24, 0x0435
     e60:	90 91 36 04 	lds	r25, 0x0436
     e64:	a0 91 37 04 	lds	r26, 0x0437
     e68:	b0 91 38 04 	lds	r27, 0x0438
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	a1 1d       	adc	r26, r1
     e72:	b1 1d       	adc	r27, r1
     e74:	40 91 ad 05 	lds	r20, 0x05AD
     e78:	50 91 ae 05 	lds	r21, 0x05AE
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	ba 01       	movw	r22, r20
     e82:	55 27       	eor	r21, r21
     e84:	44 27       	eor	r20, r20
     e86:	84 0f       	add	r24, r20
     e88:	95 1f       	adc	r25, r21
     e8a:	a6 1f       	adc	r26, r22
     e8c:	b7 1f       	adc	r27, r23
  MB_Ireg[25] = (c >> 16) & 0xFFFF;							// запись старшего числа счетчика №8
     e8e:	b0 93 3a 02 	sts	0x023A, r27
     e92:	a0 93 39 02 	sts	0x0239, r26
  MB_Ireg[26] = c & 0xFFFF;									// запись младшего числа счетчика №8
     e96:	90 93 3c 02 	sts	0x023C, r25
     e9a:	80 93 3b 02 	sts	0x023B, r24
     e9e:	08 95       	ret

00000ea0 <set_default>:

/**************** установка заводских настроек (заданных по умолчанию) ********************************************
* изначально все уставки находяться в  и переписываются в eeprom, затем из eeprom в рагистры ОЗУ
*******************************************************************************************************************/
void set_default(void)
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	ae 97       	sbiw	r28, 0x2e	; 46
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
config tma;		// Временный массив!
	// --- заполню массив настроек по умолчанию ---
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     eb4:	f9 9b       	sbis	0x1f, 1	; 31
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <set_default+0x1c>
     eb8:	f9 99       	sbic	0x1f, 1	; 31
     eba:	fe cf       	rjmp	.-4      	; 0xeb8 <set_default+0x18>
	WDR();
     ebc:	a8 95       	wdr
	eeprom_read_block(&tma,&MEM_df,sizeof(MEM_df));	// Считаю вcе из EEPROM в ОЗУ
     ebe:	4e e2       	ldi	r20, 0x2E	; 46
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__eerd_block_m324pa>
	WDR();
     ece:	a8 95       	wdr
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
     ed0:	f9 9b       	sbis	0x1f, 1	; 31
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <set_default+0x38>
     ed4:	f9 99       	sbic	0x1f, 1	; 31
     ed6:	fe cf       	rjmp	.-4      	; 0xed4 <set_default+0x34>
	WDR();
     ed8:	a8 95       	wdr
	eeprom_write_block(&tma,&MEM,sizeof(tma));		// Записать всю структуру ОЗУ в EEPROM структуру рабочих настроек
     eda:	4e e2       	ldi	r20, 0x2E	; 46
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	6e e2       	ldi	r22, 0x2E	; 46
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__eewr_block_m324pa>
	
}
     eea:	ae 96       	adiw	r28, 0x2e	; 46
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <rd_name>:

//================================================ Работа с INPUT регистрами ===============================================================

/************ Чтение имени контроллера из FLASH в Ireg регистр ****************************************************/
void rd_name(void)
{
     efc:	8b e9       	ldi	r24, 0x9B	; 155
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	af e3       	ldi	r26, 0x3F	; 63
     f02:	b2 e0       	ldi	r27, 0x02	; 2
     f04:	27 ea       	ldi	r18, 0xA7	; 167
     f06:	30 e0       	ldi	r19, 0x00	; 0
for(unsigned char i=0;i<6;i++)
	{
		MB_Ireg[28+i] = (unsigned int) (pgm_read_byte(&fl_name[i*2]) << 8);
     f08:	fc 01       	movw	r30, r24
     f0a:	44 91       	lpm	r20, Z
     f0c:	31 96       	adiw	r30, 0x01	; 1
		MB_Ireg[28+i] |= pgm_read_byte(&fl_name[(i*2)+1]);
     f0e:	e4 91       	lpm	r30, Z
/************ Чтение имени контроллера из FLASH в Ireg регистр ****************************************************/
void rd_name(void)
{
for(unsigned char i=0;i<6;i++)
	{
		MB_Ireg[28+i] = (unsigned int) (pgm_read_byte(&fl_name[i*2]) << 8);
     f10:	f0 e0       	ldi	r31, 0x00	; 0
		MB_Ireg[28+i] |= pgm_read_byte(&fl_name[(i*2)+1]);
     f12:	f4 2b       	or	r31, r20
     f14:	ed 93       	st	X+, r30
     f16:	fd 93       	st	X+, r31
     f18:	02 96       	adiw	r24, 0x02	; 2
//================================================ Работа с INPUT регистрами ===============================================================

/************ Чтение имени контроллера из FLASH в Ireg регистр ****************************************************/
void rd_name(void)
{
for(unsigned char i=0;i<6;i++)
     f1a:	82 17       	cp	r24, r18
     f1c:	93 07       	cpc	r25, r19
     f1e:	a1 f7       	brne	.-24     	; 0xf08 <rd_name+0xc>
	{
		MB_Ireg[28+i] = (unsigned int) (pgm_read_byte(&fl_name[i*2]) << 8);
		MB_Ireg[28+i] |= pgm_read_byte(&fl_name[(i*2)+1]);
	}
}
     f20:	08 95       	ret

00000f22 <rd_ver>:
/************ Чтение версии ПО контроллера из FLASH в Ireg регистр ***********************************************/
void rd_ver(void)
{
     f22:	84 e9       	ldi	r24, 0x94	; 148
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	af e4       	ldi	r26, 0x4F	; 79
     f28:	b2 e0       	ldi	r27, 0x02	; 2
     f2a:	2a e9       	ldi	r18, 0x9A	; 154
     f2c:	30 e0       	ldi	r19, 0x00	; 0
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[36+i] = (unsigned int) (pgm_read_byte(&fl_version[i*2]) << 8);
     f2e:	fc 01       	movw	r30, r24
     f30:	44 91       	lpm	r20, Z
     f32:	31 96       	adiw	r30, 0x01	; 1
	MB_Ireg[36+i] |= pgm_read_byte(&fl_version[(i*2)+1]);
     f34:	e4 91       	lpm	r30, Z
/************ Чтение версии ПО контроллера из FLASH в Ireg регистр ***********************************************/
void rd_ver(void)
{
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[36+i] = (unsigned int) (pgm_read_byte(&fl_version[i*2]) << 8);
     f36:	f0 e0       	ldi	r31, 0x00	; 0
	MB_Ireg[36+i] |= pgm_read_byte(&fl_version[(i*2)+1]);
     f38:	f4 2b       	or	r31, r20
     f3a:	ed 93       	st	X+, r30
     f3c:	fd 93       	st	X+, r31
     f3e:	02 96       	adiw	r24, 0x02	; 2
	}
}
/************ Чтение версии ПО контроллера из FLASH в Ireg регистр ***********************************************/
void rd_ver(void)
{
for(unsigned char i=0;i<3;i++)
     f40:	82 17       	cp	r24, r18
     f42:	93 07       	cpc	r25, r19
     f44:	a1 f7       	brne	.-24     	; 0xf2e <rd_ver+0xc>
  {
	MB_Ireg[36+i] = (unsigned int) (pgm_read_byte(&fl_version[i*2]) << 8);
	MB_Ireg[36+i] |= pgm_read_byte(&fl_version[(i*2)+1]);
  }
}
     f46:	08 95       	ret

00000f48 <rd_ser>:
/************ Чтение серийного номера контроллера из FLASH в Ireg регистр ****************************************/
void rd_ser(void)
{
     f48:	8c e8       	ldi	r24, 0x8C	; 140
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a5 e5       	ldi	r26, 0x55	; 85
     f4e:	b2 e0       	ldi	r27, 0x02	; 2
     f50:	22 e9       	ldi	r18, 0x92	; 146
     f52:	30 e0       	ldi	r19, 0x00	; 0
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[39+i] = (unsigned int) (pgm_read_byte(&fl_progid[i*2]) << 8);
     f54:	fc 01       	movw	r30, r24
     f56:	44 91       	lpm	r20, Z
     f58:	31 96       	adiw	r30, 0x01	; 1
	MB_Ireg[39+i] |= pgm_read_byte(&fl_progid[(i*2)+1]);
     f5a:	e4 91       	lpm	r30, Z
/************ Чтение серийного номера контроллера из FLASH в Ireg регистр ****************************************/
void rd_ser(void)
{
for(unsigned char i=0;i<3;i++)
  {
	MB_Ireg[39+i] = (unsigned int) (pgm_read_byte(&fl_progid[i*2]) << 8);
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
	MB_Ireg[39+i] |= pgm_read_byte(&fl_progid[(i*2)+1]);
     f5e:	f4 2b       	or	r31, r20
     f60:	ed 93       	st	X+, r30
     f62:	fd 93       	st	X+, r31
     f64:	02 96       	adiw	r24, 0x02	; 2
  }
}
/************ Чтение серийного номера контроллера из FLASH в Ireg регистр ****************************************/
void rd_ser(void)
{
for(unsigned char i=0;i<3;i++)
     f66:	82 17       	cp	r24, r18
     f68:	93 07       	cpc	r25, r19
     f6a:	a1 f7       	brne	.-24     	; 0xf54 <rd_ser+0xc>
  {
	MB_Ireg[39+i] = (unsigned int) (pgm_read_byte(&fl_progid[i*2]) << 8);
	MB_Ireg[39+i] |= pgm_read_byte(&fl_progid[(i*2)+1]);
  }
}
     f6c:	08 95       	ret

00000f6e <rd_adr>:
//============================================================================================================================================

/************ Чтение адреса контроллера в ModBus сети из EEPROM в Hreg регистр ***********************************/
void rd_adr(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();						// Ждать готовности eeprom
     f6e:	f9 9b       	sbis	0x1f, 1	; 31
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <rd_adr+0x8>
     f72:	f9 99       	sbic	0x1f, 1	; 31
     f74:	fe cf       	rjmp	.-4      	; 0xf72 <rd_adr+0x4>
	WDR();
     f76:	a8 95       	wdr
	MB_Hreg[61] = (unsigned int) eeprom_read_byte(&MEM.Address_device); // Считаю сетевой адрес контроллера из EEPROM в ОЗУ			
     f78:	8e e2       	ldi	r24, 0x2E	; 46
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	90 93 b4 05 	sts	0x05B4, r25
     f86:	80 93 b3 05 	sts	0x05B3, r24
     f8a:	08 95       	ret

00000f8c <rd_par>:
}
/*** Чтение категории скорости и параметров в сети для контроллера, из EEPROM в Hreg регистр *********************/
void rd_par(void)
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
     f90:	f9 9b       	sbis	0x1f, 1	; 31
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <rd_par+0xc>
     f94:	f9 99       	sbic	0x1f, 1	; 31
     f96:	fe cf       	rjmp	.-4      	; 0xf94 <rd_par+0x8>
	WDR();
     f98:	a8 95       	wdr
	MB_Hreg[62] = eeprom_read_byte(&MEM.COM_Param) << 8;		// Считаю сначала параметры сети для контроллера и сдвиг т.к. это старший байт
     f9a:	80 e3       	ldi	r24, 0x30	; 48
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
     fa2:	c8 2f       	mov	r28, r24
     fa4:	d0 e0       	ldi	r29, 0x00	; 0
     fa6:	dc 2f       	mov	r29, r28
     fa8:	cc 27       	eor	r28, r28
     faa:	d0 93 b6 05 	sts	0x05B6, r29
     fae:	c0 93 b5 05 	sts	0x05B5, r28
	WDR();
     fb2:	a8 95       	wdr
	MB_Hreg[62] |= eeprom_read_byte(&MEM.COM_Speed);			// Считаю категорию скорости для контроллера и склеиваю со старшим.
     fb4:	8f e2       	ldi	r24, 0x2F	; 47
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
     fbc:	c8 2b       	or	r28, r24
     fbe:	d0 93 b6 05 	sts	0x05B6, r29
     fc2:	c0 93 b5 05 	sts	0x05B5, r28
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <rd_pwm>:
/*** Чтение категории работы ШИМ для контроллера (вывод №5, и №6), из EEPROM в Hreg регистр *********************/
void rd_pwm(void)
{
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
     fd0:	f9 9b       	sbis	0x1f, 1	; 31
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <rd_pwm+0xc>
     fd4:	f9 99       	sbic	0x1f, 1	; 31
     fd6:	fe cf       	rjmp	.-4      	; 0xfd4 <rd_pwm+0x8>
	WDR();
     fd8:	a8 95       	wdr
	MB_Hreg[34] = eeprom_read_byte(&MEM.PWM_Freq) << 8;		// Считаю сначала частоту ШИМ для контроллера и сдвиг т.к. это старший байт
     fda:	82 e3       	ldi	r24, 0x32	; 50
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
     fe2:	c8 2f       	mov	r28, r24
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	dc 2f       	mov	r29, r28
     fe8:	cc 27       	eor	r28, r28
     fea:	d0 93 7e 05 	sts	0x057E, r29
     fee:	c0 93 7d 05 	sts	0x057D, r28
	WDR();
     ff2:	a8 95       	wdr
	MB_Hreg[34] |= eeprom_read_byte(&MEM.PWM_Mode);			// Считаю Флаги активности ШИМ для контроллера и склеиваю со старшим.
     ff4:	81 e3       	ldi	r24, 0x31	; 49
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
     ffc:	c8 2b       	or	r28, r24
     ffe:	d0 93 7e 05 	sts	0x057E, r29
    1002:	c0 93 7d 05 	sts	0x057D, r28
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <rd_mcnt>:
//======================================== РАБОТА С СЧЕТНЫМИ ВХОДАМИ - ЧТЕНИЕ =========================================================

/****** Чтение значения режима работы цифровых входов контроллера из EEPROM в Hreg регистр ********************/
void rd_mcnt(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    100c:	f9 9b       	sbis	0x1f, 1	; 31
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <rd_mcnt+0x8>
    1010:	f9 99       	sbic	0x1f, 1	; 31
    1012:	fe cf       	rjmp	.-4      	; 0x1010 <rd_mcnt+0x4>
	WDR();
    1014:	a8 95       	wdr
	MB_Hreg[35] = (unsigned int) eeprom_read_byte(&MEM.INP_Mode); // Считаю значение режимов работы из EEPROM в ОЗУ
    1016:	83 e3       	ldi	r24, 0x33	; 51
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 80 05 	sts	0x0580, r25
    1024:	80 93 7f 05 	sts	0x057F, r24
    1028:	08 95       	ret

0000102a <rd_vcnt1>:
}
/****** Чтение значения счетчика для входа №1 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    102a:	f9 9b       	sbis	0x1f, 1	; 31
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <rd_vcnt1+0x8>
    102e:	f9 99       	sbic	0x1f, 1	; 31
    1030:	fe cf       	rjmp	.-4      	; 0x102e <rd_vcnt1+0x4>
	WDR();
    1032:	a8 95       	wdr
	MB_Hreg[36] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt1); // Считаю значение счетчика из EEPROM в ОЗУ
    1034:	84 e3       	ldi	r24, 0x34	; 52
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 82 05 	sts	0x0582, r25
    1042:	80 93 81 05 	sts	0x0581, r24
    1046:	08 95       	ret

00001048 <rd_vlcnt1>:
}
/****** Чтение младшего слова значения счетчика для входа №1 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    1048:	f9 9b       	sbis	0x1f, 1	; 31
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <rd_vlcnt1+0x8>
    104c:	f9 99       	sbic	0x1f, 1	; 31
    104e:	fe cf       	rjmp	.-4      	; 0x104c <rd_vlcnt1+0x4>
	WDR();
    1050:	a8 95       	wdr
	MB_Hreg[45] = eeprom_read_word(&MEM.LW_cnt1);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    1052:	8e e3       	ldi	r24, 0x3E	; 62
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    105a:	90 93 94 05 	sts	0x0594, r25
    105e:	80 93 93 05 	sts	0x0593, r24
    1062:	08 95       	ret

00001064 <rd_vhcnt1>:
}
/****** Чтение старшего слова значения счетчика для входа №1 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    1064:	f9 9b       	sbis	0x1f, 1	; 31
    1066:	02 c0       	rjmp	.+4      	; 0x106c <rd_vhcnt1+0x8>
    1068:	f9 99       	sbic	0x1f, 1	; 31
    106a:	fe cf       	rjmp	.-4      	; 0x1068 <rd_vhcnt1+0x4>
	WDR();
    106c:	a8 95       	wdr
	MB_Hreg[44] = eeprom_read_word(&MEM.HW_cnt1);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    106e:	8c e3       	ldi	r24, 0x3C	; 60
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    1076:	90 93 92 05 	sts	0x0592, r25
    107a:	80 93 91 05 	sts	0x0591, r24
    107e:	08 95       	ret

00001080 <rd_vcnt2>:
}

/****** Чтение значения счетчика для входа №2 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    1080:	f9 9b       	sbis	0x1f, 1	; 31
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <rd_vcnt2+0x8>
    1084:	f9 99       	sbic	0x1f, 1	; 31
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <rd_vcnt2+0x4>
	WDR();
    1088:	a8 95       	wdr
	MB_Hreg[37] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt2); // Считаю значение счетчика из EEPROM в ОЗУ
    108a:	85 e3       	ldi	r24, 0x35	; 53
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 84 05 	sts	0x0584, r25
    1098:	80 93 83 05 	sts	0x0583, r24
    109c:	08 95       	ret

0000109e <rd_vlcnt2>:
}
/****** Чтение младшего слова значения счетчика для входа №2 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    109e:	f9 9b       	sbis	0x1f, 1	; 31
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <rd_vlcnt2+0x8>
    10a2:	f9 99       	sbic	0x1f, 1	; 31
    10a4:	fe cf       	rjmp	.-4      	; 0x10a2 <rd_vlcnt2+0x4>
	WDR();
    10a6:	a8 95       	wdr
	MB_Hreg[47] = eeprom_read_word(&MEM.LW_cnt2);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    10a8:	82 e4       	ldi	r24, 0x42	; 66
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    10b0:	90 93 98 05 	sts	0x0598, r25
    10b4:	80 93 97 05 	sts	0x0597, r24
    10b8:	08 95       	ret

000010ba <rd_vhcnt2>:
}
/****** Чтение старшего слова значения счетчика для входа №2 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    10ba:	f9 9b       	sbis	0x1f, 1	; 31
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <rd_vhcnt2+0x8>
    10be:	f9 99       	sbic	0x1f, 1	; 31
    10c0:	fe cf       	rjmp	.-4      	; 0x10be <rd_vhcnt2+0x4>
	WDR();
    10c2:	a8 95       	wdr
	MB_Hreg[46] = eeprom_read_word(&MEM.HW_cnt2);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    10c4:	80 e4       	ldi	r24, 0x40	; 64
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    10cc:	90 93 96 05 	sts	0x0596, r25
    10d0:	80 93 95 05 	sts	0x0595, r24
    10d4:	08 95       	ret

000010d6 <rd_vcnt3>:
}

/****** Чтение значения счетчика для входа №3 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    10d6:	f9 9b       	sbis	0x1f, 1	; 31
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <rd_vcnt3+0x8>
    10da:	f9 99       	sbic	0x1f, 1	; 31
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <rd_vcnt3+0x4>
	WDR();
    10de:	a8 95       	wdr
	MB_Hreg[38] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt3); // Считаю значение счетчика из EEPROM в ОЗУ
    10e0:	86 e3       	ldi	r24, 0x36	; 54
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	90 93 86 05 	sts	0x0586, r25
    10ee:	80 93 85 05 	sts	0x0585, r24
    10f2:	08 95       	ret

000010f4 <rd_vlcnt3>:
}
/****** Чтение младшего слова значения счетчика для входа №3 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    10f4:	f9 9b       	sbis	0x1f, 1	; 31
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <rd_vlcnt3+0x8>
    10f8:	f9 99       	sbic	0x1f, 1	; 31
    10fa:	fe cf       	rjmp	.-4      	; 0x10f8 <rd_vlcnt3+0x4>
	WDR();
    10fc:	a8 95       	wdr
	MB_Hreg[49] = eeprom_read_word(&MEM.LW_cnt3);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    10fe:	86 e4       	ldi	r24, 0x46	; 70
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    1106:	90 93 9c 05 	sts	0x059C, r25
    110a:	80 93 9b 05 	sts	0x059B, r24
    110e:	08 95       	ret

00001110 <rd_vhcnt3>:
}
/****** Чтение старшего слова значения счетчика для входа №3 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    1110:	f9 9b       	sbis	0x1f, 1	; 31
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <rd_vhcnt3+0x8>
    1114:	f9 99       	sbic	0x1f, 1	; 31
    1116:	fe cf       	rjmp	.-4      	; 0x1114 <rd_vhcnt3+0x4>
	WDR();
    1118:	a8 95       	wdr
	MB_Hreg[48] = eeprom_read_word(&MEM.HW_cnt3);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    111a:	84 e4       	ldi	r24, 0x44	; 68
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    1122:	90 93 9a 05 	sts	0x059A, r25
    1126:	80 93 99 05 	sts	0x0599, r24
    112a:	08 95       	ret

0000112c <rd_vcnt4>:
}

/****** Чтение значения счетчика для входа №4 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt4(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    112c:	f9 9b       	sbis	0x1f, 1	; 31
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <rd_vcnt4+0x8>
    1130:	f9 99       	sbic	0x1f, 1	; 31
    1132:	fe cf       	rjmp	.-4      	; 0x1130 <rd_vcnt4+0x4>
	WDR();
    1134:	a8 95       	wdr
	MB_Hreg[39] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt4); // Считаю значение счетчика из EEPROM в ОЗУ
    1136:	87 e3       	ldi	r24, 0x37	; 55
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	90 93 88 05 	sts	0x0588, r25
    1144:	80 93 87 05 	sts	0x0587, r24
    1148:	08 95       	ret

0000114a <rd_vlcnt4>:
}
/****** Чтение младшего слова значения счетчика для входа №4 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt4(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    114a:	f9 9b       	sbis	0x1f, 1	; 31
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <rd_vlcnt4+0x8>
    114e:	f9 99       	sbic	0x1f, 1	; 31
    1150:	fe cf       	rjmp	.-4      	; 0x114e <rd_vlcnt4+0x4>
	WDR();
    1152:	a8 95       	wdr
	MB_Hreg[51] = eeprom_read_word(&MEM.LW_cnt4);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    1154:	8a e4       	ldi	r24, 0x4A	; 74
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    115c:	90 93 a0 05 	sts	0x05A0, r25
    1160:	80 93 9f 05 	sts	0x059F, r24
    1164:	08 95       	ret

00001166 <rd_vhcnt4>:
}
/****** Чтение старшего слова значения счетчика для входа №4 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt4(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    1166:	f9 9b       	sbis	0x1f, 1	; 31
    1168:	02 c0       	rjmp	.+4      	; 0x116e <rd_vhcnt4+0x8>
    116a:	f9 99       	sbic	0x1f, 1	; 31
    116c:	fe cf       	rjmp	.-4      	; 0x116a <rd_vhcnt4+0x4>
	WDR();
    116e:	a8 95       	wdr
	MB_Hreg[50] = eeprom_read_word(&MEM.HW_cnt4);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    1170:	88 e4       	ldi	r24, 0x48	; 72
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    1178:	90 93 9e 05 	sts	0x059E, r25
    117c:	80 93 9d 05 	sts	0x059D, r24
    1180:	08 95       	ret

00001182 <rd_vcnt5>:
}

/****** Чтение значения счетчика для входа №5 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt5(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    1182:	f9 9b       	sbis	0x1f, 1	; 31
    1184:	02 c0       	rjmp	.+4      	; 0x118a <rd_vcnt5+0x8>
    1186:	f9 99       	sbic	0x1f, 1	; 31
    1188:	fe cf       	rjmp	.-4      	; 0x1186 <rd_vcnt5+0x4>
	WDR();
    118a:	a8 95       	wdr
	MB_Hreg[40] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt5); // Считаю значение счетчика из EEPROM в ОЗУ
    118c:	88 e3       	ldi	r24, 0x38	; 56
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	90 93 8a 05 	sts	0x058A, r25
    119a:	80 93 89 05 	sts	0x0589, r24
    119e:	08 95       	ret

000011a0 <rd_vlcnt5>:
}
/****** Чтение младшего слова значения счетчика для входа №5 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt5(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    11a0:	f9 9b       	sbis	0x1f, 1	; 31
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <rd_vlcnt5+0x8>
    11a4:	f9 99       	sbic	0x1f, 1	; 31
    11a6:	fe cf       	rjmp	.-4      	; 0x11a4 <rd_vlcnt5+0x4>
	WDR();
    11a8:	a8 95       	wdr
	MB_Hreg[53] = eeprom_read_word(&MEM.LW_cnt5);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    11aa:	8e e4       	ldi	r24, 0x4E	; 78
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    11b2:	90 93 a4 05 	sts	0x05A4, r25
    11b6:	80 93 a3 05 	sts	0x05A3, r24
    11ba:	08 95       	ret

000011bc <rd_vhcnt5>:
}
/****** Чтение старшего слова значения счетчика для входа №5 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt5(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    11bc:	f9 9b       	sbis	0x1f, 1	; 31
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <rd_vhcnt5+0x8>
    11c0:	f9 99       	sbic	0x1f, 1	; 31
    11c2:	fe cf       	rjmp	.-4      	; 0x11c0 <rd_vhcnt5+0x4>
	WDR();
    11c4:	a8 95       	wdr
	MB_Hreg[52] = eeprom_read_word(&MEM.HW_cnt5);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    11c6:	8c e4       	ldi	r24, 0x4C	; 76
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    11ce:	90 93 a2 05 	sts	0x05A2, r25
    11d2:	80 93 a1 05 	sts	0x05A1, r24
    11d6:	08 95       	ret

000011d8 <rd_vcnt6>:
}

/****** Чтение значения счетчика для входа №6 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt6(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    11d8:	f9 9b       	sbis	0x1f, 1	; 31
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <rd_vcnt6+0x8>
    11dc:	f9 99       	sbic	0x1f, 1	; 31
    11de:	fe cf       	rjmp	.-4      	; 0x11dc <rd_vcnt6+0x4>
	WDR();
    11e0:	a8 95       	wdr
	MB_Hreg[41] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt6); // Считаю значение счетчика из EEPROM в ОЗУ
    11e2:	89 e3       	ldi	r24, 0x39	; 57
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 8c 05 	sts	0x058C, r25
    11f0:	80 93 8b 05 	sts	0x058B, r24
    11f4:	08 95       	ret

000011f6 <rd_vlcnt6>:
}
/****** Чтение младшего слова значения счетчика для входа №6 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt6(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    11f6:	f9 9b       	sbis	0x1f, 1	; 31
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <rd_vlcnt6+0x8>
    11fa:	f9 99       	sbic	0x1f, 1	; 31
    11fc:	fe cf       	rjmp	.-4      	; 0x11fa <rd_vlcnt6+0x4>
	WDR();
    11fe:	a8 95       	wdr
	MB_Hreg[55] = eeprom_read_word(&MEM.LW_cnt6);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    1200:	82 e5       	ldi	r24, 0x52	; 82
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    1208:	90 93 a8 05 	sts	0x05A8, r25
    120c:	80 93 a7 05 	sts	0x05A7, r24
    1210:	08 95       	ret

00001212 <rd_vhcnt6>:
}
/****** Чтение старшего слова значения счетчика для входа №6 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt6(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    1212:	f9 9b       	sbis	0x1f, 1	; 31
    1214:	02 c0       	rjmp	.+4      	; 0x121a <rd_vhcnt6+0x8>
    1216:	f9 99       	sbic	0x1f, 1	; 31
    1218:	fe cf       	rjmp	.-4      	; 0x1216 <rd_vhcnt6+0x4>
	WDR();
    121a:	a8 95       	wdr
	MB_Hreg[54] = eeprom_read_word(&MEM.HW_cnt6);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    121c:	80 e5       	ldi	r24, 0x50	; 80
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    1224:	90 93 a6 05 	sts	0x05A6, r25
    1228:	80 93 a5 05 	sts	0x05A5, r24
    122c:	08 95       	ret

0000122e <rd_vcnt7>:
}

/****** Чтение значения счетчика для входа №7 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt7(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    122e:	f9 9b       	sbis	0x1f, 1	; 31
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <rd_vcnt7+0x8>
    1232:	f9 99       	sbic	0x1f, 1	; 31
    1234:	fe cf       	rjmp	.-4      	; 0x1232 <rd_vcnt7+0x4>
	WDR();
    1236:	a8 95       	wdr
	MB_Hreg[42] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt7); // Считаю значение счетчика из EEPROM в ОЗУ
    1238:	8a e3       	ldi	r24, 0x3A	; 58
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	90 93 8e 05 	sts	0x058E, r25
    1246:	80 93 8d 05 	sts	0x058D, r24
    124a:	08 95       	ret

0000124c <rd_vlcnt7>:
}
/****** Чтение младшего слова значения счетчика для входа №7 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt7(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    124c:	f9 9b       	sbis	0x1f, 1	; 31
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <rd_vlcnt7+0x8>
    1250:	f9 99       	sbic	0x1f, 1	; 31
    1252:	fe cf       	rjmp	.-4      	; 0x1250 <rd_vlcnt7+0x4>
	WDR();
    1254:	a8 95       	wdr
	MB_Hreg[57] = eeprom_read_word(&MEM.LW_cnt7);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    1256:	86 e5       	ldi	r24, 0x56	; 86
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    125e:	90 93 ac 05 	sts	0x05AC, r25
    1262:	80 93 ab 05 	sts	0x05AB, r24
    1266:	08 95       	ret

00001268 <rd_vhcnt7>:
}
/****** Чтение старшего слова значения счетчика для входа №7 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt7(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    1268:	f9 9b       	sbis	0x1f, 1	; 31
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <rd_vhcnt7+0x8>
    126c:	f9 99       	sbic	0x1f, 1	; 31
    126e:	fe cf       	rjmp	.-4      	; 0x126c <rd_vhcnt7+0x4>
	WDR();
    1270:	a8 95       	wdr
	MB_Hreg[56] = eeprom_read_word(&MEM.HW_cnt7);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    1272:	84 e5       	ldi	r24, 0x54	; 84
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    127a:	90 93 aa 05 	sts	0x05AA, r25
    127e:	80 93 a9 05 	sts	0x05A9, r24
    1282:	08 95       	ret

00001284 <rd_vcnt8>:
}

/****** Чтение значения счетчика для входа №8 контроллера из EEPROM в Hreg регистр *****************************/
void rd_vcnt8(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();				// Ждать готовности eeprom
    1284:	f9 9b       	sbis	0x1f, 1	; 31
    1286:	02 c0       	rjmp	.+4      	; 0x128c <rd_vcnt8+0x8>
    1288:	f9 99       	sbic	0x1f, 1	; 31
    128a:	fe cf       	rjmp	.-4      	; 0x1288 <rd_vcnt8+0x4>
	WDR();
    128c:	a8 95       	wdr
	MB_Hreg[43] = (unsigned int) eeprom_read_byte(&MEM.CB_cnt8); // Считаю значение счетчика из EEPROM в ОЗУ
    128e:	8b e3       	ldi	r24, 0x3B	; 59
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__eerd_byte_m324pa>
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	90 93 90 05 	sts	0x0590, r25
    129c:	80 93 8f 05 	sts	0x058F, r24
    12a0:	08 95       	ret

000012a2 <rd_vlcnt8>:
}
/****** Чтение младшего слова значения счетчика для входа №8 контроллера из EEPROM в Hreg регистр *************/
void rd_vlcnt8(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    12a2:	f9 9b       	sbis	0x1f, 1	; 31
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <rd_vlcnt8+0x8>
    12a6:	f9 99       	sbic	0x1f, 1	; 31
    12a8:	fe cf       	rjmp	.-4      	; 0x12a6 <rd_vlcnt8+0x4>
	WDR();
    12aa:	a8 95       	wdr
	MB_Hreg[59] = eeprom_read_word(&MEM.LW_cnt8);			// Считаю мл слово опорного числа счетчика из EEPROM в ОЗУ
    12ac:	8a e5       	ldi	r24, 0x5A	; 90
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    12b4:	90 93 b0 05 	sts	0x05B0, r25
    12b8:	80 93 af 05 	sts	0x05AF, r24
    12bc:	08 95       	ret

000012be <rd_vhcnt8>:
}
/****** Чтение старшего слова значения счетчика для входа №8 контроллера из EEPROM в Hreg регистр *************/
void rd_vhcnt8(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();			// Ждать готовности eeprom
    12be:	f9 9b       	sbis	0x1f, 1	; 31
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <rd_vhcnt8+0x8>
    12c2:	f9 99       	sbic	0x1f, 1	; 31
    12c4:	fe cf       	rjmp	.-4      	; 0x12c2 <rd_vhcnt8+0x4>
	WDR();
    12c6:	a8 95       	wdr
	MB_Hreg[58] = eeprom_read_word(&MEM.HW_cnt8);			// Считаю ст слово опорного числа счетчика из EEPROM в ОЗУ
    12c8:	88 e5       	ldi	r24, 0x58	; 88
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__eerd_word_m324pa>
    12d0:	90 93 ae 05 	sts	0x05AE, r25
    12d4:	80 93 ad 05 	sts	0x05AD, r24
    12d8:	08 95       	ret

000012da <wr_adr>:
//------------------------------------------------------------------------------------------------------------------------- ЗАПИСЬ ---
/******************* Запись адреса контроллера в сети ModBus из Hreg в EEPROM ***********************************/
void wr_adr(void)
{
unsigned char b;
	b = (unsigned char) MB_Hreg[61];				// беру младший байт
    12da:	60 91 b3 05 	lds	r22, 0x05B3
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    12de:	f9 9b       	sbis	0x1f, 1	; 31
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <wr_adr+0xc>
    12e2:	f9 99       	sbic	0x1f, 1	; 31
    12e4:	fe cf       	rjmp	.-4      	; 0x12e2 <wr_adr+0x8>
	WDR();
    12e6:	a8 95       	wdr
	eeprom_write_byte(&MEM.Address_device,b);		// Записать значение в память EEPROM
    12e8:	8e e2       	ldi	r24, 0x2E	; 46
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    12f0:	08 95       	ret

000012f2 <wr_par>:
}
/******************* Запись параметров сети контроллера в ModBus из Hreg в EEPROM ******************************/
void wr_par(void)
{
	unsigned char b;
	b = (unsigned char) MB_Hreg[62];				// беру младший байт
    12f2:	60 91 b5 05 	lds	r22, 0x05B5
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    12f6:	f9 9b       	sbis	0x1f, 1	; 31
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <wr_par+0xc>
    12fa:	f9 99       	sbic	0x1f, 1	; 31
    12fc:	fe cf       	rjmp	.-4      	; 0x12fa <wr_par+0x8>
	WDR();
    12fe:	a8 95       	wdr
	eeprom_write_byte(&MEM.COM_Speed,b);			// Записать значение скорости в память EEPROM
    1300:	8f e2       	ldi	r24, 0x2F	; 47
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
	WDR();
    1308:	a8 95       	wdr
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    130a:	f9 9b       	sbis	0x1f, 1	; 31
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <wr_par+0x20>
    130e:	f9 99       	sbic	0x1f, 1	; 31
    1310:	fe cf       	rjmp	.-4      	; 0x130e <wr_par+0x1c>
	WDR();
    1312:	a8 95       	wdr
	b = (unsigned char) (MB_Hreg[62] >> 8);			// беру старший байт
    1314:	60 91 b6 05 	lds	r22, 0x05B6
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1318:	f9 9b       	sbis	0x1f, 1	; 31
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <wr_par+0x2e>
    131c:	f9 99       	sbic	0x1f, 1	; 31
    131e:	fe cf       	rjmp	.-4      	; 0x131c <wr_par+0x2a>
	WDR();
    1320:	a8 95       	wdr
	eeprom_write_byte(&MEM.COM_Param,b);			// Записать значение параметров в память EEPROM
    1322:	80 e3       	ldi	r24, 0x30	; 48
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    132a:	08 95       	ret

0000132c <wr_pwm>:

/******************* Запись параметров ШИМ контроллера в ModBus из Hreg в EEPROM ******************************/
void wr_pwm(void)
{
	unsigned char b;
	b = (unsigned char) MB_Hreg[34];				// беру младший байт
    132c:	60 91 7d 05 	lds	r22, 0x057D
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1330:	f9 9b       	sbis	0x1f, 1	; 31
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <wr_pwm+0xc>
    1334:	f9 99       	sbic	0x1f, 1	; 31
    1336:	fe cf       	rjmp	.-4      	; 0x1334 <wr_pwm+0x8>
	WDR();
    1338:	a8 95       	wdr
	eeprom_write_byte(&MEM.PWM_Mode,b);				// Записать значение активности выводов ШИМ в память EEPROM
    133a:	81 e3       	ldi	r24, 0x31	; 49
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
	WDR();
    1342:	a8 95       	wdr
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1344:	f9 9b       	sbis	0x1f, 1	; 31
    1346:	02 c0       	rjmp	.+4      	; 0x134c <wr_pwm+0x20>
    1348:	f9 99       	sbic	0x1f, 1	; 31
    134a:	fe cf       	rjmp	.-4      	; 0x1348 <wr_pwm+0x1c>
	WDR();
    134c:	a8 95       	wdr
	b = (unsigned char) (MB_Hreg[34] >> 8);			// беру старший байт
    134e:	60 91 7e 05 	lds	r22, 0x057E
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1352:	f9 9b       	sbis	0x1f, 1	; 31
    1354:	02 c0       	rjmp	.+4      	; 0x135a <wr_pwm+0x2e>
    1356:	f9 99       	sbic	0x1f, 1	; 31
    1358:	fe cf       	rjmp	.-4      	; 0x1356 <wr_pwm+0x2a>
	WDR();
    135a:	a8 95       	wdr
	eeprom_write_byte(&MEM.PWM_Freq,b);				// Записать значение скорости ШИМ в память EEPROM
    135c:	82 e3       	ldi	r24, 0x32	; 50
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    1364:	08 95       	ret

00001366 <wr_mcnt>:
//=========================================== РАБОТА С СЧЕТНЫМИ ВХОДАМИ - ЗАПИСЬ ================================================
//===============================================================================================================================
/******************* Запись режима работы входов контроллера из Hreg в EEPROM ******************************/
void wr_mcnt(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    1366:	f9 9b       	sbis	0x1f, 1	; 31
    1368:	02 c0       	rjmp	.+4      	; 0x136e <wr_mcnt+0x8>
    136a:	f9 99       	sbic	0x1f, 1	; 31
    136c:	fe cf       	rjmp	.-4      	; 0x136a <wr_mcnt+0x4>
	WDR();
    136e:	a8 95       	wdr
	eeprom_write_byte(&MEM.INP_Mode,(unsigned char) MB_Hreg[35]);	// Записать значение в память EEPROM
    1370:	60 91 7f 05 	lds	r22, 0x057F
    1374:	83 e3       	ldi	r24, 0x33	; 51
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    137c:	08 95       	ret

0000137e <wr_vcnt1>:
}

/********** Запись числа пересчета для счетного входа №1 контроллера из Hreg в EEPROM *********************/
void wr_vcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    137e:	f9 9b       	sbis	0x1f, 1	; 31
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <wr_vcnt1+0x8>
    1382:	f9 99       	sbic	0x1f, 1	; 31
    1384:	fe cf       	rjmp	.-4      	; 0x1382 <wr_vcnt1+0x4>
	WDR();
    1386:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt1,(unsigned char) MB_Hreg[36]);	// Записать значение в память EEPROM
    1388:	60 91 81 05 	lds	r22, 0x0581
    138c:	84 e3       	ldi	r24, 0x34	; 52
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    1394:	08 95       	ret

00001396 <wr_vlcnt1>:
}
/*** Запись значения младшего опорного числа для счетчика №1 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1396:	f9 9b       	sbis	0x1f, 1	; 31
    1398:	02 c0       	rjmp	.+4      	; 0x139e <wr_vlcnt1+0x8>
    139a:	f9 99       	sbic	0x1f, 1	; 31
    139c:	fe cf       	rjmp	.-4      	; 0x139a <wr_vlcnt1+0x4>
	WDR();
    139e:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt1,MB_Hreg[45]);	// Записать значение в память EEPROM
    13a0:	60 91 93 05 	lds	r22, 0x0593
    13a4:	70 91 94 05 	lds	r23, 0x0594
    13a8:	8e e3       	ldi	r24, 0x3E	; 62
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    13b0:	08 95       	ret

000013b2 <wr_vhcnt1>:
}
/*** Запись значения младшего опорного числа для счетчика №1 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt1(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    13b2:	f9 9b       	sbis	0x1f, 1	; 31
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <wr_vhcnt1+0x8>
    13b6:	f9 99       	sbic	0x1f, 1	; 31
    13b8:	fe cf       	rjmp	.-4      	; 0x13b6 <wr_vhcnt1+0x4>
	WDR();
    13ba:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt1,MB_Hreg[44]);	// Записать значение в память EEPROM
    13bc:	60 91 91 05 	lds	r22, 0x0591
    13c0:	70 91 92 05 	lds	r23, 0x0592
    13c4:	8c e3       	ldi	r24, 0x3C	; 60
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    13cc:	08 95       	ret

000013ce <wr_vcnt2>:
}

/********** Запись числа пересчета для счетного входа №2 контроллера из Hreg в EEPROM *********************/
void wr_vcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    13ce:	f9 9b       	sbis	0x1f, 1	; 31
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <wr_vcnt2+0x8>
    13d2:	f9 99       	sbic	0x1f, 1	; 31
    13d4:	fe cf       	rjmp	.-4      	; 0x13d2 <wr_vcnt2+0x4>
	WDR();
    13d6:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt2,(unsigned char) MB_Hreg[37]);	// Записать значение в память EEPROM
    13d8:	60 91 83 05 	lds	r22, 0x0583
    13dc:	85 e3       	ldi	r24, 0x35	; 53
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    13e4:	08 95       	ret

000013e6 <wr_vlcnt2>:
}
/*** Запись значения младшего опорного числа для счетчика №2 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    13e6:	f9 9b       	sbis	0x1f, 1	; 31
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <wr_vlcnt2+0x8>
    13ea:	f9 99       	sbic	0x1f, 1	; 31
    13ec:	fe cf       	rjmp	.-4      	; 0x13ea <wr_vlcnt2+0x4>
	WDR();
    13ee:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt2,MB_Hreg[47]);	// Записать значение в память EEPROM
    13f0:	60 91 97 05 	lds	r22, 0x0597
    13f4:	70 91 98 05 	lds	r23, 0x0598
    13f8:	82 e4       	ldi	r24, 0x42	; 66
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    1400:	08 95       	ret

00001402 <wr_vhcnt2>:
}
/*** Запись значения младшего опорного числа для счетчика №2 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt2(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1402:	f9 9b       	sbis	0x1f, 1	; 31
    1404:	02 c0       	rjmp	.+4      	; 0x140a <wr_vhcnt2+0x8>
    1406:	f9 99       	sbic	0x1f, 1	; 31
    1408:	fe cf       	rjmp	.-4      	; 0x1406 <wr_vhcnt2+0x4>
	WDR();
    140a:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt2,MB_Hreg[46]);	// Записать значение в память EEPROM
    140c:	60 91 95 05 	lds	r22, 0x0595
    1410:	70 91 96 05 	lds	r23, 0x0596
    1414:	80 e4       	ldi	r24, 0x40	; 64
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    141c:	08 95       	ret

0000141e <wr_vcnt3>:
}
/********** Запись числа пересчета для счетного входа №3 контроллера из Hreg в EEPROM *********************/
void wr_vcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    141e:	f9 9b       	sbis	0x1f, 1	; 31
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <wr_vcnt3+0x8>
    1422:	f9 99       	sbic	0x1f, 1	; 31
    1424:	fe cf       	rjmp	.-4      	; 0x1422 <wr_vcnt3+0x4>
	WDR();
    1426:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt3,(unsigned char) MB_Hreg[38]);	// Записать значение в память EEPROM
    1428:	60 91 85 05 	lds	r22, 0x0585
    142c:	86 e3       	ldi	r24, 0x36	; 54
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    1434:	08 95       	ret

00001436 <wr_vlcnt3>:
}
/*** Запись значения младшего опорного числа для счетчика №3 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1436:	f9 9b       	sbis	0x1f, 1	; 31
    1438:	02 c0       	rjmp	.+4      	; 0x143e <wr_vlcnt3+0x8>
    143a:	f9 99       	sbic	0x1f, 1	; 31
    143c:	fe cf       	rjmp	.-4      	; 0x143a <wr_vlcnt3+0x4>
	WDR();
    143e:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt3,MB_Hreg[49]);	// Записать значение в память EEPROM
    1440:	60 91 9b 05 	lds	r22, 0x059B
    1444:	70 91 9c 05 	lds	r23, 0x059C
    1448:	86 e4       	ldi	r24, 0x46	; 70
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    1450:	08 95       	ret

00001452 <wr_vhcnt3>:
}
/*** Запись значения младшего опорного числа для счетчика №3 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt3(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1452:	f9 9b       	sbis	0x1f, 1	; 31
    1454:	02 c0       	rjmp	.+4      	; 0x145a <wr_vhcnt3+0x8>
    1456:	f9 99       	sbic	0x1f, 1	; 31
    1458:	fe cf       	rjmp	.-4      	; 0x1456 <wr_vhcnt3+0x4>
	WDR();
    145a:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt3,MB_Hreg[48]);	// Записать значение в память EEPROM
    145c:	60 91 99 05 	lds	r22, 0x0599
    1460:	70 91 9a 05 	lds	r23, 0x059A
    1464:	84 e4       	ldi	r24, 0x44	; 68
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    146c:	08 95       	ret

0000146e <wr_vcnt4>:
}

/********** Запись числа пересчета для счетного входа №4 контроллера из Hreg в EEPROM *********************/
void wr_vcnt4(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    146e:	f9 9b       	sbis	0x1f, 1	; 31
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <wr_vcnt4+0x8>
    1472:	f9 99       	sbic	0x1f, 1	; 31
    1474:	fe cf       	rjmp	.-4      	; 0x1472 <wr_vcnt4+0x4>
	WDR();
    1476:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt4,(unsigned char) MB_Hreg[39]);	// Записать значение в память EEPROM
    1478:	60 91 87 05 	lds	r22, 0x0587
    147c:	87 e3       	ldi	r24, 0x37	; 55
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    1484:	08 95       	ret

00001486 <wr_vlcnt4>:
}
/*** Запись значения младшего опорного числа для счетчика №4 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt4(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1486:	f9 9b       	sbis	0x1f, 1	; 31
    1488:	02 c0       	rjmp	.+4      	; 0x148e <wr_vlcnt4+0x8>
    148a:	f9 99       	sbic	0x1f, 1	; 31
    148c:	fe cf       	rjmp	.-4      	; 0x148a <wr_vlcnt4+0x4>
	WDR();
    148e:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt4,MB_Hreg[51]);	// Записать значение в память EEPROM
    1490:	60 91 9f 05 	lds	r22, 0x059F
    1494:	70 91 a0 05 	lds	r23, 0x05A0
    1498:	8a e4       	ldi	r24, 0x4A	; 74
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    14a0:	08 95       	ret

000014a2 <wr_vhcnt4>:
}
/*** Запись значения младшего опорного числа для счетчика №4 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt4(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    14a2:	f9 9b       	sbis	0x1f, 1	; 31
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <wr_vhcnt4+0x8>
    14a6:	f9 99       	sbic	0x1f, 1	; 31
    14a8:	fe cf       	rjmp	.-4      	; 0x14a6 <wr_vhcnt4+0x4>
	WDR();
    14aa:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt4,MB_Hreg[50]);	// Записать значение в память EEPROM
    14ac:	60 91 9d 05 	lds	r22, 0x059D
    14b0:	70 91 9e 05 	lds	r23, 0x059E
    14b4:	88 e4       	ldi	r24, 0x48	; 72
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    14bc:	08 95       	ret

000014be <wr_vcnt5>:
}
/********** Запись числа пересчета для счетного входа №5 контроллера из Hreg в EEPROM *********************/
void wr_vcnt5(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    14be:	f9 9b       	sbis	0x1f, 1	; 31
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <wr_vcnt5+0x8>
    14c2:	f9 99       	sbic	0x1f, 1	; 31
    14c4:	fe cf       	rjmp	.-4      	; 0x14c2 <wr_vcnt5+0x4>
	WDR();
    14c6:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt5,(unsigned char) MB_Hreg[40]);	// Записать значение в память EEPROM
    14c8:	60 91 89 05 	lds	r22, 0x0589
    14cc:	88 e3       	ldi	r24, 0x38	; 56
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    14d4:	08 95       	ret

000014d6 <wr_vlcnt5>:
}
/*** Запись значения младшего опорного числа для счетчика №5 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt5(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    14d6:	f9 9b       	sbis	0x1f, 1	; 31
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <wr_vlcnt5+0x8>
    14da:	f9 99       	sbic	0x1f, 1	; 31
    14dc:	fe cf       	rjmp	.-4      	; 0x14da <wr_vlcnt5+0x4>
	WDR();
    14de:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt5,MB_Hreg[53]);	// Записать значение в память EEPROM
    14e0:	60 91 a3 05 	lds	r22, 0x05A3
    14e4:	70 91 a4 05 	lds	r23, 0x05A4
    14e8:	8e e4       	ldi	r24, 0x4E	; 78
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    14f0:	08 95       	ret

000014f2 <wr_vhcnt5>:
}
/*** Запись значения младшего опорного числа для счетчика №5 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt5(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    14f2:	f9 9b       	sbis	0x1f, 1	; 31
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <wr_vhcnt5+0x8>
    14f6:	f9 99       	sbic	0x1f, 1	; 31
    14f8:	fe cf       	rjmp	.-4      	; 0x14f6 <wr_vhcnt5+0x4>
	WDR();
    14fa:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt5,MB_Hreg[52]);	// Записать значение в память EEPROM
    14fc:	60 91 a1 05 	lds	r22, 0x05A1
    1500:	70 91 a2 05 	lds	r23, 0x05A2
    1504:	8c e4       	ldi	r24, 0x4C	; 76
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    150c:	08 95       	ret

0000150e <wr_vcnt6>:
}

/********** Запись числа пересчета для счетного входа №6 контроллера из Hreg в EEPROM *********************/
void wr_vcnt6(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    150e:	f9 9b       	sbis	0x1f, 1	; 31
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <wr_vcnt6+0x8>
    1512:	f9 99       	sbic	0x1f, 1	; 31
    1514:	fe cf       	rjmp	.-4      	; 0x1512 <wr_vcnt6+0x4>
	WDR();
    1516:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt6,(unsigned char) MB_Hreg[41]);	// Записать значение в память EEPROM
    1518:	60 91 8b 05 	lds	r22, 0x058B
    151c:	89 e3       	ldi	r24, 0x39	; 57
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    1524:	08 95       	ret

00001526 <wr_vlcnt6>:
}
/*** Запись значения младшего опорного числа для счетчика №6 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt6(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1526:	f9 9b       	sbis	0x1f, 1	; 31
    1528:	02 c0       	rjmp	.+4      	; 0x152e <wr_vlcnt6+0x8>
    152a:	f9 99       	sbic	0x1f, 1	; 31
    152c:	fe cf       	rjmp	.-4      	; 0x152a <wr_vlcnt6+0x4>
	WDR();
    152e:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt6,MB_Hreg[55]);	// Записать значение в память EEPROM
    1530:	60 91 a7 05 	lds	r22, 0x05A7
    1534:	70 91 a8 05 	lds	r23, 0x05A8
    1538:	82 e5       	ldi	r24, 0x52	; 82
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    1540:	08 95       	ret

00001542 <wr_vhcnt6>:
}
/*** Запись значения младшего опорного числа для счетчика №6 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt6(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    1542:	f9 9b       	sbis	0x1f, 1	; 31
    1544:	02 c0       	rjmp	.+4      	; 0x154a <wr_vhcnt6+0x8>
    1546:	f9 99       	sbic	0x1f, 1	; 31
    1548:	fe cf       	rjmp	.-4      	; 0x1546 <wr_vhcnt6+0x4>
	WDR();
    154a:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt6,MB_Hreg[54]);	// Записать значение в память EEPROM
    154c:	60 91 a5 05 	lds	r22, 0x05A5
    1550:	70 91 a6 05 	lds	r23, 0x05A6
    1554:	80 e5       	ldi	r24, 0x50	; 80
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    155c:	08 95       	ret

0000155e <wr_vlcnt7>:
	eeprom_write_byte(&MEM.CB_cnt7,(unsigned char) MB_Hreg[42]);	// Записать значение в память EEPROM
}
/*** Запись значения младшего опорного числа для счетчика №7 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt7(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    155e:	f9 9b       	sbis	0x1f, 1	; 31
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <wr_vlcnt7+0x8>
    1562:	f9 99       	sbic	0x1f, 1	; 31
    1564:	fe cf       	rjmp	.-4      	; 0x1562 <wr_vlcnt7+0x4>
	WDR();
    1566:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt7,MB_Hreg[57]);	// Записать значение в память EEPROM
    1568:	60 91 ab 05 	lds	r22, 0x05AB
    156c:	70 91 ac 05 	lds	r23, 0x05AC
    1570:	86 e5       	ldi	r24, 0x56	; 86
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    1578:	08 95       	ret

0000157a <wr_vhcnt7>:
}
/*** Запись значения младшего опорного числа для счетчика №7 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt7(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    157a:	f9 9b       	sbis	0x1f, 1	; 31
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <wr_vhcnt7+0x8>
    157e:	f9 99       	sbic	0x1f, 1	; 31
    1580:	fe cf       	rjmp	.-4      	; 0x157e <wr_vhcnt7+0x4>
	WDR();
    1582:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt7,MB_Hreg[56]);	// Записать значение в память EEPROM
    1584:	60 91 a9 05 	lds	r22, 0x05A9
    1588:	70 91 aa 05 	lds	r23, 0x05AA
    158c:	84 e5       	ldi	r24, 0x54	; 84
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    1594:	08 95       	ret

00001596 <wr_vcnt8>:
}

/********** Запись числа пересчета для счетного входа №8 контроллера из Hreg в EEPROM *********************/
void wr_vcnt8(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();					// Ждать готовности eeprom
    1596:	f9 9b       	sbis	0x1f, 1	; 31
    1598:	02 c0       	rjmp	.+4      	; 0x159e <wr_vcnt8+0x8>
    159a:	f9 99       	sbic	0x1f, 1	; 31
    159c:	fe cf       	rjmp	.-4      	; 0x159a <wr_vcnt8+0x4>
	WDR();
    159e:	a8 95       	wdr
	eeprom_write_byte(&MEM.CB_cnt8,(unsigned char) MB_Hreg[43]);	// Записать значение в память EEPROM
    15a0:	60 91 8f 05 	lds	r22, 0x058F
    15a4:	8b e3       	ldi	r24, 0x3B	; 59
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    15ac:	08 95       	ret

000015ae <wr_vlcnt8>:
}
/*** Запись значения младшего опорного числа для счетчика №8 контроллера из Hreg в EEPROM ******************/
void wr_vlcnt8(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    15ae:	f9 9b       	sbis	0x1f, 1	; 31
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <wr_vlcnt8+0x8>
    15b2:	f9 99       	sbic	0x1f, 1	; 31
    15b4:	fe cf       	rjmp	.-4      	; 0x15b2 <wr_vlcnt8+0x4>
	WDR();
    15b6:	a8 95       	wdr
	eeprom_write_word(&MEM.LW_cnt8,MB_Hreg[59]);	// Записать значение в память EEPROM
    15b8:	60 91 af 05 	lds	r22, 0x05AF
    15bc:	70 91 b0 05 	lds	r23, 0x05B0
    15c0:	8a e5       	ldi	r24, 0x5A	; 90
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    15c8:	08 95       	ret

000015ca <wr_vhcnt8>:
}
/*** Запись значения младшего опорного числа для счетчика №8 контроллера из Hreg в EEPROM ******************/
void wr_vhcnt8(void)
{
	if(eeprom_is_ready() == 0) eeprom_busy_wait();	// Ждать готовности eeprom
    15ca:	f9 9b       	sbis	0x1f, 1	; 31
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <wr_vhcnt8+0x8>
    15ce:	f9 99       	sbic	0x1f, 1	; 31
    15d0:	fe cf       	rjmp	.-4      	; 0x15ce <wr_vhcnt8+0x4>
	WDR();
    15d2:	a8 95       	wdr
	eeprom_write_word(&MEM.HW_cnt8,MB_Hreg[58]);	// Записать значение в память EEPROM
    15d4:	60 91 ad 05 	lds	r22, 0x05AD
    15d8:	70 91 ae 05 	lds	r23, 0x05AE
    15dc:	88 e5       	ldi	r24, 0x58	; 88
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__eewr_word_m324pa>
    15e4:	08 95       	ret

000015e6 <InitMem>:

/*************************************** Инициализация регистров из памяти ********************************/
void InitMem(void)
{
	// Заполняю структуру регистров INPUT
	rd_name();		// Имя контроллера
    15e6:	0e 94 7e 07 	call	0xefc	; 0xefc <rd_name>
	rd_ver();		// Версия ПО контроллера
    15ea:	0e 94 91 07 	call	0xf22	; 0xf22 <rd_ver>
	rd_ser();		// Серийный номер контроллера
    15ee:	0e 94 a4 07 	call	0xf48	; 0xf48 <rd_ser>
	// Заполняю структуру регистров HOLD
	rd_adr();		// Адрес контроллера в сети ModBus
    15f2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <rd_adr>
	rd_par();		// Параметры сети
    15f6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rd_par>
	rd_pwm();		// Параметры ШИМ для выхода №5 и №6
    15fa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <rd_pwm>
	rd_mcnt();		// указатель режима работы цифровых входов
    15fe:	0e 94 06 08 	call	0x100c	; 0x100c <rd_mcnt>
	rd_vcnt1();		// значение делителя для входа №1
    1602:	0e 94 15 08 	call	0x102a	; 0x102a <rd_vcnt1>
	rd_vcnt2();		// значение делителя для входа №2
    1606:	0e 94 40 08 	call	0x1080	; 0x1080 <rd_vcnt2>
	rd_vcnt3();		// значение делителя для входа №3
    160a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <rd_vcnt3>
	rd_vcnt4();		// значение делителя для входа №4
    160e:	0e 94 96 08 	call	0x112c	; 0x112c <rd_vcnt4>
	rd_vcnt5();		// значение делителя для входа №5
    1612:	0e 94 c1 08 	call	0x1182	; 0x1182 <rd_vcnt5>
	rd_vcnt6();		// значение делителя для входа №6
    1616:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <rd_vcnt6>
	rd_vcnt7();		// значение делителя для входа №7
    161a:	0e 94 17 09 	call	0x122e	; 0x122e <rd_vcnt7>
	rd_vcnt8();		// значение делителя для входа №8
    161e:	0e 94 42 09 	call	0x1284	; 0x1284 <rd_vcnt8>
	rd_vhcnt1();	// старшее слово опорного значения счетного входа №1
    1622:	0e 94 32 08 	call	0x1064	; 0x1064 <rd_vhcnt1>
	rd_vlcnt1();	// младшее слово опорного значения счетного входа №1
    1626:	0e 94 24 08 	call	0x1048	; 0x1048 <rd_vlcnt1>
	rd_vhcnt2();	// старшее слово опорного значения счетного входа №2
    162a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <rd_vhcnt2>
	rd_vlcnt2();	// младшее слово опорного значения счетного входа №2
    162e:	0e 94 4f 08 	call	0x109e	; 0x109e <rd_vlcnt2>
	rd_vhcnt3();	// старшее слово опорного значения счетного входа №3
    1632:	0e 94 88 08 	call	0x1110	; 0x1110 <rd_vhcnt3>
	rd_vlcnt3();	// младшее слово опорного значения счетного входа №3
    1636:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <rd_vlcnt3>
	rd_vhcnt4();	// старшее слово опорного значения счетного входа №4
    163a:	0e 94 b3 08 	call	0x1166	; 0x1166 <rd_vhcnt4>
	rd_vlcnt4();	// младшее слово опорного значения счетного входа №4
    163e:	0e 94 a5 08 	call	0x114a	; 0x114a <rd_vlcnt4>
	rd_vhcnt5();	// старшее слово опорного значения счетного входа №5
    1642:	0e 94 de 08 	call	0x11bc	; 0x11bc <rd_vhcnt5>
	rd_vlcnt5();	// младшее слово опорного значения счетного входа №5
    1646:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <rd_vlcnt5>
	rd_vhcnt6();	// старшее слово опорного значения счетного входа №6
    164a:	0e 94 09 09 	call	0x1212	; 0x1212 <rd_vhcnt6>
	rd_vlcnt6();	// младшее слово опорного значения счетного входа №6
    164e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <rd_vlcnt6>
	rd_vhcnt7();	// старшее слово опорного значения счетного входа №7
    1652:	0e 94 34 09 	call	0x1268	; 0x1268 <rd_vhcnt7>
	rd_vlcnt7();	// младшее слово опорного значения счетного входа №7
    1656:	0e 94 26 09 	call	0x124c	; 0x124c <rd_vlcnt7>
	rd_vhcnt8();	// старшее слово опорного значения счетного входа №8
    165a:	0e 94 5f 09 	call	0x12be	; 0x12be <rd_vhcnt8>
	rd_vlcnt8();	// младшее слово опорного значения счетного входа №8
    165e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <rd_vlcnt8>
    1662:	08 95       	ret

00001664 <__vector_16>:
//------------------------------------------------------------------------------------------
//======================== Прерывание по совпадению А таймера 0 ============================
// === пакет принят ===
//------------------------------------------------------------------------------------------
SIGNAL(TIMER0_COMPA_vect)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
	int temp;														//Вспомогательная переменная
	
	_Frame_pause=0;													//Обнуление флага превышения интервала 1.5 символа
    1680:	10 92 06 03 	sts	0x0306, r1
	for (temp=0; temp<_UART_RX_point; temp++) _UART_RX_dup[temp]=_UART_RX_Buf[temp];//Копирование приемного буфера
    1684:	20 91 00 01 	lds	r18, 0x0100
    1688:	30 91 01 01 	lds	r19, 0x0101
    168c:	12 16       	cp	r1, r18
    168e:	13 06       	cpc	r1, r19
    1690:	64 f4       	brge	.+24     	; 0x16aa <__vector_16+0x46>
    1692:	aa e3       	ldi	r26, 0x3A	; 58
    1694:	b4 e0       	ldi	r27, 0x04	; 4
    1696:	e5 e0       	ldi	r30, 0x05	; 5
    1698:	f1 e0       	ldi	r31, 0x01	; 1
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	4d 91       	ld	r20, X+
    16a0:	41 93       	st	Z+, r20
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	82 17       	cp	r24, r18
    16a6:	93 07       	cpc	r25, r19
    16a8:	d4 f3       	brlt	.-12     	; 0x169e <__vector_16+0x3a>
	_UART_RX_length=_UART_RX_point;								    //Вычисление длины принятой посылки
    16aa:	20 93 06 02 	sts	0x0206, r18
	_UART_RX_point=0;										        //Указатель приемного буфера на начало
    16ae:	10 92 01 01 	sts	0x0101, r1
    16b2:	10 92 00 01 	sts	0x0100, r1
	TCCR0A=0x00;													//Остановка таймера
    16b6:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x00;													//Остановка таймера
    16b8:	15 bc       	out	0x25, r1	; 37
	_UART_RX_end=1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 ff 02 	sts	0x02FF, r24
//	LD_on;										// вкл светодиод
}
    16c0:	ff 91       	pop	r31
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_17>:

//------------------------------------------------------------------------------------------
//======================== Прерывание по совпадению B таймера 0 ============================
//------------------------------------------------------------------------------------------
SIGNAL(TIMER0_COMPB_vect)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	8f 93       	push	r24
	_Frame_pause=1;														//Установить флаг превышения интервала 1.5 символа
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 06 03 	sts	0x0306, r24
}
    16ee:	8f 91       	pop	r24
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <_CRC_calc>:
//================================== Функция расчета контрольной суммы в протоколе Modbus RTU ====================================
//Функция принимает:
//*buf-указатель на массив в котором содержатся данные для расчета контрольной суммы
//Len-количество байт участвующих в расчете контрольной суммы
int _CRC_calc(char *buf, char Len)
{
    16fa:	38 2f       	mov	r19, r24
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
    16fc:	66 23       	and	r22, r22
    16fe:	d1 f0       	breq	.+52     	; 0x1734 <_CRC_calc+0x3a>
    1700:	e8 2f       	mov	r30, r24
    1702:	f9 2f       	mov	r31, r25
int _CRC_calc(char *buf, char Len)
{
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
	{
		CRC=CRC^*buf;														//"Исключающее или" (по алгоритму расчета CRC)
		buf++;																//Указатель на следующий байт
    1708:	48 e0       	ldi	r20, 0x08	; 8
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
	{
		CRC=CRC^*buf;														//"Исключающее или" (по алгоритму расчета CRC)
    170a:	21 91       	ld	r18, Z+
    170c:	82 27       	eor	r24, r18
		buf++;																//Указатель на следующий байт
    170e:	24 2f       	mov	r18, r20
		for (temp2=0; temp2<8; temp2++)										//Цикл для каждого бита в байте
		if ((CRC & 0x0001)==0) CRC=CRC>>1;									//Если младший бит в единице, просто сдвиг (по алгоритму расчета CRC)
    1710:	80 fd       	sbrc	r24, 0
    1712:	03 c0       	rjmp	.+6      	; 0x171a <_CRC_calc+0x20>
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <_CRC_calc+0x2c>
		else
		{
			CRC=CRC>>1;														//Сдвиг	и "Исключающее или" (по алгоритму расчета CRC)
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
			CRC=CRC^0xA001;													//Полином для "Исключающего или" 1010 0000 0000 0001
    171e:	51 e0       	ldi	r21, 0x01	; 1
    1720:	85 27       	eor	r24, r21
    1722:	50 ea       	ldi	r21, 0xA0	; 160
    1724:	95 27       	eor	r25, r21
    1726:	21 50       	subi	r18, 0x01	; 1
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
	{
		CRC=CRC^*buf;														//"Исключающее или" (по алгоритму расчета CRC)
		buf++;																//Указатель на следующий байт
		for (temp2=0; temp2<8; temp2++)										//Цикл для каждого бита в байте
    1728:	99 f7       	brne	.-26     	; 0x1710 <_CRC_calc+0x16>
    172a:	2e 2f       	mov	r18, r30
    172c:	23 1b       	sub	r18, r19
{
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
	for (temp=0; temp<Len; temp++)											//Цикл для всех байт участвующих в расчете
    172e:	26 17       	cp	r18, r22
    1730:	60 f3       	brcs	.-40     	; 0x170a <_CRC_calc+0x10>
    1732:	08 95       	ret
int _CRC_calc(char *buf, char Len)
{
	unsigned int CRC;														//Переменная для расчета контрольной суммы
	char temp,temp2;														//Вспомогательные переменные
	
	CRC=0xFFFF;																//Начальное значение CRC (по алгоритму расчета CRC)
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	9f ef       	ldi	r25, 0xFF	; 255
			CRC=CRC^0xA001;													//Полином для "Исключающего или" 1010 0000 0000 0001
		}
	}
	
	return CRC;																//Возврат расчитанной контрольной суммы
}
    1738:	08 95       	ret

0000173a <__vector_20>:
Description:  Ф-я вызывается по прерыванию - если принят байт в буфер UDR(прием завершен)
Output:       Data in NetRxData[]
new:		Принимаю весь пакет и ввожу дополнительную функцию проверки принятого пакета по ModBus
*****************************************************************************************************************************************/
ISR(USART0_RX_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
	unsigned char InByte; // Рабочий буфер - для принятого байта

	if (NET_UCSRA & ((1<<FE0)+(1<<DOR0))) {InByte = NET_UDR; return;} // При ошибке кадрирования и переполнении буфера
    174c:	80 91 c0 00 	lds	r24, 0x00C0
    1750:	88 71       	andi	r24, 0x18	; 24
    1752:	19 f0       	breq	.+6      	; 0x175a <__vector_20+0x20>
    1754:	80 91 c6 00 	lds	r24, 0x00C6
    1758:	26 c0       	rjmp	.+76     	; 0x17a6 <__vector_20+0x6c>
	InByte = NET_UDR;												//Чтение регистра приемника
    175a:	90 91 c6 00 	lds	r25, 0x00C6
	if (_Frame_pause==0)                                            //Если было превышение интервала 1.5 символа
    175e:	80 91 06 03 	lds	r24, 0x0306
    1762:	81 11       	cpse	r24, r1
    1764:	20 c0       	rjmp	.+64     	; 0x17a6 <__vector_20+0x6c>
	{
		_UART_RX_Buf[_UART_RX_point]=InByte;						//Записываю принятое в буфер
    1766:	e0 91 00 01 	lds	r30, 0x0100
    176a:	f0 91 01 01 	lds	r31, 0x0101
    176e:	e6 5c       	subi	r30, 0xC6	; 198
    1770:	fb 4f       	sbci	r31, 0xFB	; 251
    1772:	90 83       	st	Z, r25
		TIFR0|=(1<<OCF0A)|(1<<OCF0B);                               //Обнуление флага прерывания по таймеру (необходимо если прерывание возникло в момент выполнения данного обработчика)
    1774:	85 b3       	in	r24, 0x15	; 21
    1776:	86 60       	ori	r24, 0x06	; 6
    1778:	85 bb       	out	0x15, r24	; 21
		TCNT0=0;                                                    //Обнуление счетного регистра таймера
    177a:	16 bc       	out	0x26, r1	; 38
		TCCR0A=(1<<WGM01);											// Установка режима работы таймера "Сброс при совпадении"
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	84 bd       	out	0x24, r24	; 36
		TCCR0B=(1<<CS02);											//Установка коэффициента деления тактовой частоты 256
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	85 bd       	out	0x25, r24	; 37
		_UART_RX_point++;                                           //Увеличение счетчика принятых байт
    1784:	80 91 00 01 	lds	r24, 0x0100
    1788:	90 91 01 01 	lds	r25, 0x0101
    178c:	01 96       	adiw	r24, 0x01	; 1
		if (_UART_RX_point>=(COM_RX_BUFFER_SIZE-1)) _UART_RX_point=0; //Защита от длинной бессмысленной команды	
    178e:	8e 3f       	cpi	r24, 0xFE	; 254
    1790:	91 05       	cpc	r25, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <__vector_20+0x64>
		_UART_RX_Buf[_UART_RX_point]=InByte;						//Записываю принятое в буфер
		TIFR0|=(1<<OCF0A)|(1<<OCF0B);                               //Обнуление флага прерывания по таймеру (необходимо если прерывание возникло в момент выполнения данного обработчика)
		TCNT0=0;                                                    //Обнуление счетного регистра таймера
		TCCR0A=(1<<WGM01);											// Установка режима работы таймера "Сброс при совпадении"
		TCCR0B=(1<<CS02);											//Установка коэффициента деления тактовой частоты 256
		_UART_RX_point++;                                           //Увеличение счетчика принятых байт
    1794:	90 93 01 01 	sts	0x0101, r25
    1798:	80 93 00 01 	sts	0x0100, r24
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__vector_20+0x6c>
		if (_UART_RX_point>=(COM_RX_BUFFER_SIZE-1)) _UART_RX_point=0; //Защита от длинной бессмысленной команды	
    179e:	10 92 01 01 	sts	0x0101, r1
    17a2:	10 92 00 01 	sts	0x0100, r1
	}
	// Управление светодиодом
//	if((_UART_RX_point == 1) && (InByte == (Address_device & 0xFF))) LD_off;	// выкл светодиод если первый байт = адресу
}
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <COM_Init>:
//COM_param - Табличное значение параметров COM порта
//Функция возвращает:
//0x00-если все параметры заданы корректно, в противном случае 0xFF
//========================================================================================================================================
char COM_Init(char COM_speed,char COM_param)
{
    17b8:	8f 92       	push	r8
    17ba:	9f 92       	push	r9
    17bc:	af 92       	push	r10
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	cf 93       	push	r28
    17ca:	c6 2f       	mov	r28, r22
	unsigned char m;
	float temp;
	long Speed;
	switch (COM_speed)
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	fc 01       	movw	r30, r24
    17d0:	33 97       	sbiw	r30, 0x03	; 3
    17d2:	e8 30       	cpi	r30, 0x08	; 8
    17d4:	f1 05       	cpc	r31, r1
    17d6:	70 f5       	brcc	.+92     	; 0x1834 <COM_Init+0x7c>
    17d8:	e2 5c       	subi	r30, 0xC2	; 194
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__tablejump2__>
		{
			case 0x03: Speed=1200;   break;
			case 0x04: Speed=2400;   break;
			case 0x05: Speed=4800;   break;
			case 0x06: Speed=9600;   break;
    17e0:	0f 2e       	mov	r0, r31
    17e2:	f0 e8       	ldi	r31, 0x80	; 128
    17e4:	cf 2e       	mov	r12, r31
    17e6:	f5 e2       	ldi	r31, 0x25	; 37
    17e8:	df 2e       	mov	r13, r31
    17ea:	e1 2c       	mov	r14, r1
    17ec:	f1 2c       	mov	r15, r1
    17ee:	f0 2d       	mov	r31, r0
    17f0:	32 c0       	rjmp	.+100    	; 0x1856 <COM_Init+0x9e>
			case 0x07: Speed=19200;  break;
    17f2:	0f 2e       	mov	r0, r31
    17f4:	c1 2c       	mov	r12, r1
    17f6:	fb e4       	ldi	r31, 0x4B	; 75
    17f8:	df 2e       	mov	r13, r31
    17fa:	e1 2c       	mov	r14, r1
    17fc:	f1 2c       	mov	r15, r1
    17fe:	f0 2d       	mov	r31, r0
    1800:	2a c0       	rjmp	.+84     	; 0x1856 <COM_Init+0x9e>
			case 0x08: Speed=38400;  break;
    1802:	0f 2e       	mov	r0, r31
    1804:	c1 2c       	mov	r12, r1
    1806:	f6 e9       	ldi	r31, 0x96	; 150
    1808:	df 2e       	mov	r13, r31
    180a:	e1 2c       	mov	r14, r1
    180c:	f1 2c       	mov	r15, r1
    180e:	f0 2d       	mov	r31, r0
    1810:	22 c0       	rjmp	.+68     	; 0x1856 <COM_Init+0x9e>
			case 0x09: Speed=57600;  break;
    1812:	0f 2e       	mov	r0, r31
    1814:	c1 2c       	mov	r12, r1
    1816:	f1 ee       	ldi	r31, 0xE1	; 225
    1818:	df 2e       	mov	r13, r31
    181a:	e1 2c       	mov	r14, r1
    181c:	f1 2c       	mov	r15, r1
    181e:	f0 2d       	mov	r31, r0
    1820:	1a c0       	rjmp	.+52     	; 0x1856 <COM_Init+0x9e>
			case 0x0A: Speed=115200; break;
    1822:	0f 2e       	mov	r0, r31
    1824:	c1 2c       	mov	r12, r1
    1826:	f2 ec       	ldi	r31, 0xC2	; 194
    1828:	df 2e       	mov	r13, r31
    182a:	ee 24       	eor	r14, r14
    182c:	e3 94       	inc	r14
    182e:	f1 2c       	mov	r15, r1
    1830:	f0 2d       	mov	r31, r0
    1832:	11 c0       	rjmp	.+34     	; 0x1856 <COM_Init+0x9e>
			default: {Speed=9600; }
    1834:	0f 2e       	mov	r0, r31
    1836:	f0 e8       	ldi	r31, 0x80	; 128
    1838:	cf 2e       	mov	r12, r31
    183a:	f5 e2       	ldi	r31, 0x25	; 37
    183c:	df 2e       	mov	r13, r31
    183e:	e1 2c       	mov	r14, r1
    1840:	f1 2c       	mov	r15, r1
    1842:	f0 2d       	mov	r31, r0
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <COM_Init+0x9e>
	unsigned char m;
	float temp;
	long Speed;
	switch (COM_speed)
		{
			case 0x03: Speed=1200;   break;
    1846:	0f 2e       	mov	r0, r31
    1848:	f0 eb       	ldi	r31, 0xB0	; 176
    184a:	cf 2e       	mov	r12, r31
    184c:	f4 e0       	ldi	r31, 0x04	; 4
    184e:	df 2e       	mov	r13, r31
    1850:	e1 2c       	mov	r14, r1
    1852:	f1 2c       	mov	r15, r1
    1854:	f0 2d       	mov	r31, r0
			default: {Speed=9600; }
		}
	
	if ((Speed<=0) || (Speed>1000000)) return 0xFF;					//Если не верно задана скорость
	
	temp=(float)F_CPU/Speed/16-0.5;									//Расчет значения регистра скорости UART
    1856:	c7 01       	movw	r24, r14
    1858:	b6 01       	movw	r22, r12
    185a:	0e 94 16 14 	call	0x282c	; 0x282c <__floatsisf>
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	81 e6       	ldi	r24, 0x61	; 97
    1868:	9b e4       	ldi	r25, 0x4B	; 75
    186a:	0e 94 80 13 	call	0x2700	; 0x2700 <__divsf3>
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5d e3       	ldi	r21, 0x3D	; 61
    1876:	0e 94 a6 14 	call	0x294c	; 0x294c <__mulsf3>
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 1b 13 	call	0x2636	; 0x2636 <__subsf3>
    1886:	4b 01       	movw	r8, r22
    1888:	5c 01       	movw	r10, r24
	if (temp>=0.5)													//Если скорость допустимая для данного кварца
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 a2 14 	call	0x2944	; 0x2944 <__gesf2>
    1896:	88 23       	and	r24, r24
    1898:	0c f4       	brge	.+2      	; 0x189c <COM_Init+0xe4>
    189a:	99 c0       	rjmp	.+306    	; 0x19ce <COM_Init+0x216>
	{
			NET_UBRRH =(unsigned long)temp>>8;
    189c:	c5 01       	movw	r24, r10
    189e:	b4 01       	movw	r22, r8
    18a0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
    18a4:	87 2e       	mov	r8, r23
    18a6:	98 2e       	mov	r9, r24
    18a8:	a9 2e       	mov	r10, r25
    18aa:	bb 24       	eor	r11, r11
    18ac:	80 92 c5 00 	sts	0x00C5, r8
			NET_UBRRL =(unsigned long)temp & 0x000000FF;
    18b0:	60 93 c4 00 	sts	0x00C4, r22
	}
	else return 0xFF;												//иначе, выход с ошибкой

	switch (COM_param)
    18b4:	c2 30       	cpi	r28, 0x02	; 2
    18b6:	41 f0       	breq	.+16     	; 0x18c8 <COM_Init+0x110>
    18b8:	c3 30       	cpi	r28, 0x03	; 3
    18ba:	51 f0       	breq	.+20     	; 0x18d0 <COM_Init+0x118>
    18bc:	c1 30       	cpi	r28, 0x01	; 1
    18be:	61 f4       	brne	.+24     	; 0x18d8 <COM_Init+0x120>
		{
			case 0x01: NET_UCSRC = (1<<UMSEL01)+(1<<UPM01)+(1<<USBS0)+(1<<UCSZ01)+(1<<UCSZ00); break;	// 8 bit, 2 стоп бита, event(8E2)
    18c0:	8e ea       	ldi	r24, 0xAE	; 174
    18c2:	80 93 c2 00 	sts	0x00C2, r24
    18c6:	0b c0       	rjmp	.+22     	; 0x18de <COM_Init+0x126>
			case 0x02: NET_UCSRC = (1<<UMSEL01)+(1<<UCSZ01)+(1<<UCSZ00); break;							// 8 bit, 1 стоп бита, none (8N1)
    18c8:	86 e8       	ldi	r24, 0x86	; 134
    18ca:	80 93 c2 00 	sts	0x00C2, r24
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <COM_Init+0x126>
			case 0x03: NET_UCSRC = (1<<UMSEL01)+(1<<USBS0)+(1<<UCSZ01)+(1<<UCSZ00); break;				// 8 bit, 2 стоп бита, none (8N2)
    18d0:	8e e8       	ldi	r24, 0x8E	; 142
    18d2:	80 93 c2 00 	sts	0x00C2, r24
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <COM_Init+0x126>
			default:   NET_UCSRC = (1<<UMSEL01)+(1<<UPM01)+(1<<UCSZ01)+(1<<UCSZ00);						// 8 bit, 1 стоп бита, event(8E1)
    18d8:	86 ea       	ldi	r24, 0xA6	; 166
    18da:	80 93 c2 00 	sts	0x00C2, r24
		}
	NET_UCSRB=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<TXCIE0);	//Настройка приемо-передатчика(разрешить RX, TX и прерывания)
    18de:	88 ed       	ldi	r24, 0xD8	; 216
    18e0:	80 93 c1 00 	sts	0x00C1, r24
		
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
    18e4:	e6 ec       	ldi	r30, 0xC6	; 198
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
    18ea:	80 81       	ld	r24, Z
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
    18ec:	80 81       	ld	r24, Z
	m = NET_UDR; // Считать и очичтить от барахла!!! Иначе подвисает))))
    18ee:	80 81       	ld	r24, Z
	
	// --- Настройка выводов контроллера для работы с RS485 ---
	NET_PORT&=~(1<<NET_TX);									// на TX - выходе - 0
    18f0:	59 98       	cbi	0x0b, 1	; 11
	NET_DDR|=(1<<NET_TX);									// вывод TX - выход
    18f2:	51 9a       	sbi	0x0a, 1	; 10
	NET_PORT|=(1<<NET_RX);									// RX - подтянут к +
    18f4:	58 9a       	sbi	0x0b, 0	; 11
	NET_DDR&=~(1<<NET_RX);									// Вывод RX - вход
    18f6:	50 98       	cbi	0x0a, 0	; 10
	NET_PORT&=~(1<<NET_TXE);								// Переключить UART0 на прием, на RXE - 0
    18f8:	5a 98       	cbi	0x0b, 2	; 11
	NET_DDR|=(1<<NET_TXE);									// Настройка линии управления драйвером RS485, вывод RXE - выход
    18fa:	52 9a       	sbi	0x0a, 2	; 10
    18fc:	ea e3       	ldi	r30, 0x3A	; 58
    18fe:	f4 e0       	ldi	r31, 0x04	; 4
    1900:	89 e3       	ldi	r24, 0x39	; 57
    1902:	95 e0       	ldi	r25, 0x05	; 5
		
	// Очистить рабочие буфера
	for(m=0;m<COM_RX_BUFFER_SIZE;m++) {_UART_RX_Buf[m] = 0;}
    1904:	11 92       	st	Z+, r1
    1906:	e8 17       	cp	r30, r24
    1908:	f9 07       	cpc	r31, r25
    190a:	e1 f7       	brne	.-8      	; 0x1904 <COM_Init+0x14c>
    190c:	e5 e0       	ldi	r30, 0x05	; 5
    190e:	f1 e0       	ldi	r31, 0x01	; 1
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	92 e0       	ldi	r25, 0x02	; 2
	for(m=0;m<COM_RX_BUFFER_SIZE;m++) {_UART_RX_dup[m] = 0;}
    1914:	11 92       	st	Z+, r1
    1916:	e8 17       	cp	r30, r24
    1918:	f9 07       	cpc	r31, r25
    191a:	e1 f7       	brne	.-8      	; 0x1914 <COM_Init+0x15c>
    191c:	e7 e0       	ldi	r30, 0x07	; 7
    191e:	f3 e0       	ldi	r31, 0x03	; 3
    1920:	86 e0       	ldi	r24, 0x06	; 6
    1922:	94 e0       	ldi	r25, 0x04	; 4
	for(m=0;m<COM_TX_BUFFER_SIZE;m++) {_UART_TX_Buf[m] = 0;}
    1924:	11 92       	st	Z+, r1
    1926:	e8 17       	cp	r30, r24
    1928:	f9 07       	cpc	r31, r25
    192a:	e1 f7       	brne	.-8      	; 0x1924 <COM_Init+0x16c>
	
	_UART_RX_point=0;										//Указатель на начало буфера
    192c:	10 92 01 01 	sts	0x0101, r1
    1930:	10 92 00 01 	sts	0x0100, r1
	_UART_RX_end=0;											//Сбросить признак окончания приема
    1934:	10 92 ff 02 	sts	0x02FF, r1
	_UART_TX_end=1;											//Установить флаг завершения предачи
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 00 03 	sts	0x0300, r24
		
	// Настраиваю работу таймера0
	if (Speed>=19200) Speed=19200;							//Если значение скорости 19200 бит/сек или больше, длительность тишины равна 1.75 мс.
    193e:	c1 14       	cp	r12, r1
    1940:	8b e4       	ldi	r24, 0x4B	; 75
    1942:	d8 06       	cpc	r13, r24
    1944:	e1 04       	cpc	r14, r1
    1946:	f1 04       	cpc	r15, r1
    1948:	3c f0       	brlt	.+14     	; 0x1958 <COM_Init+0x1a0>
    194a:	0f 2e       	mov	r0, r31
    194c:	c1 2c       	mov	r12, r1
    194e:	fb e4       	ldi	r31, 0x4B	; 75
    1950:	df 2e       	mov	r13, r31
    1952:	e1 2c       	mov	r14, r1
    1954:	f1 2c       	mov	r15, r1
    1956:	f0 2d       	mov	r31, r0
	OCR0A=35*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 3.5 символов
    1958:	c7 01       	movw	r24, r14
    195a:	b6 01       	movw	r22, r12
    195c:	0e 94 16 14 	call	0x282c	; 0x282c <__floatsisf>
    1960:	6b 01       	movw	r12, r22
    1962:	7c 01       	movw	r14, r24
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	78 e1       	ldi	r23, 0x18	; 24
    196c:	86 ef       	ldi	r24, 0xF6	; 246
    196e:	9d e4       	ldi	r25, 0x4D	; 77
    1970:	0e 94 80 13 	call	0x2700	; 0x2700 <__divsf3>
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5b e3       	ldi	r21, 0x3B	; 59
    197c:	0e 94 a6 14 	call	0x294c	; 0x294c <__mulsf3>
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 1c 13 	call	0x2638	; 0x2638 <__addsf3>
    198c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
    1990:	67 bd       	out	0x27, r22	; 39
	OCR0B=15*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 1.5 символов
    1992:	a7 01       	movw	r20, r14
    1994:	96 01       	movw	r18, r12
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	70 ef       	ldi	r23, 0xF0	; 240
    199a:	82 e5       	ldi	r24, 0x52	; 82
    199c:	9d e4       	ldi	r25, 0x4D	; 77
    199e:	0e 94 80 13 	call	0x2700	; 0x2700 <__divsf3>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5b e3       	ldi	r21, 0x3B	; 59
    19aa:	0e 94 a6 14 	call	0x294c	; 0x294c <__mulsf3>
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 1c 13 	call	0x2638	; 0x2638 <__addsf3>
    19ba:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
    19be:	68 bd       	out	0x28, r22	; 40
	TIMSK0|=(1<<OCIE0A)|(1<<OCIE0B);						//Разрешение прерывание по совпадению А и B таймера 0
    19c0:	ee e6       	ldi	r30, 0x6E	; 110
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	86 60       	ori	r24, 0x06	; 6
    19c8:	80 83       	st	Z, r24
	return 0;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <COM_Init+0x23e>
	if (temp>=0.5)													//Если скорость допустимая для данного кварца
	{
			NET_UBRRH =(unsigned long)temp>>8;
			NET_UBRRL =(unsigned long)temp & 0x000000FF;
	}
	else return 0xFF;												//иначе, выход с ошибкой
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	12 c0       	rjmp	.+36     	; 0x19f6 <COM_Init+0x23e>
	float temp;
	long Speed;
	switch (COM_speed)
		{
			case 0x03: Speed=1200;   break;
			case 0x04: Speed=2400;   break;
    19d2:	0f 2e       	mov	r0, r31
    19d4:	f0 e6       	ldi	r31, 0x60	; 96
    19d6:	cf 2e       	mov	r12, r31
    19d8:	f9 e0       	ldi	r31, 0x09	; 9
    19da:	df 2e       	mov	r13, r31
    19dc:	e1 2c       	mov	r14, r1
    19de:	f1 2c       	mov	r15, r1
    19e0:	f0 2d       	mov	r31, r0
    19e2:	39 cf       	rjmp	.-398    	; 0x1856 <COM_Init+0x9e>
			case 0x05: Speed=4800;   break;
    19e4:	0f 2e       	mov	r0, r31
    19e6:	f0 ec       	ldi	r31, 0xC0	; 192
    19e8:	cf 2e       	mov	r12, r31
    19ea:	f2 e1       	ldi	r31, 0x12	; 18
    19ec:	df 2e       	mov	r13, r31
    19ee:	e1 2c       	mov	r14, r1
    19f0:	f1 2c       	mov	r15, r1
    19f2:	f0 2d       	mov	r31, r0
    19f4:	30 cf       	rjmp	.-416    	; 0x1856 <COM_Init+0x9e>
	if (Speed>=19200) Speed=19200;							//Если значение скорости 19200 бит/сек или больше, длительность тишины равна 1.75 мс.
	OCR0A=35*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 3.5 символов
	OCR0B=15*(float)F_CPU/Speed/256+0.5;					//Расчет длительности 1.5 символов
	TIMSK0|=(1<<OCIE0A)|(1<<OCIE0B);						//Разрешение прерывание по совпадению А и B таймера 0
	return 0;
}
    19f6:	cf 91       	pop	r28
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	bf 90       	pop	r11
    1a02:	af 90       	pop	r10
    1a04:	9f 90       	pop	r9
    1a06:	8f 90       	pop	r8
    1a08:	08 95       	ret

00001a0a <_UART_Go>:
//Len - Длина передаваемых данных

void _UART_Go(int Len)
{
//	LD_off;													// выкл светодиод
	_UART_TX_length=Len;									//Длина передаваемых данных
    1a0a:	80 93 39 04 	sts	0x0439, r24
	_UART_TX_point=0;										//Позиция в передающем буфере
    1a0e:	10 92 03 01 	sts	0x0103, r1
    1a12:	10 92 02 01 	sts	0x0102, r1
	_UART_TX_end=0;											//Сброс флага окончания передачи (отправка новой посылки)
    1a16:	10 92 00 03 	sts	0x0300, r1
	NET_UCSRB |= (1<<UDRIE0); 								// Разрешить прерывание при очистке буфера
    1a1a:	e1 ec       	ldi	r30, 0xC1	; 193
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 62       	ori	r24, 0x20	; 32
    1a22:	80 83       	st	Z, r24
	NET_PORT |= (1 << NET_TXE);								// Активизировать передачу по RS485
    1a24:	5a 9a       	sbi	0x0b, 2	; 11
    1a26:	08 95       	ret

00001a28 <__vector_21>:
/********************************************************************************************************************************************
Name:         void NetTxByte(void)
Description:  Ф-я вызывается по прерыванию - буфер UDR пуст
*********************************************************************************************************************************************/
ISR(USART0_UDRE_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	2f 93       	push	r18
    1a34:	3f 93       	push	r19
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
  if (_UART_TX_point!=_UART_TX_length)			// если отправлена не вся посылка
    1a3e:	20 91 39 04 	lds	r18, 0x0439
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	80 91 02 01 	lds	r24, 0x0102
    1a48:	90 91 03 01 	lds	r25, 0x0103
    1a4c:	28 17       	cp	r18, r24
    1a4e:	39 07       	cpc	r19, r25
    1a50:	a9 f0       	breq	.+42     	; 0x1a7c <__vector_21+0x54>
  {
    asm("wdr");
    1a52:	a8 95       	wdr
    NET_PORT |= NET_TXE;						// Активизировать передачу
    1a54:	59 9a       	sbi	0x0b, 1	; 11
    NET_UDR = _UART_TX_Buf[_UART_TX_point];		//Отправка байта по UART
    1a56:	e0 91 02 01 	lds	r30, 0x0102
    1a5a:	f0 91 03 01 	lds	r31, 0x0103
    1a5e:	e9 5f       	subi	r30, 0xF9	; 249
    1a60:	fc 4f       	sbci	r31, 0xFC	; 252
    1a62:	80 81       	ld	r24, Z
    1a64:	80 93 c6 00 	sts	0x00C6, r24
    _UART_TX_point++;							// Увеличить указатель
    1a68:	80 91 02 01 	lds	r24, 0x0102
    1a6c:	90 91 03 01 	lds	r25, 0x0103
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	90 93 03 01 	sts	0x0103, r25
    1a76:	80 93 02 01 	sts	0x0102, r24
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <__vector_21+0x5e>
  }
  else NET_UCSRB &= ~(1<<UDRIE0);  /* Запретить прерывания TX если вся посылка передана*/
    1a7c:	e1 ec       	ldi	r30, 0xC1	; 193
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 7d       	andi	r24, 0xDF	; 223
    1a84:	80 83       	st	Z, r24
}
    1a86:	ff 91       	pop	r31
    1a88:	ef 91       	pop	r30
    1a8a:	9f 91       	pop	r25
    1a8c:	8f 91       	pop	r24
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	18 95       	reti

00001a9c <__vector_22>:
/********************************************************************************************************************************************
Description:  Ф-я вызывается по прерыванию - передача завершена
              TxBuffer были переданы в NET.
*********************************************************************************************************************************************/
ISR(USART0_TX_vect)
{
    1a9c:	1f 92       	push	r1
    1a9e:	0f 92       	push	r0
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	0f 92       	push	r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	8f 93       	push	r24
//  LD_on;							// вкл светодиод
  NET_PORT &= ~(1 << NET_TXE);		// Переключить в режим приема RS485
    1aa8:	5a 98       	cbi	0x0b, 2	; 11
  _UART_TX_end=1;					//Установить флаг завершения передачи
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 00 03 	sts	0x0300, r24
}
    1ab0:	8f 91       	pop	r24
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <Read_Modbus>:
* Два байта контрольной суммы включены в данный массив.
* Нулевой элемент выходного массива содержит количество прочитаных байт, считая байты контрольной суммы.
****************************************************************************************************************************************/

char Read_Modbus(void)
{
    1abc:	cf 93       	push	r28
	unsigned int CRC;									//Переменная для контрольной суммы
//	int temp;
	
	if (_UART_RX_end==0) return 0;						//Выход если признак окончания приема пакета не установлен	
    1abe:	80 91 ff 02 	lds	r24, 0x02FF
    1ac2:	88 23       	and	r24, r24
    1ac4:	49 f1       	breq	.+82     	; 0x1b18 <Read_Modbus+0x5c>
	_UART_RX_end=0;										//Сброс флага окончания приема
    1ac6:	10 92 ff 02 	sts	0x02FF, r1
	if(_UART_RX_Buf[0] != Address_device) return 0xFD;	// если адрес не наш
    1aca:	90 91 3a 04 	lds	r25, 0x043A
    1ace:	80 91 05 03 	lds	r24, 0x0305
    1ad2:	98 13       	cpse	r25, r24
    1ad4:	23 c0       	rjmp	.+70     	; 0x1b1c <Read_Modbus+0x60>
	if(_UART_RX_length<=5) return 0xFE;
    1ad6:	c0 91 06 02 	lds	r28, 0x0206
    1ada:	c6 30       	cpi	r28, 0x06	; 6
    1adc:	08 f1       	brcs	.+66     	; 0x1b20 <Read_Modbus+0x64>
	CRC=_CRC_calc(_UART_RX_Buf,_UART_RX_length-2);		//Расчет CRC
    1ade:	6e ef       	ldi	r22, 0xFE	; 254
    1ae0:	6c 0f       	add	r22, r28
    1ae2:	8a e3       	ldi	r24, 0x3A	; 58
    1ae4:	94 e0       	ldi	r25, 0x04	; 4
    1ae6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
	// Проверка контрольной суммы, если полученая и вычисленная CRC16 не совпадают
	if (((CRC>>8)!=_UART_RX_Buf[_UART_RX_length-1]) || ((CRC & 0xFF)!=_UART_RX_Buf[_UART_RX_length-2])) return 0xFF; // Возврат с ошибкой CRC
    1aea:	2c 2f       	mov	r18, r28
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	69 2f       	mov	r22, r25
    1af0:	77 27       	eor	r23, r23
    1af2:	f9 01       	movw	r30, r18
    1af4:	e7 5c       	subi	r30, 0xC7	; 199
    1af6:	fb 4f       	sbci	r31, 0xFB	; 251
    1af8:	40 81       	ld	r20, Z
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	64 17       	cp	r22, r20
    1afe:	75 07       	cpc	r23, r21
    1b00:	89 f4       	brne	.+34     	; 0x1b24 <Read_Modbus+0x68>
    1b02:	99 27       	eor	r25, r25
    1b04:	f9 01       	movw	r30, r18
    1b06:	e8 5c       	subi	r30, 0xC8	; 200
    1b08:	fb 4f       	sbci	r31, 0xFB	; 251
    1b0a:	20 81       	ld	r18, Z
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	82 17       	cp	r24, r18
    1b10:	93 07       	cpc	r25, r19
    1b12:	51 f0       	breq	.+20     	; 0x1b28 <Read_Modbus+0x6c>
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	09 c0       	rjmp	.+18     	; 0x1b2a <Read_Modbus+0x6e>
char Read_Modbus(void)
{
	unsigned int CRC;									//Переменная для контрольной суммы
//	int temp;
	
	if (_UART_RX_end==0) return 0;						//Выход если признак окончания приема пакета не установлен	
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	07 c0       	rjmp	.+14     	; 0x1b2a <Read_Modbus+0x6e>
	_UART_RX_end=0;										//Сброс флага окончания приема
	if(_UART_RX_Buf[0] != Address_device) return 0xFD;	// если адрес не наш
    1b1c:	8d ef       	ldi	r24, 0xFD	; 253
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <Read_Modbus+0x6e>
	if(_UART_RX_length<=5) return 0xFE;
    1b20:	8e ef       	ldi	r24, 0xFE	; 254
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <Read_Modbus+0x6e>
	CRC=_CRC_calc(_UART_RX_Buf,_UART_RX_length-2);		//Расчет CRC
	// Проверка контрольной суммы, если полученая и вычисленная CRC16 не совпадают
	if (((CRC>>8)!=_UART_RX_Buf[_UART_RX_length-1]) || ((CRC & 0xFF)!=_UART_RX_Buf[_UART_RX_length-2])) return 0xFF; // Возврат с ошибкой CRC
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <Read_Modbus+0x6e>
	return 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
}
    1b2a:	cf 91       	pop	r28
    1b2c:	08 95       	ret

00001b2e <MODBUS_K1_2>:
/*****************************************************************************
 Чтение состояния дискретных выходов DO и дискретных входов DI
******************************************************************************
*****************************************************************************/
void MODBUS_K1_2(void)
{
    1b2e:	af 92       	push	r10
    1b30:	bf 92       	push	r11
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
//unsigned int n;
int n;
unsigned char b,d,nb,c;
asm("wdr");
    1b42:	a8 95       	wdr
d = SubFunc + Data;
    1b44:	d0 90 06 04 	lds	r13, 0x0406
    1b48:	80 91 02 03 	lds	r24, 0x0302
    1b4c:	90 91 03 03 	lds	r25, 0x0303
    1b50:	cd 2c       	mov	r12, r13
    1b52:	c8 0e       	add	r12, r24
n = 0;
// Считаем кол-во запрошеных байт
nb = Data/8;
    1b54:	9c 01       	movw	r18, r24
    1b56:	99 23       	and	r25, r25
    1b58:	14 f4       	brge	.+4      	; 0x1b5e <MODBUS_K1_2+0x30>
    1b5a:	29 5f       	subi	r18, 0xF9	; 249
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	35 95       	asr	r19
    1b60:	27 95       	ror	r18
    1b62:	35 95       	asr	r19
    1b64:	27 95       	ror	r18
    1b66:	35 95       	asr	r19
    1b68:	27 95       	ror	r18
    1b6a:	b2 2e       	mov	r11, r18
if(Data%8 > 0) nb += 1; // если есть остаток - увеличиваем до целого байта
    1b6c:	87 70       	andi	r24, 0x07	; 7
    1b6e:	90 78       	andi	r25, 0x80	; 128
    1b70:	99 23       	and	r25, r25
    1b72:	24 f4       	brge	.+8      	; 0x1b7c <MODBUS_K1_2+0x4e>
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	88 6f       	ori	r24, 0xF8	; 248
    1b78:	9f 6f       	ori	r25, 0xFF	; 255
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	18 16       	cp	r1, r24
    1b7e:	19 06       	cpc	r1, r25
    1b80:	1c f4       	brge	.+6      	; 0x1b88 <MODBUS_K1_2+0x5a>
    1b82:	bb 24       	eor	r11, r11
    1b84:	b3 94       	inc	r11
    1b86:	b2 0e       	add	r11, r18

if(Func == 1) // ---------------- Если надо считать состояние DO -----------------------------
    1b88:	a0 90 01 03 	lds	r10, 0x0301
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	a2 12       	cpse	r10, r18
    1b90:	28 c0       	rjmp	.+80     	; 0x1be2 <MODBUS_K1_2+0xb4>
  {
  if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся DO
    1b92:	80 e1       	ldi	r24, 0x10	; 16
    1b94:	8c 15       	cp	r24, r12
    1b96:	28 f0       	brcs	.+10     	; 0x1ba2 <MODBUS_K1_2+0x74>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
    1b98:	dc 14       	cp	r13, r12
    1b9a:	38 f0       	brcs	.+14     	; 0x1baa <MODBUS_K1_2+0x7c>
    1b9c:	00 e0       	ldi	r16, 0x00	; 0
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
    1ba0:	47 c0       	rjmp	.+142    	; 0x1c30 <MODBUS_K1_2+0x102>
nb = Data/8;
if(Data%8 > 0) nb += 1; // если есть остаток - увеличиваем до целого байта

if(Func == 1) // ---------------- Если надо считать состояние DO -----------------------------
  {
  if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся DO
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	80 93 04 02 	sts	0x0204, r24
    1ba8:	68 c0       	rjmp	.+208    	; 0x1c7a <MODBUS_K1_2+0x14c>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
    1baa:	c0 e0       	ldi	r28, 0x00	; 0
    1bac:	d0 e0       	ldi	r29, 0x00	; 0
    1bae:	00 e0       	ldi	r16, 0x00	; 0
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    {
	if(OutState(b) != 0) n|=(0x01 << c); // Если считываемый бит не = 0 - Установим соответствующий бит в переменной
    1bb2:	ee 24       	eor	r14, r14
    1bb4:	e3 94       	inc	r14
    1bb6:	f1 2c       	mov	r15, r1
    1bb8:	8c 2f       	mov	r24, r28
    1bba:	8d 0d       	add	r24, r13
    1bbc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <OutState>
    1bc0:	88 23       	and	r24, r24
    1bc2:	49 f0       	breq	.+18     	; 0x1bd6 <MODBUS_K1_2+0xa8>
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	0c 2e       	mov	r0, r28
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <MODBUS_K1_2+0xa0>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <MODBUS_K1_2+0x9c>
    1bd2:	08 2b       	or	r16, r24
    1bd4:	19 2b       	or	r17, r25
    1bd6:	21 96       	adiw	r28, 0x01	; 1
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	8d 0d       	add	r24, r13
if(Data%8 > 0) nb += 1; // если есть остаток - увеличиваем до целого байта

if(Func == 1) // ---------------- Если надо считать состояние DO -----------------------------
  {
  if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся DO
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
    1bdc:	8c 15       	cp	r24, r12
    1bde:	60 f3       	brcs	.-40     	; 0x1bb8 <MODBUS_K1_2+0x8a>
    1be0:	27 c0       	rjmp	.+78     	; 0x1c30 <MODBUS_K1_2+0x102>
	c++;
	}
  }
else 			  // ----------------- Если надо считать состояние DI -----------------------------
  {
  if(d > maxAddr_DI) {m_coderr=2; return;} // Если запрашивается больше имеющихся DI
    1be2:	80 e1       	ldi	r24, 0x10	; 16
    1be4:	8c 15       	cp	r24, r12
    1be6:	28 f0       	brcs	.+10     	; 0x1bf2 <MODBUS_K1_2+0xc4>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
    1be8:	dc 14       	cp	r13, r12
    1bea:	38 f0       	brcs	.+14     	; 0x1bfa <MODBUS_K1_2+0xcc>
    1bec:	00 e0       	ldi	r16, 0x00	; 0
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	1f c0       	rjmp	.+62     	; 0x1c30 <MODBUS_K1_2+0x102>
	c++;
	}
  }
else 			  // ----------------- Если надо считать состояние DI -----------------------------
  {
  if(d > maxAddr_DI) {m_coderr=2; return;} // Если запрашивается больше имеющихся DI
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	80 93 04 02 	sts	0x0204, r24
    1bf8:	40 c0       	rjmp	.+128    	; 0x1c7a <MODBUS_K1_2+0x14c>
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
    1bfa:	c0 e0       	ldi	r28, 0x00	; 0
    1bfc:	d0 e0       	ldi	r29, 0x00	; 0
    1bfe:	00 e0       	ldi	r16, 0x00	; 0
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    {
	if(InState(b) != 0) n|=(0x01 << c); // Если считываемый бит не = 0 - Установим соответствующий бит в переменной
    1c02:	ee 24       	eor	r14, r14
    1c04:	e3 94       	inc	r14
    1c06:	f1 2c       	mov	r15, r1
    1c08:	8c 2f       	mov	r24, r28
    1c0a:	8d 0d       	add	r24, r13
    1c0c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <InState>
    1c10:	88 23       	and	r24, r24
    1c12:	49 f0       	breq	.+18     	; 0x1c26 <MODBUS_K1_2+0xf8>
    1c14:	c7 01       	movw	r24, r14
    1c16:	0c 2e       	mov	r0, r28
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <MODBUS_K1_2+0xf0>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <MODBUS_K1_2+0xec>
    1c22:	08 2b       	or	r16, r24
    1c24:	19 2b       	or	r17, r25
    1c26:	21 96       	adiw	r28, 0x01	; 1
    1c28:	8c 2f       	mov	r24, r28
    1c2a:	8d 0d       	add	r24, r13
	}
  }
else 			  // ----------------- Если надо считать состояние DI -----------------------------
  {
  if(d > maxAddr_DI) {m_coderr=2; return;} // Если запрашивается больше имеющихся DI
  for(b = SubFunc,c = 0; b < d; b++) // заполняем запрошеными данными переменную n
    1c2c:	8c 15       	cp	r24, r12
    1c2e:	60 f3       	brcs	.-40     	; 0x1c08 <MODBUS_K1_2+0xda>
	c++;
	}
  }
// =================================== Теперь составим ответ =============================
 b = 0;										// Обнуляем указатель
 _UART_TX_Buf[b++] = Address_device & 0xFF; // Запишем адрес контроллера
    1c30:	80 91 05 03 	lds	r24, 0x0305
    1c34:	80 93 07 03 	sts	0x0307, r24
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
    1c38:	a0 92 08 03 	sts	0x0308, r10
 _UART_TX_Buf[b++] =  nb;					// Запишем кол- во отсылаемых байт
    1c3c:	b0 92 09 03 	sts	0x0309, r11
 _UART_TX_Buf[b++] = n & 0xFF; 	   			// 1 байт в любом случае
    1c40:	00 93 0a 03 	sts	0x030A, r16
 if(nb == 2) _UART_TX_Buf[b++] = ((n >> 8) & 0xFF); // 2 байт - если надо
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	b8 12       	cpse	r11, r24
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <MODBUS_K1_2+0x124>
    1c4a:	10 93 0b 03 	sts	0x030B, r17
    1c4e:	c5 e0       	ldi	r28, 0x05	; 5
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <MODBUS_K1_2+0x126>
// =================================== Теперь составим ответ =============================
 b = 0;										// Обнуляем указатель
 _UART_TX_Buf[b++] = Address_device & 0xFF; // Запишем адрес контроллера
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
 _UART_TX_Buf[b++] =  nb;					// Запишем кол- во отсылаемых байт
 _UART_TX_Buf[b++] = n & 0xFF; 	   			// 1 байт в любом случае
    1c52:	c4 e0       	ldi	r28, 0x04	; 4
 if(nb == 2) _UART_TX_Buf[b++] = ((n >> 8) & 0xFF); // 2 байт - если надо
 // --------------- Подсчет CRC -------------------
 n = _CRC_calc(_UART_TX_Buf, b);				// Считаем CRC
    1c54:	6c 2f       	mov	r22, r28
    1c56:	87 e0       	ldi	r24, 0x07	; 7
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    1c5e:	ec 2f       	mov	r30, r28
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	e9 5f       	subi	r30, 0xF9	; 249
    1c64:	fc 4f       	sbci	r31, 0xFC	; 252
    1c66:	80 83       	st	Z, r24
    1c68:	e1 e0       	ldi	r30, 0x01	; 1
    1c6a:	ec 0f       	add	r30, r28
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт 
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	e9 5f       	subi	r30, 0xF9	; 249
    1c70:	fc 4f       	sbci	r31, 0xFC	; 252
    1c72:	90 83       	st	Z, r25
    1c74:	ce 5f       	subi	r28, 0xFE	; 254

 _UART_TX_length = b;	  	  		 // Запишем кол - во передаваемых байт из буфера
    1c76:	c0 93 39 04 	sts	0x0439, r28
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	08 95       	ret

00001c90 <MODBUS_K3_4>:
/*****************************************************************************
 Чтение нескольких Holding или Input регистров (чтение)
******************************************************************************
*****************************************************************************/
void MODBUS_K3_4(void)
{
    1c90:	cf 93       	push	r28
// Внутренние переменные
unsigned int n;
unsigned char m,b,d;
asm("wdr");
    1c92:	a8 95       	wdr
d = SubFunc + Data;
    1c94:	80 91 06 04 	lds	r24, 0x0406
    1c98:	60 91 02 03 	lds	r22, 0x0302
    1c9c:	70 91 03 03 	lds	r23, 0x0303
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	96 0f       	add	r25, r22
b = 0;

// Составляем ответ
 _UART_TX_Buf[b++] = Address_device & 0xFF; // Запишем адрес контроллера
    1ca4:	20 91 05 03 	lds	r18, 0x0305
    1ca8:	20 93 07 03 	sts	0x0307, r18
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
    1cac:	40 91 01 03 	lds	r20, 0x0301
    1cb0:	40 93 08 03 	sts	0x0308, r20
 _UART_TX_Buf[b++] = (Data<<1) & 0xFF;		// Кол-во байт = кол-во слов*2 и наложить маску
    1cb4:	9b 01       	movw	r18, r22
    1cb6:	22 0f       	add	r18, r18
    1cb8:	33 1f       	adc	r19, r19
    1cba:	20 93 09 03 	sts	0x0309, r18
// Считаем смещение
if(Func == 3) // Если надо считать HOLDING регистры
    1cbe:	43 30       	cpi	r20, 0x03	; 3
    1cc0:	31 f5       	brne	.+76     	; 0x1d0e <MODBUS_K3_4+0x7e>
  {
  if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
    1cc2:	9d 37       	cpi	r25, 0x7D	; 125
    1cc4:	20 f4       	brcc	.+8      	; 0x1cce <MODBUS_K3_4+0x3e>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1cc6:	89 17       	cp	r24, r25
    1cc8:	30 f0       	brcs	.+12     	; 0x1cd6 <MODBUS_K3_4+0x46>
    1cca:	c3 e0       	ldi	r28, 0x03	; 3
    1ccc:	45 c0       	rjmp	.+138    	; 0x1d58 <MODBUS_K3_4+0xc8>
 _UART_TX_Buf[b++] = Func; 					// Запишем выполненую команду
 _UART_TX_Buf[b++] = (Data<<1) & 0xFF;		// Кол-во байт = кол-во слов*2 и наложить маску
// Считаем смещение
if(Func == 3) // Если надо считать HOLDING регистры
  {
  if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	80 93 04 02 	sts	0x0204, r24
    1cd4:	54 c0       	rjmp	.+168    	; 0x1d7e <MODBUS_K3_4+0xee>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1cd6:	23 e0       	ldi	r18, 0x03	; 3
   {
   _UART_TX_Buf[b++] = (MB_Hreg[m] >> 8) & 0xFF; // Записываем старший байт
    1cd8:	e8 2f       	mov	r30, r24
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	e7 5c       	subi	r30, 0xC7	; 199
    1ce2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ce4:	30 81       	ld	r19, Z
    1ce6:	41 81       	ldd	r20, Z+1	; 0x01
    1ce8:	e2 2f       	mov	r30, r18
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	e9 5f       	subi	r30, 0xF9	; 249
    1cee:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf0:	40 83       	st	Z, r20
   _UART_TX_Buf[b++] =  MB_Hreg[m] & 0xFF;  	 // Записываем младший байт
    1cf2:	e1 e0       	ldi	r30, 0x01	; 1
    1cf4:	e2 0f       	add	r30, r18
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	2e 5f       	subi	r18, 0xFE	; 254
    1cfa:	e9 5f       	subi	r30, 0xF9	; 249
    1cfc:	fc 4f       	sbci	r31, 0xFC	; 252
    1cfe:	30 83       	st	Z, r19
 _UART_TX_Buf[b++] = (Data<<1) & 0xFF;		// Кол-во байт = кол-во слов*2 и наложить маску
// Считаем смещение
if(Func == 3) // Если надо считать HOLDING регистры
  {
  if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1d00:	8f 5f       	subi	r24, 0xFF	; 255
    1d02:	89 13       	cpse	r24, r25
    1d04:	e9 cf       	rjmp	.-46     	; 0x1cd8 <MODBUS_K3_4+0x48>
    1d06:	66 0f       	add	r22, r22
    1d08:	c3 e0       	ldi	r28, 0x03	; 3
    1d0a:	c6 0f       	add	r28, r22
    1d0c:	25 c0       	rjmp	.+74     	; 0x1d58 <MODBUS_K3_4+0xc8>
   _UART_TX_Buf[b++] =  MB_Hreg[m] & 0xFF;  	 // Записываем младший байт
   }
  }
else 			  // Если надо считать INPUT регистры
  {
  if(d > maxAddrRegINP) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
    1d0e:	9d 37       	cpi	r25, 0x7D	; 125
    1d10:	20 f4       	brcc	.+8      	; 0x1d1a <MODBUS_K3_4+0x8a>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1d12:	89 17       	cp	r24, r25
    1d14:	30 f0       	brcs	.+12     	; 0x1d22 <MODBUS_K3_4+0x92>
    1d16:	c3 e0       	ldi	r28, 0x03	; 3
    1d18:	1f c0       	rjmp	.+62     	; 0x1d58 <MODBUS_K3_4+0xc8>
   _UART_TX_Buf[b++] =  MB_Hreg[m] & 0xFF;  	 // Записываем младший байт
   }
  }
else 			  // Если надо считать INPUT регистры
  {
  if(d > maxAddrRegINP) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	80 93 04 02 	sts	0x0204, r24
    1d20:	2e c0       	rjmp	.+92     	; 0x1d7e <MODBUS_K3_4+0xee>
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1d22:	23 e0       	ldi	r18, 0x03	; 3
   {
   _UART_TX_Buf[b++] = (MB_Ireg[m] >> 8) & 0xFF; // Записываем старший байт
    1d24:	e8 2f       	mov	r30, r24
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	ee 0f       	add	r30, r30
    1d2a:	ff 1f       	adc	r31, r31
    1d2c:	e9 5f       	subi	r30, 0xF9	; 249
    1d2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d30:	30 81       	ld	r19, Z
    1d32:	41 81       	ldd	r20, Z+1	; 0x01
    1d34:	e2 2f       	mov	r30, r18
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	e9 5f       	subi	r30, 0xF9	; 249
    1d3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d3c:	40 83       	st	Z, r20
   _UART_TX_Buf[b++] =  MB_Ireg[m] & 0xFF;  	   // Записываем младший байт
    1d3e:	e1 e0       	ldi	r30, 0x01	; 1
    1d40:	e2 0f       	add	r30, r18
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	2e 5f       	subi	r18, 0xFE	; 254
    1d46:	e9 5f       	subi	r30, 0xF9	; 249
    1d48:	fc 4f       	sbci	r31, 0xFC	; 252
    1d4a:	30 83       	st	Z, r19
   }
  }
else 			  // Если надо считать INPUT регистры
  {
  if(d > maxAddrRegINP) {m_coderr=2; return;} // Ошибка!!! запрашивается больше имеющихся
  for(m = SubFunc; m < d; m++) // заполняем запрошеными данными буфер ответа
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	89 13       	cpse	r24, r25
    1d50:	e9 cf       	rjmp	.-46     	; 0x1d24 <MODBUS_K3_4+0x94>
    1d52:	66 0f       	add	r22, r22
    1d54:	c3 e0       	ldi	r28, 0x03	; 3
    1d56:	c6 0f       	add	r28, r22
   _UART_TX_Buf[b++] = (MB_Ireg[m] >> 8) & 0xFF; // Записываем старший байт
   _UART_TX_Buf[b++] =  MB_Ireg[m] & 0xFF;  	   // Записываем младший байт
   }
  }
// --- Подсчет CRC ---
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    1d58:	6c 2f       	mov	r22, r28
    1d5a:	87 e0       	ldi	r24, 0x07	; 7
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    1d62:	ec 2f       	mov	r30, r28
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	e9 5f       	subi	r30, 0xF9	; 249
    1d68:	fc 4f       	sbci	r31, 0xFC	; 252
    1d6a:	80 83       	st	Z, r24
    1d6c:	e1 e0       	ldi	r30, 0x01	; 1
    1d6e:	ec 0f       	add	r30, r28
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт - затем старший байт
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	e9 5f       	subi	r30, 0xF9	; 249
    1d74:	fc 4f       	sbci	r31, 0xFC	; 252
    1d76:	90 83       	st	Z, r25
    1d78:	ce 5f       	subi	r28, 0xFE	; 254

 _UART_TX_length = b;	  	  		 // Запишем кол - во передаваемых байт из буфера
    1d7a:	c0 93 39 04 	sts	0x0439, r28
}
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <MODBUS_K5>:
*****************************************************************************/
void MODBUS_K5(void)
{
unsigned int n;
unsigned char b,d;
asm("wdr");
    1d82:	a8 95       	wdr
d = SubFunc + Data;
    1d84:	80 91 06 04 	lds	r24, 0x0406
    1d88:	90 91 02 03 	lds	r25, 0x0302
    1d8c:	98 0f       	add	r25, r24
n = 0;
if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся
    1d8e:	91 31       	cpi	r25, 0x11	; 17
    1d90:	20 f0       	brcs	.+8      	; 0x1d9a <MODBUS_K5+0x18>
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	80 93 04 02 	sts	0x0204, r24
    1d98:	08 95       	ret
// Всегда установка 1 выхода DO
if((_UART_RX_dup[4] == 0xFF) && (_UART_RX_dup[5] == 0x00)) OutControl(SubFunc,1);      // Если установить (вкл выход)
    1d9a:	90 91 09 01 	lds	r25, 0x0109
    1d9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1da0:	41 f4       	brne	.+16     	; 0x1db2 <MODBUS_K5+0x30>
    1da2:	90 91 0a 01 	lds	r25, 0x010A
    1da6:	91 11       	cpse	r25, r1
    1da8:	0e c0       	rjmp	.+28     	; 0x1dc6 <MODBUS_K5+0x44>
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	0e 94 07 02 	call	0x40e	; 0x40e <OutControl>
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <MODBUS_K5+0x4c>
else if((_UART_RX_dup[4] == 0x00) && (_UART_RX_dup[5] == 0x00)) OutControl(SubFunc,0);	// Если сбросить (выкл выход)
    1db2:	91 11       	cpse	r25, r1
    1db4:	08 c0       	rjmp	.+16     	; 0x1dc6 <MODBUS_K5+0x44>
    1db6:	90 91 0a 01 	lds	r25, 0x010A
    1dba:	91 11       	cpse	r25, r1
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <MODBUS_K5+0x44>
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	0e 94 07 02 	call	0x40e	; 0x40e <OutControl>
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <MODBUS_K5+0x4c>
else {m_coderr=3; return;} // Если неверно задано поле данных
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	80 93 04 02 	sts	0x0204, r24
    1dcc:	08 95       	ret
// *************** Теперь составим ответ **********************************
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;   		// Запишем адрес контроллера
    1dce:	80 91 05 03 	lds	r24, 0x0305
    1dd2:	80 93 07 03 	sts	0x0307, r24
 _UART_TX_Buf[b++] = Func; 		   					// Запишем выполненую команду
    1dd6:	80 91 01 03 	lds	r24, 0x0301
    1dda:	80 93 08 03 	sts	0x0308, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];				// Запишем ст. байт адреса
    1dde:	80 91 07 01 	lds	r24, 0x0107
    1de2:	80 93 09 03 	sts	0x0309, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3]; 	   	   		// Запишем мл. байт адреса
    1de6:	80 91 08 01 	lds	r24, 0x0108
    1dea:	80 93 0a 03 	sts	0x030A, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];				// Запишем ст. байт данных
    1dee:	80 91 09 01 	lds	r24, 0x0109
    1df2:	80 93 0b 03 	sts	0x030B, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5]; 	   	   		// Запишем мл. байт данных
    1df6:	80 91 0a 01 	lds	r24, 0x010A
    1dfa:	80 93 0c 03 	sts	0x030C, r24
// ---- Подсчет CRC ----
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	87 e0       	ldi	r24, 0x07	; 7
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  		 // Пишем младший байт - вначале передаем младший байт
    1e08:	80 93 0d 03 	sts	0x030D, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF); // Пишем старший байт - затем старший байт
    1e0c:	90 93 0e 03 	sts	0x030E, r25

_UART_TX_length = b;	  	  		 // Запишем кол - во передаваемых байт из буфера
    1e10:	88 e0       	ldi	r24, 0x08	; 8
    1e12:	80 93 39 04 	sts	0x0439, r24
    1e16:	08 95       	ret

00001e18 <MODBUS_K6>:
*****************************************************************************/
void MODBUS_K6(void)
{
unsigned int n;
unsigned char b;
asm("wdr");
    1e18:	a8 95       	wdr
n = 0;
if(SubFunc > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся
    1e1a:	80 91 06 04 	lds	r24, 0x0406
    1e1e:	90 91 07 04 	lds	r25, 0x0407
    1e22:	8d 37       	cpi	r24, 0x7D	; 125
    1e24:	91 05       	cpc	r25, r1
    1e26:	24 f0       	brlt	.+8      	; 0x1e30 <MODBUS_K6+0x18>
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	80 93 04 02 	sts	0x0204, r24
    1e2e:	08 95       	ret

MB_Hreg[SubFunc] = (_UART_RX_dup[4] << 8) | _UART_RX_dup[5]; // Просто записываем в Holding регистр по указанному адресу
    1e30:	fc 01       	movw	r30, r24
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	e7 5c       	subi	r30, 0xC7	; 199
    1e38:	fa 4f       	sbci	r31, 0xFA	; 250
    1e3a:	20 91 09 01 	lds	r18, 0x0109
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	32 2f       	mov	r19, r18
    1e42:	22 27       	eor	r18, r18
    1e44:	40 91 0a 01 	lds	r20, 0x010A
    1e48:	24 2b       	or	r18, r20
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
// --- Для контроллера КМ01-8600.М ---
#ifdef _KM8600_
if(SubFunc == 34) wr_pwm();			// если это параметры ШИМ - записать новое значение в EEPROM
    1e4e:	82 32       	cpi	r24, 0x22	; 34
    1e50:	91 05       	cpc	r25, r1
    1e52:	19 f4       	brne	.+6      	; 0x1e5a <MODBUS_K6+0x42>
    1e54:	0e 94 96 09 	call	0x132c	; 0x132c <wr_pwm>
    1e58:	9a c0       	rjmp	.+308    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 35) wr_mcnt();	// если это конфигурация счетчиков - записать новое значение в EEPROM
    1e5a:	83 32       	cpi	r24, 0x23	; 35
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <MODBUS_K6+0x4e>
    1e60:	0e 94 b3 09 	call	0x1366	; 0x1366 <wr_mcnt>
    1e64:	94 c0       	rjmp	.+296    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 36) wr_vcnt1();	// если это значение делителя для счетчика №1 - записать новое значение в EEPROM
    1e66:	84 32       	cpi	r24, 0x24	; 36
    1e68:	91 05       	cpc	r25, r1
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <MODBUS_K6+0x5a>
    1e6c:	0e 94 bf 09 	call	0x137e	; 0x137e <wr_vcnt1>
    1e70:	8e c0       	rjmp	.+284    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 37) wr_vcnt2();	// если это значение делителя для счетчика №2 - записать новое значение в EEPROM
    1e72:	85 32       	cpi	r24, 0x25	; 37
    1e74:	91 05       	cpc	r25, r1
    1e76:	19 f4       	brne	.+6      	; 0x1e7e <MODBUS_K6+0x66>
    1e78:	0e 94 e7 09 	call	0x13ce	; 0x13ce <wr_vcnt2>
    1e7c:	88 c0       	rjmp	.+272    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 38) wr_vcnt3();	// если это значение делителя для счетчика №3 - записать новое значение в EEPROM
    1e7e:	86 32       	cpi	r24, 0x26	; 38
    1e80:	91 05       	cpc	r25, r1
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <MODBUS_K6+0x72>
    1e84:	0e 94 0f 0a 	call	0x141e	; 0x141e <wr_vcnt3>
    1e88:	82 c0       	rjmp	.+260    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 39) wr_vcnt4();	// если это значение делителя для счетчика №4 - записать новое значение в EEPROM
    1e8a:	87 32       	cpi	r24, 0x27	; 39
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <MODBUS_K6+0x7e>
    1e90:	0e 94 37 0a 	call	0x146e	; 0x146e <wr_vcnt4>
    1e94:	7c c0       	rjmp	.+248    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 40) wr_vcnt5();	// если это значение делителя для счетчика №5 - записать новое значение в EEPROM
    1e96:	88 32       	cpi	r24, 0x28	; 40
    1e98:	91 05       	cpc	r25, r1
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <MODBUS_K6+0x8a>
    1e9c:	0e 94 5f 0a 	call	0x14be	; 0x14be <wr_vcnt5>
    1ea0:	76 c0       	rjmp	.+236    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 42) wr_vcnt6();	// если это значение делителя для счетчика №6 - записать новое значение в EEPROM
    1ea2:	8a 32       	cpi	r24, 0x2A	; 42
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <MODBUS_K6+0x96>
    1ea8:	0e 94 87 0a 	call	0x150e	; 0x150e <wr_vcnt6>
    1eac:	70 c0       	rjmp	.+224    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 42) wr_vcnt7();	// если это значение делителя для счетчика №7 - записать новое значение в EEPROM
else if(SubFunc == 43) wr_vcnt8();	// если это значение делителя для счетчика №8 - записать новое значение в EEPROM
    1eae:	8b 32       	cpi	r24, 0x2B	; 43
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	19 f4       	brne	.+6      	; 0x1eba <MODBUS_K6+0xa2>
    1eb4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <wr_vcnt8>
    1eb8:	6a c0       	rjmp	.+212    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 44) wr_vhcnt1();	// если это старшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    1eba:	8c 32       	cpi	r24, 0x2C	; 44
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	19 f4       	brne	.+6      	; 0x1ec6 <MODBUS_K6+0xae>
    1ec0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <wr_vhcnt1>
    1ec4:	64 c0       	rjmp	.+200    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 45) wr_vlcnt1();	// если это младшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    1ec6:	8d 32       	cpi	r24, 0x2D	; 45
    1ec8:	91 05       	cpc	r25, r1
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <MODBUS_K6+0xba>
    1ecc:	0e 94 cb 09 	call	0x1396	; 0x1396 <wr_vlcnt1>
    1ed0:	5e c0       	rjmp	.+188    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 46) wr_vhcnt2();	// если это старшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    1ed2:	8e 32       	cpi	r24, 0x2E	; 46
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	19 f4       	brne	.+6      	; 0x1ede <MODBUS_K6+0xc6>
    1ed8:	0e 94 01 0a 	call	0x1402	; 0x1402 <wr_vhcnt2>
    1edc:	58 c0       	rjmp	.+176    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 47) wr_vlcnt2();	// если это младшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    1ede:	8f 32       	cpi	r24, 0x2F	; 47
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <MODBUS_K6+0xd2>
    1ee4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <wr_vlcnt2>
    1ee8:	52 c0       	rjmp	.+164    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 48) wr_vhcnt3();	// если это старшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    1eea:	80 33       	cpi	r24, 0x30	; 48
    1eec:	91 05       	cpc	r25, r1
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <MODBUS_K6+0xde>
    1ef0:	0e 94 29 0a 	call	0x1452	; 0x1452 <wr_vhcnt3>
    1ef4:	4c c0       	rjmp	.+152    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 49) wr_vlcnt3();	// если это младшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    1ef6:	81 33       	cpi	r24, 0x31	; 49
    1ef8:	91 05       	cpc	r25, r1
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <MODBUS_K6+0xea>
    1efc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <wr_vlcnt3>
    1f00:	46 c0       	rjmp	.+140    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 50) wr_vhcnt4();	// если это старшее опорное слово для счетчика №4 - записать новое значение в EEPROM
    1f02:	82 33       	cpi	r24, 0x32	; 50
    1f04:	91 05       	cpc	r25, r1
    1f06:	19 f4       	brne	.+6      	; 0x1f0e <MODBUS_K6+0xf6>
    1f08:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <wr_vhcnt4>
    1f0c:	40 c0       	rjmp	.+128    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 51) wr_vlcnt4();	// если это младшее опорное слово для счетчика №4 - записать новое значение в EEPROM
    1f0e:	83 33       	cpi	r24, 0x33	; 51
    1f10:	91 05       	cpc	r25, r1
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <MODBUS_K6+0x102>
    1f14:	0e 94 43 0a 	call	0x1486	; 0x1486 <wr_vlcnt4>
    1f18:	3a c0       	rjmp	.+116    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 52) wr_vhcnt5();	// если это старшее опорное слово для счетчика №5 - записать новое значение в EEPROM
    1f1a:	84 33       	cpi	r24, 0x34	; 52
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <MODBUS_K6+0x10e>
    1f20:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <wr_vhcnt5>
    1f24:	34 c0       	rjmp	.+104    	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 53) wr_vlcnt5();	// если это младшее опорное слово для счетчика №5 - записать новое значение в EEPROM
    1f26:	85 33       	cpi	r24, 0x35	; 53
    1f28:	91 05       	cpc	r25, r1
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <MODBUS_K6+0x11a>
    1f2c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <wr_vlcnt5>
    1f30:	2e c0       	rjmp	.+92     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 54) wr_vhcnt6();	// если это старшее опорное слово для счетчика №6 - записать новое значение в EEPROM
    1f32:	86 33       	cpi	r24, 0x36	; 54
    1f34:	91 05       	cpc	r25, r1
    1f36:	19 f4       	brne	.+6      	; 0x1f3e <MODBUS_K6+0x126>
    1f38:	0e 94 a1 0a 	call	0x1542	; 0x1542 <wr_vhcnt6>
    1f3c:	28 c0       	rjmp	.+80     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 55) wr_vlcnt6();	// если это младшее опорное слово для счетчика №6 - записать новое значение в EEPROM
    1f3e:	87 33       	cpi	r24, 0x37	; 55
    1f40:	91 05       	cpc	r25, r1
    1f42:	19 f4       	brne	.+6      	; 0x1f4a <MODBUS_K6+0x132>
    1f44:	0e 94 93 0a 	call	0x1526	; 0x1526 <wr_vlcnt6>
    1f48:	22 c0       	rjmp	.+68     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 56) wr_vhcnt7();	// если это старшее опорное слово для счетчика №7 - записать новое значение в EEPROM
    1f4a:	88 33       	cpi	r24, 0x38	; 56
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	19 f4       	brne	.+6      	; 0x1f56 <MODBUS_K6+0x13e>
    1f50:	0e 94 bd 0a 	call	0x157a	; 0x157a <wr_vhcnt7>
    1f54:	1c c0       	rjmp	.+56     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 57) wr_vlcnt7();	// если это младшее опорное слово для счетчика №7 - записать новое значение в EEPROM
    1f56:	89 33       	cpi	r24, 0x39	; 57
    1f58:	91 05       	cpc	r25, r1
    1f5a:	19 f4       	brne	.+6      	; 0x1f62 <MODBUS_K6+0x14a>
    1f5c:	0e 94 af 0a 	call	0x155e	; 0x155e <wr_vlcnt7>
    1f60:	16 c0       	rjmp	.+44     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 58) wr_vhcnt8();	// если это старшее опорное слово для счетчика №8 - записать новое значение в EEPROM
    1f62:	8a 33       	cpi	r24, 0x3A	; 58
    1f64:	91 05       	cpc	r25, r1
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <MODBUS_K6+0x156>
    1f68:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <wr_vhcnt8>
    1f6c:	10 c0       	rjmp	.+32     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 59) wr_vlcnt8();	// если это младшее опорное слово для счетчика №8 - записать новое значение в EEPROM
    1f6e:	8b 33       	cpi	r24, 0x3B	; 59
    1f70:	91 05       	cpc	r25, r1
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <MODBUS_K6+0x162>
    1f74:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <wr_vlcnt8>
    1f78:	0a c0       	rjmp	.+20     	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 61) wr_adr();	// если это адрес контроллера - записать новое значение в EEPROM
    1f7a:	8d 33       	cpi	r24, 0x3D	; 61
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <MODBUS_K6+0x16e>
    1f80:	0e 94 6d 09 	call	0x12da	; 0x12da <wr_adr>
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <MODBUS_K6+0x176>
else if(SubFunc == 62) wr_par();	// если это параметры сети - записать новое значение в EEPROM
    1f86:	ce 97       	sbiw	r24, 0x3e	; 62
    1f88:	11 f4       	brne	.+4      	; 0x1f8e <MODBUS_K6+0x176>
    1f8a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <wr_par>
#endif

// *************** Теперь составим ответ **********************************
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;			// Запишем адрес контроллера
    1f8e:	80 91 05 03 	lds	r24, 0x0305
    1f92:	80 93 07 03 	sts	0x0307, r24
 _UART_TX_Buf[b++] = Func; 		   					// Запишем выполненую команду
    1f96:	80 91 01 03 	lds	r24, 0x0301
    1f9a:	80 93 08 03 	sts	0x0308, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];				// Запишем ст. байт начального адреса регистра
    1f9e:	80 91 07 01 	lds	r24, 0x0107
    1fa2:	80 93 09 03 	sts	0x0309, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3]; 	   	   		// Запишем мл. байт начального адреса регистра
    1fa6:	80 91 08 01 	lds	r24, 0x0108
    1faa:	80 93 0a 03 	sts	0x030A, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];				// Запишем ст. байт данных регистра
    1fae:	80 91 09 01 	lds	r24, 0x0109
    1fb2:	80 93 0b 03 	sts	0x030B, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5]; 	   	   		// Запишем мл. байт данных регистра
    1fb6:	80 91 0a 01 	lds	r24, 0x010A
    1fba:	80 93 0c 03 	sts	0x030C, r24
// ---- Кол - во целых бай для подсчета CRC ----
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    1fbe:	66 e0       	ldi	r22, 0x06	; 6
    1fc0:	87 e0       	ldi	r24, 0x07	; 7
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    1fc8:	80 93 0d 03 	sts	0x030D, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт - затем старший байт
    1fcc:	90 93 0e 03 	sts	0x030E, r25
 
_UART_TX_length = b;	  	  				// Запишем кол - во передаваемых байт из буфера
    1fd0:	88 e0       	ldi	r24, 0x08	; 8
    1fd2:	80 93 39 04 	sts	0x0439, r24
    1fd6:	08 95       	ret

00001fd8 <MODBUS_K15>:
/*****************************************************************************
 Установка (Запись) в несколько дискретных выходов DO

*****************************************************************************/
void MODBUS_K15(void)
{
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
unsigned int n;
unsigned char b,d,c;
asm("wdr");
    1fe4:	a8 95       	wdr
d = SubFunc + Data; // Считаю макс номер вывода для записи
    1fe6:	f0 90 06 04 	lds	r15, 0x0406
    1fea:	e0 90 02 03 	lds	r14, 0x0302
    1fee:	ef 0c       	add	r14, r15

if(d > maxAddr_DO) {m_coderr=2; return;} // Если запрашивается больше имеющихся
    1ff0:	80 e1       	ldi	r24, 0x10	; 16
    1ff2:	8e 15       	cp	r24, r14
    1ff4:	20 f4       	brcc	.+8      	; 0x1ffe <MODBUS_K15+0x26>
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	80 93 04 02 	sts	0x0204, r24
    1ffc:	56 c0       	rjmp	.+172    	; 0x20aa <MODBUS_K15+0xd2>

n = 0;
// Переписываем данные для установки выходов в int рабочий регистр
if(_UART_RX_dup[6] == 2) {n = (_UART_RX_dup[8] << 8) | _UART_RX_dup[7];}
    1ffe:	80 91 0b 01 	lds	r24, 0x010B
    2002:	82 30       	cpi	r24, 0x02	; 2
    2004:	49 f4       	brne	.+18     	; 0x2018 <MODBUS_K15+0x40>
    2006:	00 91 0d 01 	lds	r16, 0x010D
    200a:	10 e0       	ldi	r17, 0x00	; 0
    200c:	10 2f       	mov	r17, r16
    200e:	00 27       	eor	r16, r16
    2010:	80 91 0c 01 	lds	r24, 0x010C
    2014:	08 2b       	or	r16, r24
    2016:	0a c0       	rjmp	.+20     	; 0x202c <MODBUS_K15+0x54>
else if(_UART_RX_dup[6] == 1) {n = _UART_RX_dup[7];}
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	21 f4       	brne	.+8      	; 0x2024 <MODBUS_K15+0x4c>
    201c:	00 91 0c 01 	lds	r16, 0x010C
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	04 c0       	rjmp	.+8      	; 0x202c <MODBUS_K15+0x54>
else {m_coderr=2; return;} // не верно задано кол-во байт для записи
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	80 93 04 02 	sts	0x0204, r24
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <MODBUS_K15+0xd2>

for(b = SubFunc,c = 0; b < d; b++) // заполняем данными флаги в регистре R_DOUT
    202c:	fe 14       	cp	r15, r14
    202e:	c8 f4       	brcc	.+50     	; 0x2062 <MODBUS_K15+0x8a>
    2030:	c0 e0       	ldi	r28, 0x00	; 0
    2032:	d0 e0       	ldi	r29, 0x00	; 0
    2034:	8c 2f       	mov	r24, r28
    2036:	8f 0d       	add	r24, r15
  {
  if(((n >> c) & 0x01) != 0) OutControl(b,1); // Если проверяемый бит не = 0 - Установим соответствующий бит в регистре
    2038:	98 01       	movw	r18, r16
    203a:	0c 2e       	mov	r0, r28
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <MODBUS_K15+0x6a>
    203e:	36 95       	lsr	r19
    2040:	27 95       	ror	r18
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <MODBUS_K15+0x66>
    2046:	20 ff       	sbrs	r18, 0
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <MODBUS_K15+0x7a>
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	0e 94 07 02 	call	0x40e	; 0x40e <OutControl>
    2050:	03 c0       	rjmp	.+6      	; 0x2058 <MODBUS_K15+0x80>
  else OutControl(b,0); 	   					// если = 0 - Сбросим соответствующий бит в регистре
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	0e 94 07 02 	call	0x40e	; 0x40e <OutControl>
    2058:	21 96       	adiw	r28, 0x01	; 1
    205a:	8c 2f       	mov	r24, r28
    205c:	8f 0d       	add	r24, r15
// Переписываем данные для установки выходов в int рабочий регистр
if(_UART_RX_dup[6] == 2) {n = (_UART_RX_dup[8] << 8) | _UART_RX_dup[7];}
else if(_UART_RX_dup[6] == 1) {n = _UART_RX_dup[7];}
else {m_coderr=2; return;} // не верно задано кол-во байт для записи

for(b = SubFunc,c = 0; b < d; b++) // заполняем данными флаги в регистре R_DOUT
    205e:	8e 15       	cp	r24, r14
    2060:	48 f3       	brcs	.-46     	; 0x2034 <MODBUS_K15+0x5c>
  else OutControl(b,0); 	   					// если = 0 - Сбросим соответствующий бит в регистре
  c++;
  }
// *************** Теперь составим ответ **********************************
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;		// Запишем адрес контроллера
    2062:	80 91 05 03 	lds	r24, 0x0305
    2066:	80 93 07 03 	sts	0x0307, r24
 _UART_TX_Buf[b++] = Func; 						// Запишем выполненую команду
    206a:	80 91 01 03 	lds	r24, 0x0301
    206e:	80 93 08 03 	sts	0x0308, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];			// Запишем запрошеный адрес выхода ст. байт
    2072:	80 91 07 01 	lds	r24, 0x0107
    2076:	80 93 09 03 	sts	0x0309, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3]; 	   		// Запишем запрошеный адрес выхода мл. байт
    207a:	80 91 08 01 	lds	r24, 0x0108
    207e:	80 93 0a 03 	sts	0x030A, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];			// Запишем записаные данные кол-во выходов ст. байт
    2082:	80 91 09 01 	lds	r24, 0x0109
    2086:	80 93 0b 03 	sts	0x030B, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5]; 	   		// Запишем записаные данные кол-во выходов мл. байт
    208a:	80 91 0a 01 	lds	r24, 0x010A
    208e:	80 93 0c 03 	sts	0x030C, r24
// ---- Подсчет CRC ----
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    2092:	66 e0       	ldi	r22, 0x06	; 6
    2094:	87 e0       	ldi	r24, 0x07	; 7
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  			// Пишем младший байт - вначале передаем младший байт
    209c:	80 93 0d 03 	sts	0x030D, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);		// Пишем старший байт 
    20a0:	90 93 0e 03 	sts	0x030E, r25

 _UART_TX_length = b;	  	  				// Запишем кол - во передаваемых байт из буфера
    20a4:	88 e0       	ldi	r24, 0x08	; 8
    20a6:	80 93 39 04 	sts	0x0439, r24
}
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	08 95       	ret

000020b8 <MODBUS_K16>:
/*****************************************************************************
 Установка (Запись) в несколько Holding регистров (запись)
******************************************************************************
*****************************************************************************/
void MODBUS_K16(void)
{
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
// Внутренние переменные
unsigned int n;
unsigned char b,d,c;

asm("wdr");
    20be:	a8 95       	wdr

d = SubFunc + Data; // Считаю макс адрес записываемого регистра
    20c0:	c0 91 06 04 	lds	r28, 0x0406
    20c4:	10 91 02 03 	lds	r17, 0x0302
    20c8:	1c 0f       	add	r17, r28
if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся
    20ca:	1d 37       	cpi	r17, 0x7D	; 125
    20cc:	18 f4       	brcc	.+6      	; 0x20d4 <MODBUS_K16+0x1c>

// --- Выполню запись в регистры  ---
for(b = SubFunc, c = 0; b < d; b++) // заполняем
    20ce:	c1 17       	cp	r28, r17
    20d0:	28 f0       	brcs	.+10     	; 0x20dc <MODBUS_K16+0x24>
    20d2:	a4 c0       	rjmp	.+328    	; 0x221c <MODBUS_K16+0x164>
unsigned char b,d,c;

asm("wdr");

d = SubFunc + Data; // Считаю макс адрес записываемого регистра
if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	80 93 04 02 	sts	0x0204, r24
    20da:	c4 c0       	rjmp	.+392    	; 0x2264 <MODBUS_K16+0x1ac>

// --- Выполню запись в регистры  ---
for(b = SubFunc, c = 0; b < d; b++) // заполняем
    20dc:	d0 e0       	ldi	r29, 0x00	; 0
 {
  MB_Hreg[b] = (_UART_RX_dup[7+(c*2)] << 8) | _UART_RX_dup[8+(c*2)]; // Это просто в Holding
    20de:	ed 2f       	mov	r30, r29
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ac 2f       	mov	r26, r28
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	aa 0f       	add	r26, r26
    20ec:	bb 1f       	adc	r27, r27
    20ee:	a7 5c       	subi	r26, 0xC7	; 199
    20f0:	ba 4f       	sbci	r27, 0xFA	; 250
    20f2:	eb 5f       	subi	r30, 0xFB	; 251
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	87 81       	ldd	r24, Z+7	; 0x07
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	98 2f       	mov	r25, r24
    20fc:	88 27       	eor	r24, r24
    20fe:	20 85       	ldd	r18, Z+8	; 0x08
    2100:	82 2b       	or	r24, r18
    2102:	8d 93       	st	X+, r24
    2104:	9c 93       	st	X, r25
  // --- Для контроллера КМ01-8600.М ---
  #ifdef _KM8600_
    if(b == 34) wr_pwm();			// если это параметры ШИМ - записать новое значение в EEPROM
    2106:	c2 32       	cpi	r28, 0x22	; 34
    2108:	19 f4       	brne	.+6      	; 0x2110 <MODBUS_K16+0x58>
    210a:	0e 94 96 09 	call	0x132c	; 0x132c <wr_pwm>
    210e:	81 c0       	rjmp	.+258    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 35) wr_mcnt();		// если это конфигурация счетчиков - записать новое значение в EEPROM
    2110:	c3 32       	cpi	r28, 0x23	; 35
    2112:	19 f4       	brne	.+6      	; 0x211a <MODBUS_K16+0x62>
    2114:	0e 94 b3 09 	call	0x1366	; 0x1366 <wr_mcnt>
    2118:	7c c0       	rjmp	.+248    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 36) wr_vcnt1();	// если это значение делителя для счетчика №1 - записать новое значение в EEPROM
    211a:	c4 32       	cpi	r28, 0x24	; 36
    211c:	19 f4       	brne	.+6      	; 0x2124 <MODBUS_K16+0x6c>
    211e:	0e 94 bf 09 	call	0x137e	; 0x137e <wr_vcnt1>
    2122:	77 c0       	rjmp	.+238    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 37) wr_vcnt2();	// если это значение делителя для счетчика №2 - записать новое значение в EEPROM
    2124:	c5 32       	cpi	r28, 0x25	; 37
    2126:	19 f4       	brne	.+6      	; 0x212e <MODBUS_K16+0x76>
    2128:	0e 94 e7 09 	call	0x13ce	; 0x13ce <wr_vcnt2>
    212c:	72 c0       	rjmp	.+228    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 38) wr_vcnt3();	// если это значение делителя для счетчика №3 - записать новое значение в EEPROM
    212e:	c6 32       	cpi	r28, 0x26	; 38
    2130:	19 f4       	brne	.+6      	; 0x2138 <MODBUS_K16+0x80>
    2132:	0e 94 0f 0a 	call	0x141e	; 0x141e <wr_vcnt3>
    2136:	6d c0       	rjmp	.+218    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 39) wr_vcnt4();	// если это значение делителя для счетчика №4 - записать новое значение в EEPROM
    2138:	c7 32       	cpi	r28, 0x27	; 39
    213a:	19 f4       	brne	.+6      	; 0x2142 <MODBUS_K16+0x8a>
    213c:	0e 94 37 0a 	call	0x146e	; 0x146e <wr_vcnt4>
    2140:	68 c0       	rjmp	.+208    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 40) wr_vcnt5();	// если это значение делителя для счетчика №5 - записать новое значение в EEPROM
    2142:	c8 32       	cpi	r28, 0x28	; 40
    2144:	19 f4       	brne	.+6      	; 0x214c <MODBUS_K16+0x94>
    2146:	0e 94 5f 0a 	call	0x14be	; 0x14be <wr_vcnt5>
    214a:	63 c0       	rjmp	.+198    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 42) wr_vcnt6();	// если это значение делителя для счетчика №6 - записать новое значение в EEPROM
    214c:	ca 32       	cpi	r28, 0x2A	; 42
    214e:	19 f4       	brne	.+6      	; 0x2156 <MODBUS_K16+0x9e>
    2150:	0e 94 87 0a 	call	0x150e	; 0x150e <wr_vcnt6>
    2154:	5e c0       	rjmp	.+188    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 42) wr_vcnt7();	// если это значение делителя для счетчика №7 - записать новое значение в EEPROM
    else if(b == 43) wr_vcnt8();	// если это значение делителя для счетчика №8 - записать новое значение в EEPROM
    2156:	cb 32       	cpi	r28, 0x2B	; 43
    2158:	19 f4       	brne	.+6      	; 0x2160 <MODBUS_K16+0xa8>
    215a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <wr_vcnt8>
    215e:	59 c0       	rjmp	.+178    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 44) wr_vhcnt1();	// если это старшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    2160:	cc 32       	cpi	r28, 0x2C	; 44
    2162:	19 f4       	brne	.+6      	; 0x216a <MODBUS_K16+0xb2>
    2164:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <wr_vhcnt1>
    2168:	54 c0       	rjmp	.+168    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 45) wr_vlcnt1();	// если это младшее опорное слово для счетчика №1 - записать новое значение в EEPROM
    216a:	cd 32       	cpi	r28, 0x2D	; 45
    216c:	19 f4       	brne	.+6      	; 0x2174 <MODBUS_K16+0xbc>
    216e:	0e 94 cb 09 	call	0x1396	; 0x1396 <wr_vlcnt1>
    2172:	4f c0       	rjmp	.+158    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 46) wr_vhcnt2();	// если это старшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    2174:	ce 32       	cpi	r28, 0x2E	; 46
    2176:	19 f4       	brne	.+6      	; 0x217e <MODBUS_K16+0xc6>
    2178:	0e 94 01 0a 	call	0x1402	; 0x1402 <wr_vhcnt2>
    217c:	4a c0       	rjmp	.+148    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 47) wr_vlcnt2();	// если это младшее опорное слово для счетчика №2 - записать новое значение в EEPROM
    217e:	cf 32       	cpi	r28, 0x2F	; 47
    2180:	19 f4       	brne	.+6      	; 0x2188 <MODBUS_K16+0xd0>
    2182:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <wr_vlcnt2>
    2186:	45 c0       	rjmp	.+138    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 48) wr_vhcnt3();	// если это старшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    2188:	c0 33       	cpi	r28, 0x30	; 48
    218a:	19 f4       	brne	.+6      	; 0x2192 <MODBUS_K16+0xda>
    218c:	0e 94 29 0a 	call	0x1452	; 0x1452 <wr_vhcnt3>
    2190:	40 c0       	rjmp	.+128    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 49) wr_vlcnt3();	// если это младшее опорное слово для счетчика №3 - записать новое значение в EEPROM
    2192:	c1 33       	cpi	r28, 0x31	; 49
    2194:	19 f4       	brne	.+6      	; 0x219c <MODBUS_K16+0xe4>
    2196:	0e 94 1b 0a 	call	0x1436	; 0x1436 <wr_vlcnt3>
    219a:	3b c0       	rjmp	.+118    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 50) wr_vhcnt4();	// если это старшее опорное слово для счетчика №4 - записать новое значение в EEPROM
    219c:	c2 33       	cpi	r28, 0x32	; 50
    219e:	19 f4       	brne	.+6      	; 0x21a6 <MODBUS_K16+0xee>
    21a0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <wr_vhcnt4>
    21a4:	36 c0       	rjmp	.+108    	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 51) wr_vlcnt4();	// если это младшее опорное слово для счетчика №4 - записать новое значение в EEPROM
    21a6:	c3 33       	cpi	r28, 0x33	; 51
    21a8:	19 f4       	brne	.+6      	; 0x21b0 <MODBUS_K16+0xf8>
    21aa:	0e 94 43 0a 	call	0x1486	; 0x1486 <wr_vlcnt4>
    21ae:	31 c0       	rjmp	.+98     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 52) wr_vhcnt5();	// если это старшее опорное слово для счетчика №5 - записать новое значение в EEPROM
    21b0:	c4 33       	cpi	r28, 0x34	; 52
    21b2:	19 f4       	brne	.+6      	; 0x21ba <MODBUS_K16+0x102>
    21b4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <wr_vhcnt5>
    21b8:	2c c0       	rjmp	.+88     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 53) wr_vlcnt5();	// если это младшее опорное слово для счетчика №5 - записать новое значение в EEPROM
    21ba:	c5 33       	cpi	r28, 0x35	; 53
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <MODBUS_K16+0x10c>
    21be:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <wr_vlcnt5>
    21c2:	27 c0       	rjmp	.+78     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 54) wr_vhcnt6();	// если это старшее опорное слово для счетчика №6 - записать новое значение в EEPROM
    21c4:	c6 33       	cpi	r28, 0x36	; 54
    21c6:	19 f4       	brne	.+6      	; 0x21ce <MODBUS_K16+0x116>
    21c8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <wr_vhcnt6>
    21cc:	22 c0       	rjmp	.+68     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 55) wr_vlcnt6();	// если это младшее опорное слово для счетчика №6 - записать новое значение в EEPROM
    21ce:	c7 33       	cpi	r28, 0x37	; 55
    21d0:	19 f4       	brne	.+6      	; 0x21d8 <MODBUS_K16+0x120>
    21d2:	0e 94 93 0a 	call	0x1526	; 0x1526 <wr_vlcnt6>
    21d6:	1d c0       	rjmp	.+58     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 56) wr_vhcnt7();	// если это старшее опорное слово для счетчика №7 - записать новое значение в EEPROM
    21d8:	c8 33       	cpi	r28, 0x38	; 56
    21da:	19 f4       	brne	.+6      	; 0x21e2 <MODBUS_K16+0x12a>
    21dc:	0e 94 bd 0a 	call	0x157a	; 0x157a <wr_vhcnt7>
    21e0:	18 c0       	rjmp	.+48     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 57) wr_vlcnt7();	// если это младшее опорное слово для счетчика №7 - записать новое значение в EEPROM
    21e2:	c9 33       	cpi	r28, 0x39	; 57
    21e4:	19 f4       	brne	.+6      	; 0x21ec <MODBUS_K16+0x134>
    21e6:	0e 94 af 0a 	call	0x155e	; 0x155e <wr_vlcnt7>
    21ea:	13 c0       	rjmp	.+38     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 58) wr_vhcnt8();	// если это старшее опорное слово для счетчика №8 - записать новое значение в EEPROM
    21ec:	ca 33       	cpi	r28, 0x3A	; 58
    21ee:	19 f4       	brne	.+6      	; 0x21f6 <MODBUS_K16+0x13e>
    21f0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <wr_vhcnt8>
    21f4:	0e c0       	rjmp	.+28     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 59) wr_vlcnt8();	// если это младшее опорное слово для счетчика №8 - записать новое значение в EEPROM
    21f6:	cb 33       	cpi	r28, 0x3B	; 59
    21f8:	19 f4       	brne	.+6      	; 0x2200 <MODBUS_K16+0x148>
    21fa:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <wr_vlcnt8>
    21fe:	09 c0       	rjmp	.+18     	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 61) wr_adr();		// если это адрес контроллера - записать новое значение в EEPROM
    2200:	cd 33       	cpi	r28, 0x3D	; 61
    2202:	19 f4       	brne	.+6      	; 0x220a <MODBUS_K16+0x152>
    2204:	0e 94 6d 09 	call	0x12da	; 0x12da <wr_adr>
    2208:	04 c0       	rjmp	.+8      	; 0x2212 <MODBUS_K16+0x15a>
    else if(b == 62) wr_par();		// если это параметры сети - записать новое значение в EEPROM
    220a:	ce 33       	cpi	r28, 0x3E	; 62
    220c:	11 f4       	brne	.+4      	; 0x2212 <MODBUS_K16+0x15a>
    220e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <wr_par>
  #endif
  c++;
    2212:	df 5f       	subi	r29, 0xFF	; 255

d = SubFunc + Data; // Считаю макс адрес записываемого регистра
if(d > maxAddrRegHOLD) {m_coderr=2; return;} // Если запрашивается изменение регистра больше имеющихся

// --- Выполню запись в регистры  ---
for(b = SubFunc, c = 0; b < d; b++) // заполняем
    2214:	cf 5f       	subi	r28, 0xFF	; 255
    2216:	c1 17       	cp	r28, r17
    2218:	08 f4       	brcc	.+2      	; 0x221c <MODBUS_K16+0x164>
    221a:	61 cf       	rjmp	.-318    	; 0x20de <MODBUS_K16+0x26>
  #endif
  c++;
 }
 // ----------------- Составляем ответ ---------------------------------------------
b = 0;
 _UART_TX_Buf[b++] = Address_device & 0xFF;   // Запишем адрес контроллера
    221c:	80 91 05 03 	lds	r24, 0x0305
    2220:	80 93 07 03 	sts	0x0307, r24
 _UART_TX_Buf[b++] = Func; 		  // Запишем выполненую команду
    2224:	80 91 01 03 	lds	r24, 0x0301
    2228:	80 93 08 03 	sts	0x0308, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[2];		  // Запишем ст. байт начального адреса регистра
    222c:	80 91 07 01 	lds	r24, 0x0107
    2230:	80 93 09 03 	sts	0x0309, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[3];		  // Запишем мл. байт начального адреса регистра
    2234:	80 91 08 01 	lds	r24, 0x0108
    2238:	80 93 0a 03 	sts	0x030A, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[4];		  // Запишем ст. байт кол-ва записаных регистров
    223c:	80 91 09 01 	lds	r24, 0x0109
    2240:	80 93 0b 03 	sts	0x030B, r24
 _UART_TX_Buf[b++] = _UART_RX_dup[5];		  // Запишем мл. байт кол-ва записаных регистров
    2244:	80 91 0a 01 	lds	r24, 0x010A
    2248:	80 93 0c 03 	sts	0x030C, r24
// --- Подсчет CRC ---
 n = _CRC_calc(_UART_TX_Buf,b);				// Считаем CRC
    224c:	66 e0       	ldi	r22, 0x06	; 6
    224e:	87 e0       	ldi	r24, 0x07	; 7
    2250:	93 e0       	ldi	r25, 0x03	; 3
    2252:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
 _UART_TX_Buf[b++] = n & 0xFF;	  		  // Пишем младший байт - вначале передаем младший байт
    2256:	80 93 0d 03 	sts	0x030D, r24
 _UART_TX_Buf[b++] = ((n >> 8) & 0xFF);  // Пишем старший байт - затем старший байт
    225a:	90 93 0e 03 	sts	0x030E, r25

_UART_TX_length = b;	  	  				// Запишем кол - во передаваемых байт из буфера
    225e:	88 e0       	ldi	r24, 0x08	; 8
    2260:	80 93 39 04 	sts	0x0439, r24
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	08 95       	ret

0000226c <MODBUS_RTU>:
	buf[2]+buf[3]		- Код подфункции (адрес элемента)
	buf[4]+buf[5]		- Данные (для функций 0x05, 0x06 записываемые данные, для 0x01-0x04 количество считываемых данных)
	buf[6]+buf[7]		- CRC свертка (контрольная сумма стандарта Modbus RTU)
	*/
unsigned int q;
asm("wdr");
    226c:	a8 95       	wdr
if(_UART_RX_dup[0] == (Address_device & 0xFF)) // Выполнить если адрес совпадает
    226e:	90 91 05 01 	lds	r25, 0x0105
    2272:	80 91 05 03 	lds	r24, 0x0305
    2276:	98 13       	cpse	r25, r24
    2278:	8c c0       	rjmp	.+280    	; 0x2392 <MODBUS_RTU+0x126>
  {
	// --------------- Заполню полученными данными рабочие регистры -----------------------------------------------
	m_coderr = 0;											// Код ошибки изначально = 0
    227a:	10 92 04 02 	sts	0x0204, r1
	Func = _UART_RX_dup[1];									// Получим выполняемую комманду
    227e:	20 91 06 01 	lds	r18, 0x0106
    2282:	20 93 01 03 	sts	0x0301, r18
	SubFunc = (_UART_RX_dup[2]<<8) | _UART_RX_dup[3];		// Получим начальный адрес регистрового поля из запроса
    2286:	80 91 07 01 	lds	r24, 0x0107
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	98 2f       	mov	r25, r24
    228e:	88 27       	eor	r24, r24
    2290:	30 91 08 01 	lds	r19, 0x0108
    2294:	83 2b       	or	r24, r19
    2296:	90 93 07 04 	sts	0x0407, r25
    229a:	80 93 06 04 	sts	0x0406, r24
	Data = (_UART_RX_dup[4]<<8) | _UART_RX_dup[5];	// Получим кол-во запрашиваемых квантов
    229e:	80 91 09 01 	lds	r24, 0x0109
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	98 2f       	mov	r25, r24
    22a6:	88 27       	eor	r24, r24
    22a8:	30 91 0a 01 	lds	r19, 0x010A
    22ac:	83 2b       	or	r24, r19
    22ae:	90 93 03 03 	sts	0x0303, r25
    22b2:	80 93 02 03 	sts	0x0302, r24
	_UART_TX_length = 0; // Обнулю кол-во байт для передачи
    22b6:	10 92 39 04 	sts	0x0439, r1
	
	if((Func == 5) || (Func == 6)) Data = 1; // --- если команда 5 или 6 то по умолчанию - количество запросов = 1
    22ba:	8b ef       	ldi	r24, 0xFB	; 251
    22bc:	82 0f       	add	r24, r18
    22be:	82 30       	cpi	r24, 0x02	; 2
    22c0:	38 f4       	brcc	.+14     	; 0x22d0 <MODBUS_RTU+0x64>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	90 93 03 03 	sts	0x0303, r25
    22ca:	80 93 02 03 	sts	0x0302, r24
    22ce:	0a c0       	rjmp	.+20     	; 0x22e4 <MODBUS_RTU+0x78>

	// ---------------------------- Выполним команды ---------------------------------------------------------------
	//------------Проверка параметров на допустимость ---------------------
	if (Data==0)	//если запросили 0 квантов - для команд кроме 5 и 6
    22d0:	80 91 02 03 	lds	r24, 0x0302
    22d4:	90 91 03 03 	lds	r25, 0x0303
    22d8:	89 2b       	or	r24, r25
    22da:	21 f4       	brne	.+8      	; 0x22e4 <MODBUS_RTU+0x78>
		{ m_coderr=3;} // Установим код ошибки - неверный адрес регистра	
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	80 93 04 02 	sts	0x0204, r24
    22e2:	54 c0       	rjmp	.+168    	; 0x238c <MODBUS_RTU+0x120>
	else if (Func == 1)
    22e4:	21 30       	cpi	r18, 0x01	; 1
    22e6:	19 f4       	brne	.+6      	; 0x22ee <MODBUS_RTU+0x82>
		{/*---------------------------- k1 -----------------------------------*/
		MODBUS_K1_2();}	//чтение дискретного выхода DO[1...16]
    22e8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <MODBUS_K1_2>
    22ec:	27 c0       	rjmp	.+78     	; 0x233c <MODBUS_RTU+0xd0>
		
	else if (Func == 2)
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	19 f4       	brne	.+6      	; 0x22f8 <MODBUS_RTU+0x8c>
		{/*---------------------------- k2 -----------------------------------*/	 
		MODBUS_K1_2();}	//чтение дискретного входа DI[1...16]
    22f2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <MODBUS_K1_2>
    22f6:	22 c0       	rjmp	.+68     	; 0x233c <MODBUS_RTU+0xd0>
	else if (Func == 3)
    22f8:	23 30       	cpi	r18, 0x03	; 3
    22fa:	19 f4       	brne	.+6      	; 0x2302 <MODBUS_RTU+0x96>
		{/*---------------------------- k3 -----------------------------------*/
		MODBUS_K3_4();}	//чтение нескольких регистров Holding[1...16]	
    22fc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MODBUS_K3_4>
    2300:	1d c0       	rjmp	.+58     	; 0x233c <MODBUS_RTU+0xd0>
	else if (Func == 4)
    2302:	24 30       	cpi	r18, 0x04	; 4
    2304:	19 f4       	brne	.+6      	; 0x230c <MODBUS_RTU+0xa0>
		{/*---------------------------- k4 -----------------------------------*/
		MODBUS_K3_4();} //чтение нескольких регистров Input [1...16] 		
    2306:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <MODBUS_K3_4>
    230a:	18 c0       	rjmp	.+48     	; 0x233c <MODBUS_RTU+0xd0>
	else if (Func == 5)
    230c:	25 30       	cpi	r18, 0x05	; 5
    230e:	19 f4       	brne	.+6      	; 0x2316 <MODBUS_RTU+0xaa>
		{/*---------------------------- k5 -----------------------------------*/
		MODBUS_K5();}	//Установка (запись) дискретного вывода DO[1...16]	
    2310:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <MODBUS_K5>
    2314:	13 c0       	rjmp	.+38     	; 0x233c <MODBUS_RTU+0xd0>
	else if (Func == 6)
    2316:	26 30       	cpi	r18, 0x06	; 6
    2318:	19 f4       	brne	.+6      	; 0x2320 <MODBUS_RTU+0xb4>
		{/*---------------------------- k6 -----------------------------------*/	
		MODBUS_K6();}	//Установка (запись) одного регистра Holding 		
    231a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <MODBUS_K6>
    231e:	0e c0       	rjmp	.+28     	; 0x233c <MODBUS_RTU+0xd0>
	else if (Func == 15)	
    2320:	2f 30       	cpi	r18, 0x0F	; 15
    2322:	19 f4       	brne	.+6      	; 0x232a <MODBUS_RTU+0xbe>
		{/*---------------------------- k15 -----------------------------------*/
		MODBUS_K15();}	//Установка (запись) нескольких дискретных выходов DO[1...16]
    2324:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <MODBUS_K15>
    2328:	09 c0       	rjmp	.+18     	; 0x233c <MODBUS_RTU+0xd0>
	else if (Func == 16)
    232a:	20 31       	cpi	r18, 0x10	; 16
    232c:	19 f4       	brne	.+6      	; 0x2334 <MODBUS_RTU+0xc8>
		{/*---------------------------- k16 -----------------------------------*/	
		MODBUS_K16();}	//Установка (запись) нескольких регистров Holding[1...16]
    232e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <MODBUS_K16>
    2332:	04 c0       	rjmp	.+8      	; 0x233c <MODBUS_RTU+0xd0>
	else m_coderr=1; // Не правильно задана функция для данного контроллера (не совпала ни одна команда)
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 04 02 	sts	0x0204, r24
    233a:	28 c0       	rjmp	.+80     	; 0x238c <MODBUS_RTU+0x120>
	
	/* ------ Здесь надо составить ответ или ОШИБКА если он еще не составлен ------- */
	if(m_coderr == 0)   // --- Если ошибки нет ---
    233c:	80 91 04 02 	lds	r24, 0x0204
    2340:	81 11       	cpse	r24, r1
    2342:	08 c0       	rjmp	.+16     	; 0x2354 <MODBUS_RTU+0xe8>
	 {
	 if(_UART_TX_length != 0)  _UART_Go(_UART_TX_length); // и есть байты для отправки то - Активизировать порт передачи
    2344:	80 91 39 04 	lds	r24, 0x0439
    2348:	88 23       	and	r24, r24
    234a:	19 f1       	breq	.+70     	; 0x2392 <MODBUS_RTU+0x126>
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_UART_Go>
    2352:	08 95       	ret
	 }
	else		 	   // --- ОШИБКА - надо отослать фрейм ошибки ---
	 {
	  _UART_TX_Buf[0] = Address_device & 0xFF;	// Запишем адрес контроллера
    2354:	90 91 05 03 	lds	r25, 0x0305
    2358:	90 93 07 03 	sts	0x0307, r25
	  _UART_TX_Buf[1] = (Func | 0x80); 			// Запишем выполненую команду с уст. флагом ошибки
    235c:	90 91 01 03 	lds	r25, 0x0301
    2360:	90 68       	ori	r25, 0x80	; 128
    2362:	90 93 08 03 	sts	0x0308, r25
	  _UART_TX_Buf[2] = m_coderr;	  			// Пишем код ошибки
    2366:	80 93 09 03 	sts	0x0309, r24
	  // -------------- Кол - во целых байт для подсчета CRC --------------------
	  q = _CRC_calc(_UART_TX_Buf,3);		// Считаем CRC
    236a:	63 e0       	ldi	r22, 0x03	; 3
    236c:	87 e0       	ldi	r24, 0x07	; 7
    236e:	93 e0       	ldi	r25, 0x03	; 3
    2370:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_CRC_calc>
	  _UART_TX_Buf[3] = q & 0xFF;	  		// Пишем младший байт - вначале передаем младший байт
    2374:	80 93 0a 03 	sts	0x030A, r24
	  _UART_TX_Buf[4] = ((q >> 8) & 0xFF);	// Пишем старший байт - затем старший байт
    2378:	90 93 0b 03 	sts	0x030B, r25
	  _UART_TX_length = 5;	  	  			// Запишем кол - во передаваемых байт из буфера NetTxData
    237c:	85 e0       	ldi	r24, 0x05	; 5
    237e:	80 93 39 04 	sts	0x0439, r24
	  _UART_Go(_UART_TX_length);			// Активизировать порт передачи - Старт передачи пакета
    2382:	85 e0       	ldi	r24, 0x05	; 5
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_UART_Go>
    238a:	08 95       	ret
		{/*---------------------------- k16 -----------------------------------*/	
		MODBUS_K16();}	//Установка (запись) нескольких регистров Holding[1...16]
	else m_coderr=1; // Не правильно задана функция для данного контроллера (не совпала ни одна команда)
	
	/* ------ Здесь надо составить ответ или ОШИБКА если он еще не составлен ------- */
	if(m_coderr == 0)   // --- Если ошибки нет ---
    238c:	80 91 04 02 	lds	r24, 0x0204
    2390:	e1 cf       	rjmp	.-62     	; 0x2354 <MODBUS_RTU+0xe8>
    2392:	08 95       	ret

00002394 <takt_timer>:
}
*/
// ============ takt_timer выполняется по прерыванию каждые 10 мсек =================
void takt_timer(void)
{  unsigned char n;
	n = TimerTakt;
    2394:	80 91 04 01 	lds	r24, 0x0104
	if (n) TimerTakt = --n;		// Время выполнения основного цикла
    2398:	88 23       	and	r24, r24
    239a:	19 f0       	breq	.+6      	; 0x23a2 <takt_timer+0xe>
    239c:	81 50       	subi	r24, 0x01	; 1
    239e:	80 93 04 01 	sts	0x0104, r24
	n = TimerLed;
    23a2:	80 91 04 03 	lds	r24, 0x0304
	if (n) TimerLed = --n;		// Уменьшить счетчик
    23a6:	88 23       	and	r24, r24
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <takt_timer+0x1c>
    23aa:	81 50       	subi	r24, 0x01	; 1
    23ac:	80 93 04 03 	sts	0x0304, r24
    23b0:	08 95       	ret

000023b2 <__vector_15>:
}
// ============ Обработка прерывания таймера 1 (каждые 10 мсек) =====================
ISR(TIMER1_OVF_vect)
{
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	6f 93       	push	r22
    23c6:	7f 93       	push	r23
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	af 93       	push	r26
    23ce:	bf 93       	push	r27
    23d0:	ef 93       	push	r30
    23d2:	ff 93       	push	r31
	TCNT1H = 0xFF;
    23d4:	8f ef       	ldi	r24, 0xFF	; 255
    23d6:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 255 - 144;
    23da:	8f e6       	ldi	r24, 0x6F	; 111
    23dc:	80 93 84 00 	sts	0x0084, r24
	takt_timer();
    23e0:	0e 94 ca 11 	call	0x2394	; 0x2394 <takt_timer>
}
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	bf 91       	pop	r27
    23ea:	af 91       	pop	r26
    23ec:	9f 91       	pop	r25
    23ee:	8f 91       	pop	r24
    23f0:	7f 91       	pop	r23
    23f2:	6f 91       	pop	r22
    23f4:	5f 91       	pop	r21
    23f6:	4f 91       	pop	r20
    23f8:	3f 91       	pop	r19
    23fa:	2f 91       	pop	r18
    23fc:	0f 90       	pop	r0
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	0f 90       	pop	r0
    2402:	1f 90       	pop	r1
    2404:	18 95       	reti

00002406 <Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2406:	2f ef       	ldi	r18, 0xFF	; 255
    2408:	3f e7       	ldi	r19, 0x7F	; 127
    240a:	86 e1       	ldi	r24, 0x16	; 22
    240c:	21 50       	subi	r18, 0x01	; 1
    240e:	30 40       	sbci	r19, 0x00	; 0
    2410:	80 40       	sbci	r24, 0x00	; 0
    2412:	e1 f7       	brne	.-8      	; 0x240c <Init+0x6>
    2414:	00 c0       	rjmp	.+0      	; 0x2416 <Init+0x10>
    2416:	00 00       	nop
void Init(void)
{
unsigned char i;

	_delay_ms(500);		// Задержка при старте
	InitLine();			// Настраиваю порты контроллера
    2418:	0e 94 68 00 	call	0xd0	; 0xd0 <InitLine>
//	InitWdt();			// Настройка сторожевого таймера (пока в резерве
	LD_on;				// Включить зеленый светодиод
    241c:	2b 9a       	sbi	0x05, 3	; 5
	WDR();				// Сброс собачьего таймера
    241e:	a8 95       	wdr
    2420:	9f ef       	ldi	r25, 0xFF	; 255
    2422:	2f e7       	ldi	r18, 0x7F	; 127
    2424:	36 e1       	ldi	r19, 0x16	; 22
    2426:	91 50       	subi	r25, 0x01	; 1
    2428:	20 40       	sbci	r18, 0x00	; 0
    242a:	30 40       	sbci	r19, 0x00	; 0
    242c:	e1 f7       	brne	.-8      	; 0x2426 <Init+0x20>
    242e:	00 c0       	rjmp	.+0      	; 0x2430 <Init+0x2a>
    2430:	00 00       	nop
    2432:	e7 e0       	ldi	r30, 0x07	; 7
    2434:	f2 e0       	ldi	r31, 0x02	; 2
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	92 e0       	ldi	r25, 0x02	; 2
	_delay_ms(500);		// Задержка при старте
	for(i=0; i<maxAddrRegINP;i++) { MB_Ireg[i] = 0; }	// Очистить INPUT регистры
    243a:	11 92       	st	Z+, r1
    243c:	11 92       	st	Z+, r1
    243e:	e8 17       	cp	r30, r24
    2440:	f9 07       	cpc	r31, r25
    2442:	d9 f7       	brne	.-10     	; 0x243a <Init+0x34>
    2444:	e9 e3       	ldi	r30, 0x39	; 57
    2446:	f5 e0       	ldi	r31, 0x05	; 5
    2448:	81 e3       	ldi	r24, 0x31	; 49
    244a:	96 e0       	ldi	r25, 0x06	; 6
	for(i=0; i<maxAddrRegHOLD; i++) { MB_Hreg[i] = 0; }	// Очистить HOLD регистры
    244c:	11 92       	st	Z+, r1
    244e:	11 92       	st	Z+, r1
    2450:	e8 17       	cp	r30, r24
    2452:	f9 07       	cpc	r31, r25
    2454:	d9 f7       	brne	.-10     	; 0x244c <Init+0x46>
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f e7       	ldi	r25, 0x7F	; 127
    245a:	24 e0       	ldi	r18, 0x04	; 4
    245c:	81 50       	subi	r24, 0x01	; 1
    245e:	90 40       	sbci	r25, 0x00	; 0
    2460:	20 40       	sbci	r18, 0x00	; 0
    2462:	e1 f7       	brne	.-8      	; 0x245c <Init+0x56>
    2464:	00 c0       	rjmp	.+0      	; 0x2466 <Init+0x60>
    2466:	00 00       	nop
	_delay_ms(100);		// Задержка
	WDR();				// Сброс собачьего таймера
    2468:	a8 95       	wdr
	if((PIND & 0x80) == 0) 
    246a:	4f 99       	sbic	0x09, 7	; 9
    246c:	19 c0       	rjmp	.+50     	; 0x24a0 <Init+0x9a>
		{ 
			set_default(); 
    246e:	0e 94 50 07 	call	0xea0	; 0xea0 <set_default>
    2472:	85 e0       	ldi	r24, 0x05	; 5
			for(i=0; i<5; i++) // Моргнуть 5 раз!
			{
			LD_off; 
    2474:	2b 98       	cbi	0x05, 3	; 5
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	9f e7       	ldi	r25, 0x7F	; 127
    247a:	24 e0       	ldi	r18, 0x04	; 4
    247c:	31 50       	subi	r19, 0x01	; 1
    247e:	90 40       	sbci	r25, 0x00	; 0
    2480:	20 40       	sbci	r18, 0x00	; 0
    2482:	e1 f7       	brne	.-8      	; 0x247c <Init+0x76>
    2484:	00 c0       	rjmp	.+0      	; 0x2486 <Init+0x80>
    2486:	00 00       	nop
			_delay_ms(100); 
			LD_on; 
    2488:	2b 9a       	sbi	0x05, 3	; 5
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	9f e7       	ldi	r25, 0x7F	; 127
    248e:	24 e0       	ldi	r18, 0x04	; 4
    2490:	31 50       	subi	r19, 0x01	; 1
    2492:	90 40       	sbci	r25, 0x00	; 0
    2494:	20 40       	sbci	r18, 0x00	; 0
    2496:	e1 f7       	brne	.-8      	; 0x2490 <Init+0x8a>
    2498:	00 c0       	rjmp	.+0      	; 0x249a <Init+0x94>
    249a:	00 00       	nop
    249c:	81 50       	subi	r24, 0x01	; 1
	_delay_ms(100);		// Задержка
	WDR();				// Сброс собачьего таймера
	if((PIND & 0x80) == 0) 
		{ 
			set_default(); 
			for(i=0; i<5; i++) // Моргнуть 5 раз!
    249e:	51 f7       	brne	.-44     	; 0x2474 <Init+0x6e>
			_delay_ms(100); 
			LD_on; 
			_delay_ms(100); 
			}
		}
	WDR();						// Сброс собачьего таймера
    24a0:	a8 95       	wdr
	InitMem();					// Заполняю регистры Модбас данными из памяти
    24a2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <InitMem>
	CNT_clear();				// Очистить счетные регистры
    24a6:	0e 94 c4 05 	call	0xb88	; 0xb88 <CNT_clear>
	WDR();						// Сброс собачьего таймера
    24aa:	a8 95       	wdr
	InitDev();					// Инициализация внутренних систем контроллера
    24ac:	0e 94 76 00 	call	0xec	; 0xec <InitDev>
	LD_off;						// Выключить зеленый светодиод
    24b0:	2b 98       	cbi	0x05, 3	; 5
	MB_Ireg[27] = 0x0000;		// выкл все
    24b2:	10 92 3e 02 	sts	0x023E, r1
    24b6:	10 92 3d 02 	sts	0x023D, r1
	LED_Update();				// Обновить
    24ba:	0e 94 b4 00 	call	0x168	; 0x168 <LED_Update>
	WDR();						// Сброс собачьего таймера
    24be:	a8 95       	wdr
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	8f ef       	ldi	r24, 0xFF	; 255
    24c4:	9c e2       	ldi	r25, 0x2C	; 44
    24c6:	31 50       	subi	r19, 0x01	; 1
    24c8:	80 40       	sbci	r24, 0x00	; 0
    24ca:	90 40       	sbci	r25, 0x00	; 0
    24cc:	e1 f7       	brne	.-8      	; 0x24c6 <Init+0xc0>
    24ce:	00 c0       	rjmp	.+0      	; 0x24d0 <Init+0xca>
    24d0:	00 00       	nop
	_delay_ms(1000);			// Тест светодиодов (проверка работоспособности)
	MB_Ireg[27] = 0xFF00;		// вкл входы
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	9f ef       	ldi	r25, 0xFF	; 255
    24d6:	90 93 3e 02 	sts	0x023E, r25
    24da:	80 93 3d 02 	sts	0x023D, r24
	LED_Update();				// Обновить
    24de:	0e 94 b4 00 	call	0x168	; 0x168 <LED_Update>
	WDR();						// Сброс собачьего таймера
    24e2:	a8 95       	wdr
    24e4:	2f ef       	ldi	r18, 0xFF	; 255
    24e6:	3f e7       	ldi	r19, 0x7F	; 127
    24e8:	86 e1       	ldi	r24, 0x16	; 22
    24ea:	21 50       	subi	r18, 0x01	; 1
    24ec:	30 40       	sbci	r19, 0x00	; 0
    24ee:	80 40       	sbci	r24, 0x00	; 0
    24f0:	e1 f7       	brne	.-8      	; 0x24ea <Init+0xe4>
    24f2:	00 c0       	rjmp	.+0      	; 0x24f4 <Init+0xee>
    24f4:	00 00       	nop
	_delay_ms(500);				// Тест светодиодов (проверка работоспособности)
	MB_Ireg[27] = 0x003F;		// Вкл выходы
    24f6:	8f e3       	ldi	r24, 0x3F	; 63
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	90 93 3e 02 	sts	0x023E, r25
    24fe:	80 93 3d 02 	sts	0x023D, r24
	LED_Update();				// Обновить
    2502:	0e 94 b4 00 	call	0x168	; 0x168 <LED_Update>
	WDR();						// Сброс собачьего таймера
    2506:	a8 95       	wdr
    2508:	9f ef       	ldi	r25, 0xFF	; 255
    250a:	2f e7       	ldi	r18, 0x7F	; 127
    250c:	36 e1       	ldi	r19, 0x16	; 22
    250e:	91 50       	subi	r25, 0x01	; 1
    2510:	20 40       	sbci	r18, 0x00	; 0
    2512:	30 40       	sbci	r19, 0x00	; 0
    2514:	e1 f7       	brne	.-8      	; 0x250e <Init+0x108>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <Init+0x112>
    2518:	00 00       	nop
	_delay_ms(500);				// Тест светодиодов (проверка работоспособности)
	MB_Ireg[27] = 0x0040;		// Включить красный
    251a:	80 e4       	ldi	r24, 0x40	; 64
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	90 93 3e 02 	sts	0x023E, r25
    2522:	80 93 3d 02 	sts	0x023D, r24
	LED_Update();				// Обновить
    2526:	0e 94 b4 00 	call	0x168	; 0x168 <LED_Update>
	WDR();						// Сброс собачьего таймера
    252a:	a8 95       	wdr
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	9f e7       	ldi	r25, 0x7F	; 127
    2530:	26 e1       	ldi	r18, 0x16	; 22
    2532:	81 50       	subi	r24, 0x01	; 1
    2534:	90 40       	sbci	r25, 0x00	; 0
    2536:	20 40       	sbci	r18, 0x00	; 0
    2538:	e1 f7       	brne	.-8      	; 0x2532 <Init+0x12c>
    253a:	00 c0       	rjmp	.+0      	; 0x253c <Init+0x136>
    253c:	00 00       	nop
	_delay_ms(500);				// Тест светодиодов (проверка работоспособности)
	MB_Ireg[27] = 0x0000;		// выкл все
    253e:	10 92 3e 02 	sts	0x023E, r1
    2542:	10 92 3d 02 	sts	0x023D, r1
	LED_Update();				// Обновить
    2546:	0e 94 b4 00 	call	0x168	; 0x168 <LED_Update>
	LD_on;						// Включить зеленый светодиод
    254a:	2b 9a       	sbi	0x05, 3	; 5
	WDR();						// Сброс собачьего таймера
    254c:	a8 95       	wdr
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	8f e7       	ldi	r24, 0x7F	; 127
    2552:	96 e1       	ldi	r25, 0x16	; 22
    2554:	31 50       	subi	r19, 0x01	; 1
    2556:	80 40       	sbci	r24, 0x00	; 0
    2558:	90 40       	sbci	r25, 0x00	; 0
    255a:	e1 f7       	brne	.-8      	; 0x2554 <Init+0x14e>
    255c:	00 c0       	rjmp	.+0      	; 0x255e <Init+0x158>
    255e:	00 00       	nop
	_delay_ms(500);				// Тест светодиодов (проверка работоспособности)
	WDR();						// Сброс собачьего таймера
    2560:	a8 95       	wdr
	INP_Read();					// Считываю текущие состояния входов
    2562:	0e 94 39 02 	call	0x472	; 0x472 <INP_Read>
	COM_Init((char) MB_Hreg[62],(char) (MB_Hreg[62] >> 8)); // Настраиваю UART0 для работы RS-485
    2566:	e5 eb       	ldi	r30, 0xB5	; 181
    2568:	f5 e0       	ldi	r31, 0x05	; 5
    256a:	61 81       	ldd	r22, Z+1	; 0x01
    256c:	80 81       	ld	r24, Z
    256e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <COM_Init>
	Address_device = (char) MB_Hreg[61];					// Переписываю адрес контроллера в сети ModBus
    2572:	80 91 b3 05 	lds	r24, 0x05B3
    2576:	80 93 05 03 	sts	0x0305, r24
	// ----- Настраиваю работу таймера №1 ----
	TCCR1B = (1 << CS12)|(1<< CS10);	// Timer1 / 1024 - делим тактовую на 1024
    257a:	85 e0       	ldi	r24, 0x05	; 5
    257c:	80 93 81 00 	sts	0x0081, r24
	TCNT1H = 0xFF;
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 255 - (F_CPU / 1024 / 100);	// Прерывания каждые 10мсек!
    2586:	8f e6       	ldi	r24, 0x6F	; 111
    2588:	80 93 84 00 	sts	0x0084, r24
	TIMSK1 |= (1<<TOIE1);					// Включить прерывания Timer 1 при переполнении
    258c:	ef e6       	ldi	r30, 0x6F	; 111
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	81 60       	ori	r24, 0x01	; 1
    2594:	80 83       	st	Z, r24
    2596:	08 95       	ret

00002598 <command_reboot>:

// =========================== Команда перезагрузки контроллера ====================================================
void command_reboot(void)
{
//if((MB_Hreg[63] &0x01) != 0) {cli(); while(1);} // Перезагрузка по сбросу собачьего таймера (пока в резерве)
if((MB_Hreg[63] &0x01) != 0) {_delay_ms(20); asm("rjmp restart;");} // Если есть 1 то перейти на метку перезагрузки
    2598:	80 91 b7 05 	lds	r24, 0x05B7
    259c:	80 ff       	sbrs	r24, 0
    259e:	08 c0       	rjmp	.+16     	; 0x25b0 <command_reboot+0x18>
    25a0:	26 e6       	ldi	r18, 0x66	; 102
    25a2:	86 ee       	ldi	r24, 0xE6	; 230
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	21 50       	subi	r18, 0x01	; 1
    25a8:	80 40       	sbci	r24, 0x00	; 0
    25aa:	90 40       	sbci	r25, 0x00	; 0
    25ac:	e1 f7       	brne	.-8      	; 0x25a6 <command_reboot+0xe>
    25ae:	0b c0       	rjmp	.+22     	; 0x25c6 <restart>
    25b0:	08 95       	ret

000025b2 <main>:
}
//============================ Работа ядра системы =================================================================
int main(void)
{
	// --- Инициализация ---
	cli();
    25b2:	f8 94       	cli
    25b4:	2f ef       	ldi	r18, 0xFF	; 255
    25b6:	8f e7       	ldi	r24, 0x7F	; 127
    25b8:	96 e1       	ldi	r25, 0x16	; 22
    25ba:	21 50       	subi	r18, 0x01	; 1
    25bc:	80 40       	sbci	r24, 0x00	; 0
    25be:	90 40       	sbci	r25, 0x00	; 0
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <main+0x8>
    25c2:	00 c0       	rjmp	.+0      	; 0x25c4 <main+0x12>
	...

000025c6 <restart>:
	_delay_ms(500);	// Задержка при старте
asm("restart:");	// Метка для перехода по команде перезагрузки
	Init();			// Инициализация системы...
    25c6:	0e 94 03 12 	call	0x2406	; 0x2406 <Init>
	sei();			// Разрешить глобальные прерывания	
    25ca:	78 94       	sei
	TimerTakt = 10; // Задачу выполнять каждые 100мсек
    25cc:	8a e0       	ldi	r24, 0x0A	; 10
    25ce:	80 93 04 01 	sts	0x0104, r24
	TimerLed = 0;	// Светодиод включен!
    25d2:	10 92 04 03 	sts	0x0304, r1
	while(1)
	{
		WDR(); // Сброс собачьего таймера
		if(Read_Modbus() == 1)	{TimerLed = 10; MODBUS_RTU();}	// Если пакет принят, обработать принятый пакет ModBus
    25d6:	1a e0       	ldi	r17, 0x0A	; 10
			//**************************************************************************************
			OUT_Update();		// Обновить состояние дискретных выходов
			rd_cnt();			// Обновить показания счетчиков
			command_reboot();	// Проверить команду - не пора ли перезагрузиться???
			// === Формирую слово жизни контроллера ===
			if(MB_Ireg[0] <= 0xFFFA) MB_Ireg[0]++;
    25d8:	c7 e0       	ldi	r28, 0x07	; 7
    25da:	d2 e0       	ldi	r29, 0x02	; 2
	sei();			// Разрешить глобальные прерывания	
	TimerTakt = 10; // Задачу выполнять каждые 100мсек
	TimerLed = 0;	// Светодиод включен!
	while(1)
	{
		WDR(); // Сброс собачьего таймера
    25dc:	a8 95       	wdr
		if(Read_Modbus() == 1)	{TimerLed = 10; MODBUS_RTU();}	// Если пакет принят, обработать принятый пакет ModBus
    25de:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Read_Modbus>
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	21 f4       	brne	.+8      	; 0x25ee <restart+0x28>
    25e6:	10 93 04 03 	sts	0x0304, r17
    25ea:	0e 94 36 11 	call	0x226c	; 0x226c <MODBUS_RTU>
		if(TimerLed) LD_off; else LD_on; // выключить светодиод на 100мсек - принят пакет с адресом модуля
    25ee:	80 91 04 03 	lds	r24, 0x0304
    25f2:	88 23       	and	r24, r24
    25f4:	11 f0       	breq	.+4      	; 0x25fa <restart+0x34>
    25f6:	2b 98       	cbi	0x05, 3	; 5
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <restart+0x36>
    25fa:	2b 9a       	sbi	0x05, 3	; 5
		if(TimerTakt == 0)
    25fc:	80 91 04 01 	lds	r24, 0x0104
    2600:	81 11       	cpse	r24, r1
    2602:	ec cf       	rjmp	.-40     	; 0x25dc <restart+0x16>
		{
			TimerTakt = 10; // Перезагрузка таймера - следующее выполнение программы через 10*10=100мсек
    2604:	10 93 04 01 	sts	0x0104, r17
			// --- Состояния входов в рег Input меняются по прерываниям ---
			OUT_Read();			// Чтение состояния выходов
    2608:	0e 94 a7 04 	call	0x94e	; 0x94e <OUT_Read>
			IND_Update();		// Обновить состояние индикации
    260c:	0e 94 c3 00 	call	0x186	; 0x186 <IND_Update>
			//******************Здесь м.б. программа пользователя***********************************
			
			//**************************************************************************************
			OUT_Update();		// Обновить состояние дискретных выходов
    2610:	0e 94 31 05 	call	0xa62	; 0xa62 <OUT_Update>
			rd_cnt();			// Обновить показания счетчиков
    2614:	0e 94 27 06 	call	0xc4e	; 0xc4e <rd_cnt>
			command_reboot();	// Проверить команду - не пора ли перезагрузиться???
    2618:	0e 94 cc 12 	call	0x2598	; 0x2598 <command_reboot>
			// === Формирую слово жизни контроллера ===
			if(MB_Ireg[0] <= 0xFFFA) MB_Ireg[0]++;
    261c:	88 81       	ld	r24, Y
    261e:	99 81       	ldd	r25, Y+1	; 0x01
    2620:	8b 3f       	cpi	r24, 0xFB	; 251
    2622:	2f ef       	ldi	r18, 0xFF	; 255
    2624:	92 07       	cpc	r25, r18
    2626:	20 f4       	brcc	.+8      	; 0x2630 <restart+0x6a>
    2628:	01 96       	adiw	r24, 0x01	; 1
    262a:	99 83       	std	Y+1, r25	; 0x01
    262c:	88 83       	st	Y, r24
    262e:	d6 cf       	rjmp	.-84     	; 0x25dc <restart+0x16>
			else MB_Ireg[0] = 0;
    2630:	19 82       	std	Y+1, r1	; 0x01
    2632:	18 82       	st	Y, r1
    2634:	d3 cf       	rjmp	.-90     	; 0x25dc <restart+0x16>

00002636 <__subsf3>:
    2636:	50 58       	subi	r21, 0x80	; 128

00002638 <__addsf3>:
    2638:	bb 27       	eor	r27, r27
    263a:	aa 27       	eor	r26, r26
    263c:	0e d0       	rcall	.+28     	; 0x265a <__addsf3x>
    263e:	48 c1       	rjmp	.+656    	; 0x28d0 <__fp_round>
    2640:	39 d1       	rcall	.+626    	; 0x28b4 <__fp_pscA>
    2642:	30 f0       	brcs	.+12     	; 0x2650 <__addsf3+0x18>
    2644:	3e d1       	rcall	.+636    	; 0x28c2 <__fp_pscB>
    2646:	20 f0       	brcs	.+8      	; 0x2650 <__addsf3+0x18>
    2648:	31 f4       	brne	.+12     	; 0x2656 <__addsf3+0x1e>
    264a:	9f 3f       	cpi	r25, 0xFF	; 255
    264c:	11 f4       	brne	.+4      	; 0x2652 <__addsf3+0x1a>
    264e:	1e f4       	brtc	.+6      	; 0x2656 <__addsf3+0x1e>
    2650:	2e c1       	rjmp	.+604    	; 0x28ae <__fp_nan>
    2652:	0e f4       	brtc	.+2      	; 0x2656 <__addsf3+0x1e>
    2654:	e0 95       	com	r30
    2656:	e7 fb       	bst	r30, 7
    2658:	24 c1       	rjmp	.+584    	; 0x28a2 <__fp_inf>

0000265a <__addsf3x>:
    265a:	e9 2f       	mov	r30, r25
    265c:	4a d1       	rcall	.+660    	; 0x28f2 <__fp_split3>
    265e:	80 f3       	brcs	.-32     	; 0x2640 <__addsf3+0x8>
    2660:	ba 17       	cp	r27, r26
    2662:	62 07       	cpc	r22, r18
    2664:	73 07       	cpc	r23, r19
    2666:	84 07       	cpc	r24, r20
    2668:	95 07       	cpc	r25, r21
    266a:	18 f0       	brcs	.+6      	; 0x2672 <__addsf3x+0x18>
    266c:	71 f4       	brne	.+28     	; 0x268a <__addsf3x+0x30>
    266e:	9e f5       	brtc	.+102    	; 0x26d6 <__addsf3x+0x7c>
    2670:	62 c1       	rjmp	.+708    	; 0x2936 <__fp_zero>
    2672:	0e f4       	brtc	.+2      	; 0x2676 <__addsf3x+0x1c>
    2674:	e0 95       	com	r30
    2676:	0b 2e       	mov	r0, r27
    2678:	ba 2f       	mov	r27, r26
    267a:	a0 2d       	mov	r26, r0
    267c:	0b 01       	movw	r0, r22
    267e:	b9 01       	movw	r22, r18
    2680:	90 01       	movw	r18, r0
    2682:	0c 01       	movw	r0, r24
    2684:	ca 01       	movw	r24, r20
    2686:	a0 01       	movw	r20, r0
    2688:	11 24       	eor	r1, r1
    268a:	ff 27       	eor	r31, r31
    268c:	59 1b       	sub	r21, r25
    268e:	99 f0       	breq	.+38     	; 0x26b6 <__addsf3x+0x5c>
    2690:	59 3f       	cpi	r21, 0xF9	; 249
    2692:	50 f4       	brcc	.+20     	; 0x26a8 <__addsf3x+0x4e>
    2694:	50 3e       	cpi	r21, 0xE0	; 224
    2696:	68 f1       	brcs	.+90     	; 0x26f2 <__addsf3x+0x98>
    2698:	1a 16       	cp	r1, r26
    269a:	f0 40       	sbci	r31, 0x00	; 0
    269c:	a2 2f       	mov	r26, r18
    269e:	23 2f       	mov	r18, r19
    26a0:	34 2f       	mov	r19, r20
    26a2:	44 27       	eor	r20, r20
    26a4:	58 5f       	subi	r21, 0xF8	; 248
    26a6:	f3 cf       	rjmp	.-26     	; 0x268e <__addsf3x+0x34>
    26a8:	46 95       	lsr	r20
    26aa:	37 95       	ror	r19
    26ac:	27 95       	ror	r18
    26ae:	a7 95       	ror	r26
    26b0:	f0 40       	sbci	r31, 0x00	; 0
    26b2:	53 95       	inc	r21
    26b4:	c9 f7       	brne	.-14     	; 0x26a8 <__addsf3x+0x4e>
    26b6:	7e f4       	brtc	.+30     	; 0x26d6 <__addsf3x+0x7c>
    26b8:	1f 16       	cp	r1, r31
    26ba:	ba 0b       	sbc	r27, r26
    26bc:	62 0b       	sbc	r22, r18
    26be:	73 0b       	sbc	r23, r19
    26c0:	84 0b       	sbc	r24, r20
    26c2:	ba f0       	brmi	.+46     	; 0x26f2 <__addsf3x+0x98>
    26c4:	91 50       	subi	r25, 0x01	; 1
    26c6:	a1 f0       	breq	.+40     	; 0x26f0 <__addsf3x+0x96>
    26c8:	ff 0f       	add	r31, r31
    26ca:	bb 1f       	adc	r27, r27
    26cc:	66 1f       	adc	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	88 1f       	adc	r24, r24
    26d2:	c2 f7       	brpl	.-16     	; 0x26c4 <__addsf3x+0x6a>
    26d4:	0e c0       	rjmp	.+28     	; 0x26f2 <__addsf3x+0x98>
    26d6:	ba 0f       	add	r27, r26
    26d8:	62 1f       	adc	r22, r18
    26da:	73 1f       	adc	r23, r19
    26dc:	84 1f       	adc	r24, r20
    26de:	48 f4       	brcc	.+18     	; 0x26f2 <__addsf3x+0x98>
    26e0:	87 95       	ror	r24
    26e2:	77 95       	ror	r23
    26e4:	67 95       	ror	r22
    26e6:	b7 95       	ror	r27
    26e8:	f7 95       	ror	r31
    26ea:	9e 3f       	cpi	r25, 0xFE	; 254
    26ec:	08 f0       	brcs	.+2      	; 0x26f0 <__addsf3x+0x96>
    26ee:	b3 cf       	rjmp	.-154    	; 0x2656 <__addsf3+0x1e>
    26f0:	93 95       	inc	r25
    26f2:	88 0f       	add	r24, r24
    26f4:	08 f0       	brcs	.+2      	; 0x26f8 <__addsf3x+0x9e>
    26f6:	99 27       	eor	r25, r25
    26f8:	ee 0f       	add	r30, r30
    26fa:	97 95       	ror	r25
    26fc:	87 95       	ror	r24
    26fe:	08 95       	ret

00002700 <__divsf3>:
    2700:	0c d0       	rcall	.+24     	; 0x271a <__divsf3x>
    2702:	e6 c0       	rjmp	.+460    	; 0x28d0 <__fp_round>
    2704:	de d0       	rcall	.+444    	; 0x28c2 <__fp_pscB>
    2706:	40 f0       	brcs	.+16     	; 0x2718 <__divsf3+0x18>
    2708:	d5 d0       	rcall	.+426    	; 0x28b4 <__fp_pscA>
    270a:	30 f0       	brcs	.+12     	; 0x2718 <__divsf3+0x18>
    270c:	21 f4       	brne	.+8      	; 0x2716 <__divsf3+0x16>
    270e:	5f 3f       	cpi	r21, 0xFF	; 255
    2710:	19 f0       	breq	.+6      	; 0x2718 <__divsf3+0x18>
    2712:	c7 c0       	rjmp	.+398    	; 0x28a2 <__fp_inf>
    2714:	51 11       	cpse	r21, r1
    2716:	10 c1       	rjmp	.+544    	; 0x2938 <__fp_szero>
    2718:	ca c0       	rjmp	.+404    	; 0x28ae <__fp_nan>

0000271a <__divsf3x>:
    271a:	eb d0       	rcall	.+470    	; 0x28f2 <__fp_split3>
    271c:	98 f3       	brcs	.-26     	; 0x2704 <__divsf3+0x4>

0000271e <__divsf3_pse>:
    271e:	99 23       	and	r25, r25
    2720:	c9 f3       	breq	.-14     	; 0x2714 <__divsf3+0x14>
    2722:	55 23       	and	r21, r21
    2724:	b1 f3       	breq	.-20     	; 0x2712 <__divsf3+0x12>
    2726:	95 1b       	sub	r25, r21
    2728:	55 0b       	sbc	r21, r21
    272a:	bb 27       	eor	r27, r27
    272c:	aa 27       	eor	r26, r26
    272e:	62 17       	cp	r22, r18
    2730:	73 07       	cpc	r23, r19
    2732:	84 07       	cpc	r24, r20
    2734:	38 f0       	brcs	.+14     	; 0x2744 <__divsf3_pse+0x26>
    2736:	9f 5f       	subi	r25, 0xFF	; 255
    2738:	5f 4f       	sbci	r21, 0xFF	; 255
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	44 1f       	adc	r20, r20
    2740:	aa 1f       	adc	r26, r26
    2742:	a9 f3       	breq	.-22     	; 0x272e <__divsf3_pse+0x10>
    2744:	33 d0       	rcall	.+102    	; 0x27ac <__divsf3_pse+0x8e>
    2746:	0e 2e       	mov	r0, r30
    2748:	3a f0       	brmi	.+14     	; 0x2758 <__divsf3_pse+0x3a>
    274a:	e0 e8       	ldi	r30, 0x80	; 128
    274c:	30 d0       	rcall	.+96     	; 0x27ae <__divsf3_pse+0x90>
    274e:	91 50       	subi	r25, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	e6 95       	lsr	r30
    2754:	00 1c       	adc	r0, r0
    2756:	ca f7       	brpl	.-14     	; 0x274a <__divsf3_pse+0x2c>
    2758:	29 d0       	rcall	.+82     	; 0x27ac <__divsf3_pse+0x8e>
    275a:	fe 2f       	mov	r31, r30
    275c:	27 d0       	rcall	.+78     	; 0x27ac <__divsf3_pse+0x8e>
    275e:	66 0f       	add	r22, r22
    2760:	77 1f       	adc	r23, r23
    2762:	88 1f       	adc	r24, r24
    2764:	bb 1f       	adc	r27, r27
    2766:	26 17       	cp	r18, r22
    2768:	37 07       	cpc	r19, r23
    276a:	48 07       	cpc	r20, r24
    276c:	ab 07       	cpc	r26, r27
    276e:	b0 e8       	ldi	r27, 0x80	; 128
    2770:	09 f0       	breq	.+2      	; 0x2774 <__divsf3_pse+0x56>
    2772:	bb 0b       	sbc	r27, r27
    2774:	80 2d       	mov	r24, r0
    2776:	bf 01       	movw	r22, r30
    2778:	ff 27       	eor	r31, r31
    277a:	93 58       	subi	r25, 0x83	; 131
    277c:	5f 4f       	sbci	r21, 0xFF	; 255
    277e:	2a f0       	brmi	.+10     	; 0x278a <__divsf3_pse+0x6c>
    2780:	9e 3f       	cpi	r25, 0xFE	; 254
    2782:	51 05       	cpc	r21, r1
    2784:	68 f0       	brcs	.+26     	; 0x27a0 <__divsf3_pse+0x82>
    2786:	8d c0       	rjmp	.+282    	; 0x28a2 <__fp_inf>
    2788:	d7 c0       	rjmp	.+430    	; 0x2938 <__fp_szero>
    278a:	5f 3f       	cpi	r21, 0xFF	; 255
    278c:	ec f3       	brlt	.-6      	; 0x2788 <__divsf3_pse+0x6a>
    278e:	98 3e       	cpi	r25, 0xE8	; 232
    2790:	dc f3       	brlt	.-10     	; 0x2788 <__divsf3_pse+0x6a>
    2792:	86 95       	lsr	r24
    2794:	77 95       	ror	r23
    2796:	67 95       	ror	r22
    2798:	b7 95       	ror	r27
    279a:	f7 95       	ror	r31
    279c:	9f 5f       	subi	r25, 0xFF	; 255
    279e:	c9 f7       	brne	.-14     	; 0x2792 <__divsf3_pse+0x74>
    27a0:	88 0f       	add	r24, r24
    27a2:	91 1d       	adc	r25, r1
    27a4:	96 95       	lsr	r25
    27a6:	87 95       	ror	r24
    27a8:	97 f9       	bld	r25, 7
    27aa:	08 95       	ret
    27ac:	e1 e0       	ldi	r30, 0x01	; 1
    27ae:	66 0f       	add	r22, r22
    27b0:	77 1f       	adc	r23, r23
    27b2:	88 1f       	adc	r24, r24
    27b4:	bb 1f       	adc	r27, r27
    27b6:	62 17       	cp	r22, r18
    27b8:	73 07       	cpc	r23, r19
    27ba:	84 07       	cpc	r24, r20
    27bc:	ba 07       	cpc	r27, r26
    27be:	20 f0       	brcs	.+8      	; 0x27c8 <__divsf3_pse+0xaa>
    27c0:	62 1b       	sub	r22, r18
    27c2:	73 0b       	sbc	r23, r19
    27c4:	84 0b       	sbc	r24, r20
    27c6:	ba 0b       	sbc	r27, r26
    27c8:	ee 1f       	adc	r30, r30
    27ca:	88 f7       	brcc	.-30     	; 0x27ae <__divsf3_pse+0x90>
    27cc:	e0 95       	com	r30
    27ce:	08 95       	ret

000027d0 <__fixunssfsi>:
    27d0:	98 d0       	rcall	.+304    	; 0x2902 <__fp_splitA>
    27d2:	88 f0       	brcs	.+34     	; 0x27f6 <__fixunssfsi+0x26>
    27d4:	9f 57       	subi	r25, 0x7F	; 127
    27d6:	90 f0       	brcs	.+36     	; 0x27fc <__fixunssfsi+0x2c>
    27d8:	b9 2f       	mov	r27, r25
    27da:	99 27       	eor	r25, r25
    27dc:	b7 51       	subi	r27, 0x17	; 23
    27de:	a0 f0       	brcs	.+40     	; 0x2808 <__fixunssfsi+0x38>
    27e0:	d1 f0       	breq	.+52     	; 0x2816 <__fixunssfsi+0x46>
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	1a f0       	brmi	.+6      	; 0x27f2 <__fixunssfsi+0x22>
    27ec:	ba 95       	dec	r27
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <__fixunssfsi+0x12>
    27f0:	12 c0       	rjmp	.+36     	; 0x2816 <__fixunssfsi+0x46>
    27f2:	b1 30       	cpi	r27, 0x01	; 1
    27f4:	81 f0       	breq	.+32     	; 0x2816 <__fixunssfsi+0x46>
    27f6:	9f d0       	rcall	.+318    	; 0x2936 <__fp_zero>
    27f8:	b1 e0       	ldi	r27, 0x01	; 1
    27fa:	08 95       	ret
    27fc:	9c c0       	rjmp	.+312    	; 0x2936 <__fp_zero>
    27fe:	67 2f       	mov	r22, r23
    2800:	78 2f       	mov	r23, r24
    2802:	88 27       	eor	r24, r24
    2804:	b8 5f       	subi	r27, 0xF8	; 248
    2806:	39 f0       	breq	.+14     	; 0x2816 <__fixunssfsi+0x46>
    2808:	b9 3f       	cpi	r27, 0xF9	; 249
    280a:	cc f3       	brlt	.-14     	; 0x27fe <__fixunssfsi+0x2e>
    280c:	86 95       	lsr	r24
    280e:	77 95       	ror	r23
    2810:	67 95       	ror	r22
    2812:	b3 95       	inc	r27
    2814:	d9 f7       	brne	.-10     	; 0x280c <__fixunssfsi+0x3c>
    2816:	3e f4       	brtc	.+14     	; 0x2826 <__fixunssfsi+0x56>
    2818:	90 95       	com	r25
    281a:	80 95       	com	r24
    281c:	70 95       	com	r23
    281e:	61 95       	neg	r22
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	8f 4f       	sbci	r24, 0xFF	; 255
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	08 95       	ret

00002828 <__floatunsisf>:
    2828:	e8 94       	clt
    282a:	09 c0       	rjmp	.+18     	; 0x283e <__floatsisf+0x12>

0000282c <__floatsisf>:
    282c:	97 fb       	bst	r25, 7
    282e:	3e f4       	brtc	.+14     	; 0x283e <__floatsisf+0x12>
    2830:	90 95       	com	r25
    2832:	80 95       	com	r24
    2834:	70 95       	com	r23
    2836:	61 95       	neg	r22
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	8f 4f       	sbci	r24, 0xFF	; 255
    283c:	9f 4f       	sbci	r25, 0xFF	; 255
    283e:	99 23       	and	r25, r25
    2840:	a9 f0       	breq	.+42     	; 0x286c <__floatsisf+0x40>
    2842:	f9 2f       	mov	r31, r25
    2844:	96 e9       	ldi	r25, 0x96	; 150
    2846:	bb 27       	eor	r27, r27
    2848:	93 95       	inc	r25
    284a:	f6 95       	lsr	r31
    284c:	87 95       	ror	r24
    284e:	77 95       	ror	r23
    2850:	67 95       	ror	r22
    2852:	b7 95       	ror	r27
    2854:	f1 11       	cpse	r31, r1
    2856:	f8 cf       	rjmp	.-16     	; 0x2848 <__floatsisf+0x1c>
    2858:	fa f4       	brpl	.+62     	; 0x2898 <__floatsisf+0x6c>
    285a:	bb 0f       	add	r27, r27
    285c:	11 f4       	brne	.+4      	; 0x2862 <__floatsisf+0x36>
    285e:	60 ff       	sbrs	r22, 0
    2860:	1b c0       	rjmp	.+54     	; 0x2898 <__floatsisf+0x6c>
    2862:	6f 5f       	subi	r22, 0xFF	; 255
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	8f 4f       	sbci	r24, 0xFF	; 255
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	16 c0       	rjmp	.+44     	; 0x2898 <__floatsisf+0x6c>
    286c:	88 23       	and	r24, r24
    286e:	11 f0       	breq	.+4      	; 0x2874 <__floatsisf+0x48>
    2870:	96 e9       	ldi	r25, 0x96	; 150
    2872:	11 c0       	rjmp	.+34     	; 0x2896 <__floatsisf+0x6a>
    2874:	77 23       	and	r23, r23
    2876:	21 f0       	breq	.+8      	; 0x2880 <__floatsisf+0x54>
    2878:	9e e8       	ldi	r25, 0x8E	; 142
    287a:	87 2f       	mov	r24, r23
    287c:	76 2f       	mov	r23, r22
    287e:	05 c0       	rjmp	.+10     	; 0x288a <__floatsisf+0x5e>
    2880:	66 23       	and	r22, r22
    2882:	71 f0       	breq	.+28     	; 0x28a0 <__floatsisf+0x74>
    2884:	96 e8       	ldi	r25, 0x86	; 134
    2886:	86 2f       	mov	r24, r22
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	2a f0       	brmi	.+10     	; 0x2898 <__floatsisf+0x6c>
    288e:	9a 95       	dec	r25
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	88 1f       	adc	r24, r24
    2896:	da f7       	brpl	.-10     	; 0x288e <__floatsisf+0x62>
    2898:	88 0f       	add	r24, r24
    289a:	96 95       	lsr	r25
    289c:	87 95       	ror	r24
    289e:	97 f9       	bld	r25, 7
    28a0:	08 95       	ret

000028a2 <__fp_inf>:
    28a2:	97 f9       	bld	r25, 7
    28a4:	9f 67       	ori	r25, 0x7F	; 127
    28a6:	80 e8       	ldi	r24, 0x80	; 128
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	08 95       	ret

000028ae <__fp_nan>:
    28ae:	9f ef       	ldi	r25, 0xFF	; 255
    28b0:	80 ec       	ldi	r24, 0xC0	; 192
    28b2:	08 95       	ret

000028b4 <__fp_pscA>:
    28b4:	00 24       	eor	r0, r0
    28b6:	0a 94       	dec	r0
    28b8:	16 16       	cp	r1, r22
    28ba:	17 06       	cpc	r1, r23
    28bc:	18 06       	cpc	r1, r24
    28be:	09 06       	cpc	r0, r25
    28c0:	08 95       	ret

000028c2 <__fp_pscB>:
    28c2:	00 24       	eor	r0, r0
    28c4:	0a 94       	dec	r0
    28c6:	12 16       	cp	r1, r18
    28c8:	13 06       	cpc	r1, r19
    28ca:	14 06       	cpc	r1, r20
    28cc:	05 06       	cpc	r0, r21
    28ce:	08 95       	ret

000028d0 <__fp_round>:
    28d0:	09 2e       	mov	r0, r25
    28d2:	03 94       	inc	r0
    28d4:	00 0c       	add	r0, r0
    28d6:	11 f4       	brne	.+4      	; 0x28dc <__fp_round+0xc>
    28d8:	88 23       	and	r24, r24
    28da:	52 f0       	brmi	.+20     	; 0x28f0 <__fp_round+0x20>
    28dc:	bb 0f       	add	r27, r27
    28de:	40 f4       	brcc	.+16     	; 0x28f0 <__fp_round+0x20>
    28e0:	bf 2b       	or	r27, r31
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <__fp_round+0x18>
    28e4:	60 ff       	sbrs	r22, 0
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <__fp_round+0x20>
    28e8:	6f 5f       	subi	r22, 0xFF	; 255
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	8f 4f       	sbci	r24, 0xFF	; 255
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	08 95       	ret

000028f2 <__fp_split3>:
    28f2:	57 fd       	sbrc	r21, 7
    28f4:	90 58       	subi	r25, 0x80	; 128
    28f6:	44 0f       	add	r20, r20
    28f8:	55 1f       	adc	r21, r21
    28fa:	59 f0       	breq	.+22     	; 0x2912 <__fp_splitA+0x10>
    28fc:	5f 3f       	cpi	r21, 0xFF	; 255
    28fe:	71 f0       	breq	.+28     	; 0x291c <__fp_splitA+0x1a>
    2900:	47 95       	ror	r20

00002902 <__fp_splitA>:
    2902:	88 0f       	add	r24, r24
    2904:	97 fb       	bst	r25, 7
    2906:	99 1f       	adc	r25, r25
    2908:	61 f0       	breq	.+24     	; 0x2922 <__fp_splitA+0x20>
    290a:	9f 3f       	cpi	r25, 0xFF	; 255
    290c:	79 f0       	breq	.+30     	; 0x292c <__fp_splitA+0x2a>
    290e:	87 95       	ror	r24
    2910:	08 95       	ret
    2912:	12 16       	cp	r1, r18
    2914:	13 06       	cpc	r1, r19
    2916:	14 06       	cpc	r1, r20
    2918:	55 1f       	adc	r21, r21
    291a:	f2 cf       	rjmp	.-28     	; 0x2900 <__fp_split3+0xe>
    291c:	46 95       	lsr	r20
    291e:	f1 df       	rcall	.-30     	; 0x2902 <__fp_splitA>
    2920:	08 c0       	rjmp	.+16     	; 0x2932 <__fp_splitA+0x30>
    2922:	16 16       	cp	r1, r22
    2924:	17 06       	cpc	r1, r23
    2926:	18 06       	cpc	r1, r24
    2928:	99 1f       	adc	r25, r25
    292a:	f1 cf       	rjmp	.-30     	; 0x290e <__fp_splitA+0xc>
    292c:	86 95       	lsr	r24
    292e:	71 05       	cpc	r23, r1
    2930:	61 05       	cpc	r22, r1
    2932:	08 94       	sec
    2934:	08 95       	ret

00002936 <__fp_zero>:
    2936:	e8 94       	clt

00002938 <__fp_szero>:
    2938:	bb 27       	eor	r27, r27
    293a:	66 27       	eor	r22, r22
    293c:	77 27       	eor	r23, r23
    293e:	cb 01       	movw	r24, r22
    2940:	97 f9       	bld	r25, 7
    2942:	08 95       	ret

00002944 <__gesf2>:
    2944:	66 d0       	rcall	.+204    	; 0x2a12 <__fp_cmp>
    2946:	08 f4       	brcc	.+2      	; 0x294a <__gesf2+0x6>
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	08 95       	ret

0000294c <__mulsf3>:
    294c:	0b d0       	rcall	.+22     	; 0x2964 <__mulsf3x>
    294e:	c0 cf       	rjmp	.-128    	; 0x28d0 <__fp_round>
    2950:	b1 df       	rcall	.-158    	; 0x28b4 <__fp_pscA>
    2952:	28 f0       	brcs	.+10     	; 0x295e <__mulsf3+0x12>
    2954:	b6 df       	rcall	.-148    	; 0x28c2 <__fp_pscB>
    2956:	18 f0       	brcs	.+6      	; 0x295e <__mulsf3+0x12>
    2958:	95 23       	and	r25, r21
    295a:	09 f0       	breq	.+2      	; 0x295e <__mulsf3+0x12>
    295c:	a2 cf       	rjmp	.-188    	; 0x28a2 <__fp_inf>
    295e:	a7 cf       	rjmp	.-178    	; 0x28ae <__fp_nan>
    2960:	11 24       	eor	r1, r1
    2962:	ea cf       	rjmp	.-44     	; 0x2938 <__fp_szero>

00002964 <__mulsf3x>:
    2964:	c6 df       	rcall	.-116    	; 0x28f2 <__fp_split3>
    2966:	a0 f3       	brcs	.-24     	; 0x2950 <__mulsf3+0x4>

00002968 <__mulsf3_pse>:
    2968:	95 9f       	mul	r25, r21
    296a:	d1 f3       	breq	.-12     	; 0x2960 <__mulsf3+0x14>
    296c:	95 0f       	add	r25, r21
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	55 1f       	adc	r21, r21
    2972:	62 9f       	mul	r22, r18
    2974:	f0 01       	movw	r30, r0
    2976:	72 9f       	mul	r23, r18
    2978:	bb 27       	eor	r27, r27
    297a:	f0 0d       	add	r31, r0
    297c:	b1 1d       	adc	r27, r1
    297e:	63 9f       	mul	r22, r19
    2980:	aa 27       	eor	r26, r26
    2982:	f0 0d       	add	r31, r0
    2984:	b1 1d       	adc	r27, r1
    2986:	aa 1f       	adc	r26, r26
    2988:	64 9f       	mul	r22, r20
    298a:	66 27       	eor	r22, r22
    298c:	b0 0d       	add	r27, r0
    298e:	a1 1d       	adc	r26, r1
    2990:	66 1f       	adc	r22, r22
    2992:	82 9f       	mul	r24, r18
    2994:	22 27       	eor	r18, r18
    2996:	b0 0d       	add	r27, r0
    2998:	a1 1d       	adc	r26, r1
    299a:	62 1f       	adc	r22, r18
    299c:	73 9f       	mul	r23, r19
    299e:	b0 0d       	add	r27, r0
    29a0:	a1 1d       	adc	r26, r1
    29a2:	62 1f       	adc	r22, r18
    29a4:	83 9f       	mul	r24, r19
    29a6:	a0 0d       	add	r26, r0
    29a8:	61 1d       	adc	r22, r1
    29aa:	22 1f       	adc	r18, r18
    29ac:	74 9f       	mul	r23, r20
    29ae:	33 27       	eor	r19, r19
    29b0:	a0 0d       	add	r26, r0
    29b2:	61 1d       	adc	r22, r1
    29b4:	23 1f       	adc	r18, r19
    29b6:	84 9f       	mul	r24, r20
    29b8:	60 0d       	add	r22, r0
    29ba:	21 1d       	adc	r18, r1
    29bc:	82 2f       	mov	r24, r18
    29be:	76 2f       	mov	r23, r22
    29c0:	6a 2f       	mov	r22, r26
    29c2:	11 24       	eor	r1, r1
    29c4:	9f 57       	subi	r25, 0x7F	; 127
    29c6:	50 40       	sbci	r21, 0x00	; 0
    29c8:	8a f0       	brmi	.+34     	; 0x29ec <__mulsf3_pse+0x84>
    29ca:	e1 f0       	breq	.+56     	; 0x2a04 <__mulsf3_pse+0x9c>
    29cc:	88 23       	and	r24, r24
    29ce:	4a f0       	brmi	.+18     	; 0x29e2 <__mulsf3_pse+0x7a>
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	bb 1f       	adc	r27, r27
    29d6:	66 1f       	adc	r22, r22
    29d8:	77 1f       	adc	r23, r23
    29da:	88 1f       	adc	r24, r24
    29dc:	91 50       	subi	r25, 0x01	; 1
    29de:	50 40       	sbci	r21, 0x00	; 0
    29e0:	a9 f7       	brne	.-22     	; 0x29cc <__mulsf3_pse+0x64>
    29e2:	9e 3f       	cpi	r25, 0xFE	; 254
    29e4:	51 05       	cpc	r21, r1
    29e6:	70 f0       	brcs	.+28     	; 0x2a04 <__mulsf3_pse+0x9c>
    29e8:	5c cf       	rjmp	.-328    	; 0x28a2 <__fp_inf>
    29ea:	a6 cf       	rjmp	.-180    	; 0x2938 <__fp_szero>
    29ec:	5f 3f       	cpi	r21, 0xFF	; 255
    29ee:	ec f3       	brlt	.-6      	; 0x29ea <__mulsf3_pse+0x82>
    29f0:	98 3e       	cpi	r25, 0xE8	; 232
    29f2:	dc f3       	brlt	.-10     	; 0x29ea <__mulsf3_pse+0x82>
    29f4:	86 95       	lsr	r24
    29f6:	77 95       	ror	r23
    29f8:	67 95       	ror	r22
    29fa:	b7 95       	ror	r27
    29fc:	f7 95       	ror	r31
    29fe:	e7 95       	ror	r30
    2a00:	9f 5f       	subi	r25, 0xFF	; 255
    2a02:	c1 f7       	brne	.-16     	; 0x29f4 <__mulsf3_pse+0x8c>
    2a04:	fe 2b       	or	r31, r30
    2a06:	88 0f       	add	r24, r24
    2a08:	91 1d       	adc	r25, r1
    2a0a:	96 95       	lsr	r25
    2a0c:	87 95       	ror	r24
    2a0e:	97 f9       	bld	r25, 7
    2a10:	08 95       	ret

00002a12 <__fp_cmp>:
    2a12:	99 0f       	add	r25, r25
    2a14:	00 08       	sbc	r0, r0
    2a16:	55 0f       	add	r21, r21
    2a18:	aa 0b       	sbc	r26, r26
    2a1a:	e0 e8       	ldi	r30, 0x80	; 128
    2a1c:	fe ef       	ldi	r31, 0xFE	; 254
    2a1e:	16 16       	cp	r1, r22
    2a20:	17 06       	cpc	r1, r23
    2a22:	e8 07       	cpc	r30, r24
    2a24:	f9 07       	cpc	r31, r25
    2a26:	c0 f0       	brcs	.+48     	; 0x2a58 <__fp_cmp+0x46>
    2a28:	12 16       	cp	r1, r18
    2a2a:	13 06       	cpc	r1, r19
    2a2c:	e4 07       	cpc	r30, r20
    2a2e:	f5 07       	cpc	r31, r21
    2a30:	98 f0       	brcs	.+38     	; 0x2a58 <__fp_cmp+0x46>
    2a32:	62 1b       	sub	r22, r18
    2a34:	73 0b       	sbc	r23, r19
    2a36:	84 0b       	sbc	r24, r20
    2a38:	95 0b       	sbc	r25, r21
    2a3a:	39 f4       	brne	.+14     	; 0x2a4a <__fp_cmp+0x38>
    2a3c:	0a 26       	eor	r0, r26
    2a3e:	61 f0       	breq	.+24     	; 0x2a58 <__fp_cmp+0x46>
    2a40:	23 2b       	or	r18, r19
    2a42:	24 2b       	or	r18, r20
    2a44:	25 2b       	or	r18, r21
    2a46:	21 f4       	brne	.+8      	; 0x2a50 <__fp_cmp+0x3e>
    2a48:	08 95       	ret
    2a4a:	0a 26       	eor	r0, r26
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <__fp_cmp+0x3e>
    2a4e:	a1 40       	sbci	r26, 0x01	; 1
    2a50:	a6 95       	lsr	r26
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	81 1d       	adc	r24, r1
    2a56:	81 1d       	adc	r24, r1
    2a58:	08 95       	ret

00002a5a <__tablejump2__>:
    2a5a:	ee 0f       	add	r30, r30
    2a5c:	ff 1f       	adc	r31, r31

00002a5e <__tablejump__>:
    2a5e:	05 90       	lpm	r0, Z+
    2a60:	f4 91       	lpm	r31, Z
    2a62:	e0 2d       	mov	r30, r0
    2a64:	09 94       	ijmp

00002a66 <__eerd_block_m324pa>:
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22

00002a6a <__eerd_blraw_m324pa>:
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	f9 99       	sbic	0x1f, 1	; 31
    2a6e:	fe cf       	rjmp	.-4      	; 0x2a6c <__eerd_blraw_m324pa+0x2>
    2a70:	06 c0       	rjmp	.+12     	; 0x2a7e <__eerd_blraw_m324pa+0x14>
    2a72:	f2 bd       	out	0x22, r31	; 34
    2a74:	e1 bd       	out	0x21, r30	; 33
    2a76:	f8 9a       	sbi	0x1f, 0	; 31
    2a78:	31 96       	adiw	r30, 0x01	; 1
    2a7a:	00 b4       	in	r0, 0x20	; 32
    2a7c:	0d 92       	st	X+, r0
    2a7e:	41 50       	subi	r20, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	b8 f7       	brcc	.-18     	; 0x2a72 <__eerd_blraw_m324pa+0x8>
    2a84:	08 95       	ret

00002a86 <__eerd_byte_m324pa>:
    2a86:	f9 99       	sbic	0x1f, 1	; 31
    2a88:	fe cf       	rjmp	.-4      	; 0x2a86 <__eerd_byte_m324pa>
    2a8a:	92 bd       	out	0x22, r25	; 34
    2a8c:	81 bd       	out	0x21, r24	; 33
    2a8e:	f8 9a       	sbi	0x1f, 0	; 31
    2a90:	99 27       	eor	r25, r25
    2a92:	80 b5       	in	r24, 0x20	; 32
    2a94:	08 95       	ret

00002a96 <__eerd_word_m324pa>:
    2a96:	a8 e1       	ldi	r26, 0x18	; 24
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	42 e0       	ldi	r20, 0x02	; 2
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__eerd_blraw_m324pa>

00002aa2 <__eewr_block_m324pa>:
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	03 c0       	rjmp	.+6      	; 0x2aae <__eewr_block_m324pa+0xc>
    2aa8:	2d 91       	ld	r18, X+
    2aaa:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__eewr_r18_m324pa>
    2aae:	41 50       	subi	r20, 0x01	; 1
    2ab0:	50 40       	sbci	r21, 0x00	; 0
    2ab2:	d0 f7       	brcc	.-12     	; 0x2aa8 <__eewr_block_m324pa+0x6>
    2ab4:	08 95       	ret

00002ab6 <__eewr_byte_m324pa>:
    2ab6:	26 2f       	mov	r18, r22

00002ab8 <__eewr_r18_m324pa>:
    2ab8:	f9 99       	sbic	0x1f, 1	; 31
    2aba:	fe cf       	rjmp	.-4      	; 0x2ab8 <__eewr_r18_m324pa>
    2abc:	1f ba       	out	0x1f, r1	; 31
    2abe:	92 bd       	out	0x22, r25	; 34
    2ac0:	81 bd       	out	0x21, r24	; 33
    2ac2:	20 bd       	out	0x20, r18	; 32
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	fa 9a       	sbi	0x1f, 2	; 31
    2aca:	f9 9a       	sbi	0x1f, 1	; 31
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	01 96       	adiw	r24, 0x01	; 1
    2ad0:	08 95       	ret

00002ad2 <__eewr_word_m324pa>:
    2ad2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__eewr_byte_m324pa>
    2ad6:	27 2f       	mov	r18, r23
    2ad8:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__eewr_r18_m324pa>

00002adc <_exit>:
    2adc:	f8 94       	cli

00002ade <__stop_program>:
    2ade:	ff cf       	rjmp	.-2      	; 0x2ade <__stop_program>
